	PRINT	PUSH,OFF				INCLUDE	'ToolEqu.a'	INCLUDE	'Traps.a'	INCLUDE	'PackMacs.a'	INCLUDE	'QuickEqu.a'	INCLUDE	'SysEqu.a'	INCLUDE	'BB.Records.a'	INCLUDE	'StandardFile.a'		INCLUDE	'PackMacs.a'	INCLUDE	'intenv.a'		; so we can get our args, open files, etc.	INCLUDE	'signal.a'		; so we can handle 'Command-.'	INCLUDE	'Aliases.a'	PRINT	POP	IMPORT	qd:MyQDGlobals	IMPORT	G:AppGlobals* ================================================* PROCEDURE DoHighLevelEvent(event: EventRecord);* ================================================* Cette routine prcesse les apple eventskAEOpenApplication	 equ	'oapp'kAEOpenDocuments	 equ	'odoc'kAEPrintDocuments	 equ	'pdoc'kAEQuitApplication	 equ	'quit'kCoreEventClass 	equ		'aevt'keyDirectObject 	equ		'----';		SEG	'Main'			; case sensitiveDoHighLevelEvent		PROC	ExportStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start listing parameters hereEventPtr 	DS.L	1	 		; pointer to current eventParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkWindowPtr	DS.l	1			; place pour le VARWindowPtrWhere		DS.l	1			; place pour les coordonnées de la souris			;TheEvent 	DS	EventRecord 		; local copy of the event recordFrontmostWindowPtr	ds.l	1WichControl	DS.L	1			; control en cour de traitementTheDialogSel ds.l	1			; le dialog en questionTheItemHit	ds.w	1			; le item frappéLocalSize	EQU 	*			; size of all the local variables		ENDR						WITH	StackFrame,TheEvent	; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame		clr.w	-(sp)		move.l	EventPtr(a6),-(sp);AEProcessAppleEvent		dc.w	$303C,$021B,$A816		move.w	(sp)+,d0Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	DoHighLevelEvent			; this name will appear in the debugger		align 4			ENDP								* ================================================* PROCEDURE DoInitializeHighLevelEvent();* ================================================* Cette routine installe les apple eventsDoInitializeHighLevelEvent		PROC	ExportStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start listing parameters hereEventPtr 	DS.L	1	 		; pointer to current eventParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkWindowPtr	DS.l	1			; place pour le VARWindowPtrWhere		DS.l	1			; place pour les coordonnées de la souris			;TheEvent 	DS	EventRecord 		; local copy of the event recordFrontmostWindowPtr	ds.l	1WichControl	DS.L	1			; control en cour de traitementTheDialogSel ds.l	1			; le dialog en questionTheItemHit	ds.w	1			; le item frappéLocalSize	EQU 	*			; size of all the local variables		ENDR							WITH	StackFrame; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame; on installe le handler OpenApplication				clr.w	-(sp)		move.l	#KcoreEventClass,-(sp)		move.l	#KAEOpenApplication,-(sp)		import 	ProcesseAEOpenApll		pea 	ProcesseAEOpenApll		move.l	#0,-(sp)		move.w	#0,-(sp);AEInstallEventHandler		dc.w	$303C,$091F		_Pack8		move.w	(sp)+,d0		; on installe le handler OpenDocument		clr.w	-(sp)		move.l	#KcoreEventClass,-(sp)		move.l	#KAEOpenDocuments,-(sp)		import 	ProcesseAEOpenDocuments		pea 	ProcesseAEOpenDocuments		move.l	#0,-(sp)		move.w	#0,-(sp);AEInstallEventHandler		dc.w	$303C,$091F		_Pack8		move.w	(sp)+,d0		; on installe le handler PrintDocument		clr.w	-(sp)		move.l	#KcoreEventClass,-(sp)		move.l	#KAEPrintDocuments,-(sp)		import 	ProcesseAEPrintDocuments		pea 	ProcesseAEPrintDocuments		move.l	#0,-(sp)		move.w	#0,-(sp);AEInstallEventHandler		dc.w	$303C,$091F,$A816		move.w	(sp)+,d0; on installe le handler Quit application`		clr.w	-(sp)		move.l	#KcoreEventClass,-(sp)		move.l	#KAEQuitApplication,-(sp)		import 	ProcesseAEQuitApplication		pea 	ProcesseAEQuitApplication		move.l	#0,-(sp)		move.w	#0,-(sp);AEInstallEventHandler		dc.w	$303C,$091F,$A816		move.w	(sp)+,d0				Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	DoInitializeHighLevelEvent			; this name will appear in the debugger		align 4			ENDP							* ================================================* PROCEDURE ProcesseAEOpenApll();* ================================================* Cette routine ouvre un documentProcesseAEOpenApll		PROC	ExportStackFrame			RECORD	{A6Link},DECR		; build a stack frame recordTheResult			ds.w	1		; the resultParamBegin			EQU	*			; start listing parameters hereThe_AppleEventPtr 	ds.l	1	 		; pointer to current eventThe_ReplyEvent		ds.l	1the_Refcon			ds.l	1ParamSize			EQU	ParamBegin-*		; size of all the passed parametersRetAddr 			DS.L	1			; place holder for return addressA6Link				DS.L	1			; place holder for A6 linkLocalSize	EQU 	*			; size of all the local variables		ENDR							WITH	StackFrame; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame; on ne fait rien en fait		clr.w	TheResult(a6)		Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	ProcesseAEOpenApll			; this name will appear in the debugger		align 4			ENDP				* ================================================* PROCEDURE ProcesseAEOpenDocuments();* ================================================* Cette routine ouvre un documentProcesseAEOpenDocuments		PROC	ExportStackFrame			RECORD	{A6Link},DECR		; build a stack frame recordTheResult			ds.w	1		; the resultParamBegin			EQU	*			; start listing parameters hereThe_AppleEvent_Ptr 	ds.l	1	 		; pointer to current eventThe_ReplyEvent		ds.l	1the_Refcon			ds.l	1ParamSize			EQU	ParamBegin-*		; size of all the passed parametersRetAddr 			DS.L	1			; place holder for return addressA6Link				DS.L	1			; place holder for A6 linkThe_FSS				ds		1024The_DocList			ds.l	4		; AEDescListLocal_Err			ds.w	1index				ds.l	1itemsInList			ds.l	1actualSize			ds.l	1Keywd				ds.l	1returnedType		ds.l	1LocalSize	EQU 	*			; size of all the local variables		ENDR							WITH	StackFrame,fssSpec	; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame				clr.l	The_DocList(a6)		clr.l	4+The_DocList(a6); on regarde s'il y a un ou plusieur te ouvert; si oui on le ferme sans saveData le contenu		tst.l	G.listingTE		beq.s	@1				pea		G.listingWindow		_SetPort		move.l	G.listingTE,-(sp)		move.l	G.ListingTEstNum,-(sp)		move.w	G.ListingTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.listingTE,-(sp)		_TEDIspose		clr.l	G.listingTE		@1		tst.l	G.SaisieTE		beq.s	@2				pea		G.DialogSaisie		_SetPort		move.l	G.SaisieTE,-(sp)		move.l	G.SaisieTEstNum,-(sp)		move.w	G.SaisieTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.SaisieTE,-(sp)		_TEDIspose				clr.l	G.SaisieTE@2				import		TransfertMemoireSaisie 		jsr		TransfertMemoireSaisie		import		CalculDuree		jsr		CalculDuree		move.w	G.ChangeSinceLastSave,d0		and.w	#$7fff,d0		beq.s	EffaceTout_2				clr.w	-(sp)		move.w	#142,-(sp)		clr.l	-(sp)		_Alert		move.w	(sp)+,d0		cmp.w	#3,d0		beq		Exit				cmp.w	#2,d0		beq.s	EffaceTout_2; sauvegarde du fichier actuel		move.w		#0,-(sp)	;on sauvegarde le fichier en cour 		import		    saveData 		jsr		    saveData		tst.b		d0		bne		EffaceTout_2		move.l	#false,theresult(a6)		bra		Exit		; l'utilisateur à canceléEffaceTout_2						clr.w	-(sp)		move.l	The_AppleEvent_Ptr(a6),-(sp)		move.l	#'----',-(sp)		move.l	#'list',-(sp)				pea		The_DocList(a6)				move.w	#$0812,d0		_PacK8;		jsr		AEGetParamDesc		move.w	(sp)+,d0		bne		Exit   		clr.w	-(sp)		pea		The_DocList(a6)		pea		itemsInList(a6);AECountItems   		dc.w	$303C,$0407,$A816		move.w	(sp)+,d0		bne		Exit						move.l	itemsInList(a6),d7		subq.l	#1,d7		moveq	#0,d6Loop_ouverture				addq.l	#1,d6		clr.w	-(sp)		pea		The_DocList(a6)		move.l	d6,-(sp)		move.l	#'fss ',-(sp)		pea		Keywd(a6)		pea		returnedType(a6)		pea		The_FSS(a6)		move.l	#1024,-(sp)		pea		actualSize(a6)		dc.w	$303C,$100A,$A816		move.w	(sp)+,d0						pea		The_FSS(a6)		import	DoFileOpen		jsr		DoFileOpen						dbra	d7,Loop_ouverture		clr.w	-(sp)		pea		The_DocList(a6)		dc.w	$303C,$0204,$A816			move.w	(sp)+,theresult(a6)   Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	ProcesseAEOpenDocuments			; this name will appear in the debuggerTYPELYST	DC.L	'TEXT'		; fichier ascii 			DC.L	'Bbof'		; fichier bon bougre			dc.l	'MW2D'		; format mac write			dc.l	'CWWP'		; format claris works			dc.l	'Bbdf'		; bon bougre display font			dc.l	0		align 4			ENDP				* ================================================* PROCEDURE ProcesseAEPrintDocuments();* ================================================* Cette routine gère l'impression du documentProcesseAEPrintDocuments		PROC	ExportStackFrame			RECORD	{A6Link},DECR		; build a stack frame recordTheResult			ds.w	1		; the resultParamBegin			EQU	*			; start listing parameters hereThe_AppleEvent_Ptr 	ds.l	1	 		; pointer to current eventThe_ReplyEvent		ds.l	1the_Refcon			ds.l	1ParamSize			EQU	ParamBegin-*		; size of all the passed parametersRetAddr 			DS.L	1			; place holder for return addressA6Link				DS.L	1			; place holder for A6 linkThe_FSS				ds		1024The_DocList			ds.l	4		; AEDescListLocal_Err			ds.w	1index				ds.l	1itemsInList			ds.l	1actualSize			ds.l	1Keywd				ds.l	1returnedType		ds.l	1LocalSize	EQU 	*			; size of all the local variables		ENDR							WITH	StackFrame,fssSpec	; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame				clr.l	The_DocList(a6)		clr.l	4+The_DocList(a6); on regarde s'il y a un ou plusieur te ouvert; si oui on le ferme sans saveData le contenu		tst.l	G.listingTE		beq.s	@1				pea		G.listingWindow		_SetPort		move.l	G.listingTE,-(sp)		move.l	G.ListingTEstNum,-(sp)		move.w	G.ListingTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.listingTE,-(sp)		_TEDIspose		clr.l	G.listingTE		@1		tst.l	G.SaisieTE		beq.s	@2				pea		G.DialogSaisie		_SetPort		move.l	G.SaisieTE,-(sp)		move.l	G.SaisieTEstNum,-(sp)		move.w	G.SaisieTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.SaisieTE,-(sp)		_TEDIspose				clr.l	G.SaisieTE@2				import		TransfertMemoireSaisie 		jsr		TransfertMemoireSaisie		import		CalculDuree		jsr		CalculDuree		move.w	G.ChangeSinceLastSave,d0		and.w	#$7fff,d0		beq.s	EffaceTout_2				clr.w	-(sp)		move.w	#142,-(sp)		clr.l	-(sp)		_Alert		move.w	(sp)+,d0		cmp.w	#3,d0		beq		Exit				cmp.w	#2,d0		beq.s	EffaceTout_2; sauvegarde du fichier actuel		move.w		#0,-(sp)	;on sauvegarde le fichier en cour 		import		    saveData 		jsr		    saveData		tst.b		d0		bne		EffaceTout_2		move.l	#false,theresult(a6)		bra		Exit		; l'utilisateur à canceléEffaceTout_2						clr.w	-(sp)		move.l	The_AppleEvent_Ptr(a6),-(sp)		move.l	#'----',-(sp)		move.l	#'list',-(sp)				pea		The_DocList(a6)				move.w	#$0812,d0		_PacK8;		jsr		AEGetParamDesc		move.w	(sp)+,d0		bne		Exit   		clr.w	-(sp)		pea		The_DocList(a6)		pea		itemsInList(a6);AECountItems   		dc.w	$303C,$0407,$A816		move.w	(sp)+,d0		bne		Exit						move.l	itemsInList(a6),d7		subq.l	#1,d7		moveq	#0,d6Loop_ouverture				addq.l	#1,d6		clr.w	-(sp)		pea		The_DocList(a6)		move.l	d6,-(sp)		move.l	#'fss ',-(sp)		pea		Keywd(a6)		pea		returnedType(a6)		pea		The_FSS(a6)		move.l	#1024,-(sp)		pea		actualSize(a6)		dc.w	$303C,$100A,$A816		move.w	(sp)+,d0						pea		The_FSS(a6)		import	DoFileOpen		jsr		DoFileOpen				import	Imprimer		jsr		Imprimer				dbra	d7,Loop_ouverture		clr.w	-(sp)		pea		The_DocList(a6)		dc.w	$303C,$0204,$A816			move.w	(sp)+,theresult(a6)   Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	ProcesseAEPrintDocuments			; this name will appear in the debugger		align 4			ENDP				* ================================================* PROCEDURE ProcesseAEQuitApplication();* ================================================* Cette routine gère le quit application;;FUNCTION MyHandleQuit (theAppleEvent, reply: AppleEvent;;                       handlerRefcon: LongInt) : OSErr;ProcesseAEQuitApplication		PROC	ExportStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordresult		ds.l	1ParamBegin	EQU	*			; start listing parameters herethe_Apple_Event	ds.l	1The_Relpy		ds.l	1the_HandlerRefCon	ds.l	1ParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkWindowPtr	DS.l	1			; place pour le VARWindowPtrWhere		DS.l	1			; place pour les coordonnées de la souris			;TheEvent 	DS	EventRecord 		; local copy of the event recordFrontmostWindowPtr	ds.l	1WichControl	DS.L	1			; control en cour de traitementTheDialogSel ds.l	1			; le dialog en questionTheItemHit	ds.w	1			; le item frappéLocalSize	EQU 	*			; size of all the local variables		ENDR							WITH	StackFrame; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame; on regarde s'il y a un ou plusieurste ouvert; si oui on le ferme sans saveData le contenu				tst.l	G.listingTE		beq.s	@1_00				pea		G.listingWindow		_SetPort		move.l	G.listingTE,-(sp)		move.l	G.ListingTEstNum,-(sp)		move.w	G.ListingTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.listingTE,-(sp)		_TEDIspose		clr.l	G.listingTE		@1_00	tst.l	G.SaisieTE		beq.s	@2_00		pea		G.DialogSaisie		_SetPort		move.l	G.SaisieTE,-(sp)		move.l	G.SaisieTEstNum,-(sp)		move.w	G.SaisieTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire; on ferme le te		move.l	G.SaisieTE,-(sp)		_TEDIspose				clr.l	G.SaisieTE		clr.w	G.SaisieTEstItem		@2_00		import		TransfertMemoireSaisie		jsr		TransfertMemoireSaisie		import		CalculDuree		jsr		CalculDuree				move.w	G.ChangeSinceLastSave,d0		and.w	#$7fff,d0		beq.s	EffaceTout_1				; on peut tout effacer car déjà sauvegardé		; on demande son choix à l'utilisateur (sauvegarder, ne pas sauv., annuler)				clr.w	-(sp)		move.w	#152,-(sp)		clr.l	-(sp)		_Alert		move.w	(sp)+,d0		cmp.w	#3,d0		beq		Exit				cmp.w	#2,d0		beq.s	EffaceTout_1; sauvegarde du fichier actuel		move.w		#0,-(sp)	;on sauvegarde le fichier en cour 		import	    saveData 		jsr		    saveData		tst.b		d0		beq			Exit		; l'utilisateur à canceléEffaceTout_1 				import	Terminate		; let's get out of here		jsr		Terminate		; let's get out of here		Exit	move.l	#false,result(A6)		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New	ProcesseAEQuitApplication			; this name will appear in the debugger		align 4			ENDP		