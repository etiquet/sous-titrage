	PRINT	PUSH,OFF				INCLUDE	'ToolEqu.a'	INCLUDE	'Traps.a'	INCLUDE	'PackMacs.a'	INCLUDE	'QuickEqu.a'	INCLUDE	'SysEqu.a'	INCLUDE	'BB.Records.a'	INCLUDE	'StandardFile.a'		INCLUDE	'PackMacs.a'	INCLUDE	'intenv.a'		; so we can get our args, open files, etc.	INCLUDE	'signal.a'		; so we can handle 'Command-.'	INCLUDE	'PrEqu.a'	INCLUDE	'PrintTrapsEqu.a'	; pour utiliser le printing manager	PRINT	POP	IMPORT	qd:MyQDGlobals	IMPORT	G:AppGlobals		* ================================================* PROCEDURE Imprimer();* ================================================;; Routine d'impression;;			SEG	'IMPRESSION'			; case sensitiveImprimer	PROC  EXPORT			; any source file can use this routineStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkTHPrint		ds.l	1			; handle du print recordwidthSTNumber	ds.w	1HeightSTNumber	ds.w	1NombrePage		ds.w	1startSTnum		ds.l	1nombreST_ParPage	ds.w	1TheGraphPort	ds.l	1xOffset			ds.w	1YOffset			ds.w	1Pointeur		ds.l	1	TheDialog		ds		dWindLen	; le dialog pour cette routinecurrentPort		ds.l	1ItemType			ds.w	1ItemHandle 			ds.l	1itemRect 			ds		rectLargeurReglette		ds.w	1LastXpos 			ds.w	1rectangle			ds		RectNumST 				ds.w	1NombreST			ds.w	1	textBuff1			ds.b	256textBuff2			ds.b	256pictHandle			ds.l	1pictRect			ds		RectLocalSize	EQU 	*			; size of all the local variables		ENDR						WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame		IMPORT	ConversionNumeroSTPointeur,ConversionTCstASCII, \				AdditionTimeCode,SoustractionTimeCode,ConversionTimeCode_Trames,\				SpinCursor,Show_cursor,PrintOneSousTitre		movem.l	d0-d7/a0-a4,-(sp)	; sauvegarde des registres 				import PrOpen;		jsr	   PrOpen;; on commence par recopier le T_print struct dans un handle		move.l	#120,d0		_NewHandle		cmp.l	#0,a0		beq 	Exit			move.l	a0,THPrint(a6)				move.l	THPrint(a6),a0		move.l	(a0),a1		; handle		lea.l	G.T_print,a0		move.l	#120,d0		_BlockMove; on appelle le dialog standard d'impression		clr.w	-(sp)		move.l	THPrint(a6),-(sp)		_PrJobDialog		move.w	(sp)+,d0		beq		Cancel; on imprime		; on stocke le contenu du handle en mémoire		move.l	THPrint(a6),a0		move.l	(a0),a0		; handle		lea.l	G.T_print,a1		move.l	#120,d0		_BlockMove		; on regarde combien on peut caser de st en horizontal		lea		G.T_print,a0		moveq	#0,d0		move.w	rPage+prInfo+right(a0),d0		divu	#428,d0		bne.s	PasZeroWidth		moveq 	#1,d0PasZeroWidth		move.w	d0,widthSTNumber(a6); on calcule combien de st entre dans un page en vertical		moveq	#0,d0		move.w	rPage+prInfo+bottom(a0),d0		divu	#ListingHauteurCarreST,d0		bne.s	PasZeroHeight		moveq 	#1,d0PasZeroHeight		move.w	d0,HeightSTNumber(a6)		; NOMBRE DE ST en hauteur		; on calcule le nombre de page à imprimer		and.l	#$ffff,d0		mulu.w	widthSTNumber(a6),d0		move.w	d0,nombreST_ParPage(a6)		move.l	G.General_NombreST,d1		divu	d0,d1		bne.s	PasNulPages		moveq	#1,d1PasNulPages		move.w	d1,NombrePage(a6)		; on lance la routine d'impression; on détermine le nombre de page à imprimer			move.l	THPrint(a6),a0		move.l	(a0),a0			; handle				move.w	iLstPage+PrJob(a0),d0		sub.w	iFstPage+PrJob(a0),d0			cmp.w	#127,d0		bhi.s	TouteLesPages	; on dessine toutes les pages		move.w	d0,NombrePage(a6)		move.w	d0,d2		add.w	#1,d0		move.w	d0,iLstPage+PrJob(a0)		mulu	nombreST_ParPage(a6),d2		move.w	d2,NombreST(a6)				; nombre total de st à imprimer		move.w	iFstPage+PrJob(a0),d1		mulu	nombreST_ParPage(a6),d1		move.l	d1,startSTnum(a6)			; n° du 1er st a dessiner		move.w	#1,iFstPage+PrJob(a0)		bra		PrintTouteLesPages				move.l	#1,startSTnum(a6)		move.l	G.General_NombreST,d0		move.w	d0,NombreST(a6); on imprime; ---------------------------------------------------------------Print	; on ouvre un dialog pour indiquer la progression de l'impression			; on ajoute 1 pour la page de garde		add.w	#1,iLstPage+PrJob(a0)				clr.l	-(sp)		move.w	#156,-(sp)		pea		TheDialog(a6)		move.l	#-1,-(sp)		_GetNewDialog		_DrawDialog		pea		TheDialog(a6)		_SetPort; on dessine la reglette, et on calcule ses dimmensions						move.l	G.General_PremierSTPtr,Pointeur(a6)		move.w	#0,NumST(a6)		; on affiche le nom du film		pea		TheDialog(a6)		move.w	#2,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem					move.l	ItemHandle(a6),-(sp)		pea		G.Preference_TitreFrancais		_SetItext				pea		TheDialog(a6)		move.w	#1,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem			pea		itemRect(a6)		_FrameRect		move.w	right+itemRect(a6),d0		sub.w	left+itemRect(a6),d0		sub.w	#6,d0		move.w	d0,LargeurReglette(a6)				move.w	bottom+itemRect(a6),bottom+rectangle(a6)		subq.w	#2,bottom+rectangle(a6)		move.w	top+itemRect(a6),top+rectangle(a6)		addq.w	#2,top+rectangle(a6)				move.w	left+itemRect(a6),left+Rectangle(a6)		add.w	#2,left+rectangle(a6)		; --------------------------------------------------------		; on commence l'impression				clr.l	-(sp)		move.l	THPrint(a6),-(sp)		clr.l	-(sp)		clr.l	-(sp)		_PrOpenDoc		move.l	(sp)+,TheGraphPort(a6)				move.l	TheGraphPort(a6),-(sp)		_SetPort; ------------------------------------------------		; 	on imprime la page d'en tête							move.l	TheGraphPort(a6),-(sp)		clr.l	-(sp)		_PrOpenPage		; nouvelle page; impression du logo de la société				clr.l	-(sp)		move.w	#1000,-(sp)		_GetPicture		move.l	(sp)+,pictHandle(a6)		; picture handle				move.l	pictHandle(a6),a0		; picture handle		move.l	(a0),a0					; handle		move.l	2(a0),pictRect(a6)		move.l	4+2(a0),4+pictRect(a6)		move.w	left+pictRect(a6),d0		sub.w	d0,left+pictRect(a6)		sub.w	d0,right+pictRect(a6)				move.w	top+pictRect(a6),d0		sub.w	d0,top+pictRect(a6)		sub.w	d0,bottom+pictRect(a6); on calcule la position de l'image en x					lea		G.T_print,a0		moveq	#0,d0		move.w	rPage+prInfo+right(a0),d0		sub.w	right+pictRect(a6),d0		add.w	left+pictRect(a6),d0		; espace restant		lsr.w	#1,d0		; 1/2 espace restant		add.w	d0,left+pictRect(a6)		add.w	d0,right+pictRect(a6); 10 pixel vers e bas		move.w	#50,d0		add.w	d0,top+pictRect(a6)		add.w	d0,bottom+pictRect(a6)	; on affiche le "picture"		move.l	pictHandle(a6),-(sp)		pea		pictRect(a6)		_drawPicture				move.l	pictHandle(a6),-(sp)		_ReleaseResource	; impression des informations				lea		G.T_print,a0		moveq	#0,d7		move.w	rPage+prInfo+bottom(a0),d7		lsr.w	#1,d7							; 1/2 hauteur de la page		move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo	; ----		MOVE.W		#NewYork,-(SP)					; Monaco		_TextFont		MOVE.W		#14,-(SP)						; 6 point		_TextSize		MOVE.W		#1,-(SP)						; bold		_TextFace		string		Pascal				pea		#'Impression du : '		_DrawString								move.l	$20c,-(sp)		move.w	#1,-(sp)			; long date		pea		textBuff1(a6)			clr.w	-(sp)			_pack6				; the date				MOVE.W		#0,-(SP)						; norma		_TextFace				pea		textBuff1(a6)			_drawString		; ---				MOVE.W		#1,-(SP)						; bold		_TextFace		pea		#'  à  '		_DrawString						move.l	$20c,-(sp)		move.w	#1,-(sp)			; long date		pea		textBuff1(a6)			move.w	#2,-(sp)			; iuTimeString iuTimeString		_pack6				; the time				MOVE.W		#0,-(SP)						; norma		_TextFace				pea		textBuff1(a6)			_drawString				add.w	#40,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo; ----					MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Titre français : '		_DrawString				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		G.Preference_TitreFrancais		_DrawString				add.w	#30,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						 		_TextFace				pea		#'Titre original : '		_DrawString				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		G.Preference_TitreOriginal		_DrawString				add.w	#30,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Adaptateur : '		_DrawString				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		G.Preference_NomAdaptateur		_DrawString				add.w	#30,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Coordonnées adaptateur : '		_DrawString				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		G.Preference_CoordonneesAdaptateur		_DrawString				add.w	#30,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Commentaire :'		_drawString						MOVE.W		#0,-(SP)						; normal		_TextFace				move.w	d7,top+pictRect(a6)		sub.w	#14,top+pictRect(a6)		move.w	d7,bottom+pictRect(a6)		add.w	#65,bottom+pictRect(a6)		move.w	#115+60,left+pictRect(a6)		move.w	left+pictRect(a6),right+pictRect(a6)		add.w	#358,right+pictRect(a6);			lea		G.Preference_commentaire,a0		moveq	#0,d0		move.b	(a0)+,d0		beq.s	PasCommentaire		move.l	a0,-(sp)		move.l	d0,-(sp)		pea		pictRect(a6)		clr.w	-(sp)				; left just				_TextBox				; interval minimumPasCommentaire		add.w	#30+51,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Intervalle minimum : '		_DrawString				moveq	#0,d0		move.w	G.Preference_Interval,d0		lea		TextBuff1(a6),a0		clr.w	-(sp)		_Pack7				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		TextBuff1(a6)		_drawString				pea		#' images '		_DrawString; lisibilité					add.w	#30,d7			; ligne du dessous				move.w	#60,-(sp)		move.w	d7,-(sp)		_MoveTo				MOVE.W		#1,-(SP)						; bold		_TextFace				pea		#'Lisibilité : '		_DrawString				moveq	#0,d0		move.w	G.Preference_LisiValue,d0		lea		TextBuff1(a6),a0		clr.w	-(sp)		_Pack7				MOVE.W		#0,-(SP)						; normal		_TextFace				pea		TextBuff1(a6)		_drawString				pea		#' caractères/secondes '		_DrawString		; that's all folks !								move.l	TheGraphPort(a6),-(sp)		_PrClosPage		; nouvelle page		; ------------------------------------------------; on imprime les pages de sous-titres		; printing Loop			move.w	NombrePage(a6),d7				move.l	startSTnum(a6),d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	a0,pointeur(a6)		; 		PrintingLoopPage		move.w	#37,Xoffset(a6) 		move.w	#36,Yoffset(a6)  ; hauteur de l'en tête		move.l	TheGraphPort(a6),-(sp)		clr.l	-(sp)		_PrOpenPage		; nouvelle page; on initialise les compteurs vertical et horizontal; currentPort				_PenNormal		MOVE.W		#SrcCopy,-(SP)					; source mode		_TextMode		MOVE.W		#Monaco,-(SP)					; Monaco		_TextFont		MOVE.W		#6,-(SP)						; 6 point		_TextSize		MOVE.W		#0,-(SP)						; plain		_TextFace; on dessine l'en tête		move.w	#9,-(sp)		move.w	#10,-(sp)		_MoveTo				pea		#'Titre : '		_DrawString		pea		G.Preference_TitreFrancais		_DrawString				; on fabrique la chaîne page n°nnn/nnn				lea		TextBuff1(a6),a0		move.b	#6,(a0)+		Move.b	#'P',(a0)+		Move.b	#'a',(a0)+		Move.b	#'g',(a0)+		Move.b	#'e',(a0)+		move.b	#' ',(a0)+		Move.b	#' ',(a0)+				; on place le numéro de la page		move.w	NombrePage(a6),d0		sub.w	d7,d0		add.w	#1,d0		and.w	#$ffff,d0		lea		TextBuff2(a6),a0		clr.w	-(sp)		_Pack7			; num to string				import	AppendStr		lea		TextBuff2(a6),a0		lea		TextBuff1(a6),a1		jsr		AppendStr; on place un /		lea		TextBuff1(a6),a0		moveq	#0,d0		move.b	(a0),d0		move.b	#'/',1(a0,D0.w)		add.b	#1,(a0); on place le total de page de l'impression				move.w	NombrePage(a6),d0		add.w	#1,d0		and.w	#$ffff,d0		lea		TextBuff2(a6),a0		clr.w	-(sp)		_Pack7			; num to string				import	AppendStr		lea		TextBuff2(a6),a0		lea		TextBuff1(a6),a1		jsr		AppendStr				lea		TextBuff1(a6),a0				; on mesure la largeur du texte		clr.w	-(sp)		pea		TextBuff1(a6)		 _StringWidth 		move.w	(sp)+,d1		; largeur du texte		add.w	#9,d1; on calcule la position du texte		lea		G.T_print,a0		moveq	#0,d0		move.w	rPage+prInfo+right(a0),d0		sub.w	d1,d0		move.w	d0,-(sp)		move.w	#10,-(sp)		_MoveTo				pea		TextBuff1(a6)		_DrawString; on trace la ligne pour souligner				move.w	#0,-(sp)		move.w	#15,-(sp)		_moveto				lea		G.T_print,a0		moveq	#0,d0		move.w	rPage+prInfo+right(a0),-(sp)		move.w	#15,-(sp)		_LineTo		MOVE.W		#9,-(SP)						; 9 point		_TextSize		move.w	WidthSTNumber(a6),d6		subq.w	#1,d6PrintingLoopST_1		move.w	HeightSTNumber(a6),d5		subq.w	#1,d5;  -------------------------------------------------		PrintingLoopST	 		move.l	pointeur(a6),-(sp) 		move.w	Xoffset(a6),-(sp) 		move.w	Yoffset(a6),-(sp) 		bsr		PrintOneSousTitre	; on incrémente le sT				move.l	pointeur(a6),a0		move.l	st_NextST(a0),a0		cmpa.l	#0,a0		beq 	finImpression	; c'était le dernier sous-titre		move.l	a0,pointeur(a6)				add.w	#ListingHauteurCarreST,Yoffset(a6)		; on regarde, si l'utilisateur à demander un arrêt d'impression			move.w	$944,d0		;PrintErr		bne 	FinImpressionError	; il y a une erreur ou un arrêt d'impression		; on rafraichi la reglette			pea		TheDialog(a6)		_SetPort		add.w	#1,NumST(a6)		move.w	NumST(a6),d0		move.w	LargeurReglette(a6),d1		and.l	#$fff,d1			mulu.w	d1,d0; resultat sur 32 bits dans d0		move.w	NombreST(a6),d1			; nombre à imprimer		divu	d1,d0; resultat dans d0		cmp.w	LastXpos(a6),d0		beq.s	onnedessinepas		move.w	d0,LastXpos(a6); on dessine la reglette								add.w	Left+ItemRect(a6),d0		add.w	#2,d0		move.w	d0,Right+rectangle(a6)						move.l	#CyanColor,-(sp)		_ForeColor		tst.b	G.Mac.HasCOloRQD 		bne.s	Zob2		_PenNormal		pea		qd.gray		_PenPat		Zob2								pea		rectangle(a6)		_PaintRect				move.w	right+rectangle(a6),left+rectangle(a6)				move.w	#32,-(sp) 		JSR	SpinCursor	; spin the ball				_PenNormal		onnedessinepas:					move.l	TheGraphPort(a6),-(sp)		_SetPort  				dbra.w	d5,PrintingLoopST		; tout les st d'une page ont-il été dessiner; oui un passage en vertical effectué 				tst.w	d6						; si d6=0 on ne dessine pas		beq.s	PasPlusieurSTHorizontaux		clr.w	Yoffset(a6)					add.w	#508-16-4,Xoffset(a6)	; on prépare un dessin + haut à droite		dbra.w	d6,PrintingLoopST_1		; PasPlusieurSTHorizontaux; une page vient d'ètre imprimé; on incrit le nom du film en haut; et le n° de page en bas				move.l	TheGraphPort(a6),-(sp)		_PrClosPage				dbra	d7,PrintingLoopPage ; une nouvelle page				move.l	TheGraphPort(a6),-(sp)		_PrClosDoc		pea	TheDialog(a6)		_CloseDialog		bra		finImpression_1		; -------------------------------------------------	; erreur lors de l'impression	FinImpressionError		move.l	TheGraphPort(a6),-(sp)		_PrClosPage		move.l	TheGraphPort(a6),-(sp)		_PrClosDoc				pea	TheDialog(a6)		_CloseDialog		bra		CancelfinImpression				move.l	TheGraphPort(a6),-(sp)		_PrClosPage		move.l	TheGraphPort(a6),-(sp)		_PrClosDoc				pea	TheDialog(a6)		_CloseDialog	finImpression_1		; on regarde si c'est "spooled" document						move.w	$944,d0	;PrintErr		bne.s	Cancel	; il y a une erreur	ou une annulation										move.l	THPrint(a6),a0		move.l	(a0),a0			; handle		move.b	PrJob+BjDocLoop(a0),d0		beq.s	Cancel			; pas spooled document				clr.l	-(sp)		move.w	#157,-(sp)		pea		TheDialog(a6)		move.l	#-1,-(sp)		_GetNewDialog		_DrawDialog				; on spool le document		move.l	THPrint(a6),-(sp)		clr.l	-(sp)		clr.l	-(sp)		clr.l	-(sp)		pea		G.TPrStatus		_PrPicFile			pea	TheDialog(a6)		_CloseDialog				bra		Cancel				;  -------------------------------------------------		Cancel				move.l	THPrint(a6),a0		_DisposHandleExit:	move.w	#$0505,-(sp)			jsr		Show_cursor		import	PrClose		jsr		PrClose		MOVEM.L	(SP)+,D0-D7/A0-A4		UNLK	A6			; destroy the link		MOVEA.L	(SP)+,A0		; pull off the return address		ADDA.L	#ParamSize,SP		; strip all of the caller's parameters		JMP	(A0)			; return to the caller; donnée pour le texte 		STRING asis		align 4		DbgInfo.New	Imprimer		ENDP				* ================================================* PROCEDURE PrintOneSousTitre(le sous-titre: a0;d0= xpos, d1=ypos,);* ================================================PrintOneSousTitre	PROC  EXPORT			; any source file can use this routineStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointpointeur	ds.l	1XOffset		ds.w	1YOffset		ds.w	1ParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkNumST		ds.w	1			; position du controle vertical (n° 1 st affiché)Rectangle	DS		rect			; de la fenètreTEHandle		DS.L	1		; PLACE POUR le handle du tetextbuff		ds.b	256textbuff2		ds.b	256LocalSize	EQU 	*			; size of all the local variables		ENDR; ON ESSAYE D'ENLEVER LES INTERUPTIONS			WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		LINK	A6,#LocalSize		; allocate our local stack frame		IMPORT	ConversionNumeroSTPointeur,ConversionTCstASCII, \				AdditionTimeCode,SoustractionTimeCode,ConversionTimeCode_Trames				movem.l	d0-d7/a0-a4,-(sp)	; sauvegarde des registres 				; --------------------------		move.w	XOffset(a6),d6		move.w	YOffset(a6),d7						_PenNormal						move.w	#Courier,-(sp)		_TextFont;  d6= x pos;  d7= y pos;  a4= pointeur sur sous-titre (pour l'instant rien du tout)		; affichage 'st n°		move.w		d6,d0		add.w		#7,d0		move.w	d0,-(sp)		move.w		d7,d0		add.w		#11,d0		move.w	d0,-(sp)		_MoveTo				string pascal		pea	 text1(pc)			_DrawString		; affichage num sous-titre		move.l	pointeur(a6),a0				afficheNumeroSt; on regarde si le sous-titre a été décalé , si oui on inverse son titre		btst	#stFlag_Decale,st_Flags(a0)		beq.s	PasDecale 		move.w	#NotSrcOr,-(sp)		; decalé => inversé		_TextMode		PasDecale 		move.l	pointeur(a6),a0			move.l	st_NumeroST(a0),d0		Lea		textBuff(a6),A0		import	ConvertiNumST_String		jsr		ConvertiNumST_String		pea		textBuff(a6)		_DrawString		; affichage début 				move.w	#SrcOr,-(sp)		_TextMode				; on retabli le mode normal				move.w		d6,d0		add.w		#7,d0		move.w	d0,-(sp)		move.w		d7,d0		add.w		#14+9,d0		move.w	d0,-(sp)		_MoveTo 		string pascal		pea		text3(pc)		_DrawString	; affichage start tc 		move.l	pointeur(a6),a0		move.l	st_TimeCodeIn(a0),d0		cmp.l	#-1,d0		bne.s	afftcin		string pascal		pea		#'           '		_DrawString		BRA.S	TCFIN		afftcin	Lea		textBuff(a6),a0		jsr	ConversionTCstASCII				pea		textBuff(a6)		_DrawString			; affichage finTCFIN; on calcule le rectangle autour du tc in				tst.w	G.General_Preference_DessinGris		beq		PasDessinGris				move.w		d6,d0		add.w		#59,d0		move.w		d0,left+Rectangle(a6)		move.w		d7,d0		add.w		#13,d0		move.w		d0,top+Rectangle(a6)		move.w		Left+rectangle(a6),right+rectangle(a6)		move.w		top+rectangle(a6),bottom+rectangle(a6)		add.w		#13,bottom+Rectangle(a6)		add.w		#84,right+Rectangle(a6)		 		pea		qd.Gray 		_PenPat						pea		Rectangle(a6)		_FrameRect				; on entoure le tc in d'un rectangle en pointillé				_PenNormalPasDessinGris				move.w		d6,d0		add.w		#7,d0		move.w	d0,-(sp)		move.w		d7,d0		add.w		#26+9,d0		move.w	d0,-(sp)		_MoveTo				pea		text5(pc)		_DrawString		; affichage end tc		move.l	pointeur(a6),a0		move.l	st_TimeCodeOUT(a0),d0		cmp.l	#-1,d0		bNE.s	afftcOUT		pea		#'         '		_DrawString				BRA.S		LISIafftcOUT:		Lea		textbuff(a6),a0		jsr		ConversionTCstASCII				pea		textbuff(a6)		_DrawString; affichage lisibilitéLISI		; on calcule le rectangle autour du tc out				tst.w	G.General_Preference_DessinGris		beq		PasDessinGris_2		move.w		d6,d0		add.w		#59,d0		move.w		d0,left+Rectangle(a6)		move.w		d7,d0		add.w		#26,d0		move.w		d0,top+Rectangle(a6)		move.w		Left+rectangle(a6),right+rectangle(a6)		move.w		top+rectangle(a6),bottom+rectangle(a6)				pea			qd.Gray		_PenPat				add.w	#13,bottom+Rectangle(a6)		add.w	#84,right+Rectangle(a6)			pea		Rectangle(a6)		_FrameRect				; on entoure le tc out d'un rectangle en pointillé				_PenNormal		PasDessinGris_2				move.w		d6,d0		add.w		#7-3,d0		move.w	d0,-(sp)		move.w		d7,d0		add.w		#48,d0		move.w	d0,-(sp)		_MoveTo		string pascal		pea		text8(pc)		_DrawString			; on fait le calcul de lisibilité; on commence par tester la validité des time codes		move.l	pointeur(a6),a0		move.l	st_TimeCodeIn(a0),d1		move.l	st_TimeCodeOut(a0),d0		cmp.l	#-1,d0		beq.s	LISI_Err		cmp.l	#-1,d1		bne.s	LISI_pasErr; les times codes ne sont pas valides, donc on met un '?'LISI_Err		string pascal		pea		#' ?      '  		_DrawString		bra.s		affTExte; ok on peut calculerLISI_pasErr		jsr	SoustractionTimeCode		jsr	ConversionTimeCode_Trames		cmp.l	#1500,d0		blt.s	LISI_InfAUnWord		string pascal		pea		#' Un Max !'		_DrawString		bra.s	affTExteLISI_InfAUnWord:		tst.w	d0		bne.s	LISI_PasNulle		pea		#' Nulle !'		_DrawString		bra.s	affTExte; on est libéré on peut travailler en Word, ouf! pour le 68000 LISI_PasNulle:		mulu.w	G.Preference_LisiValue,d0		divu.w	#25,d0		and.l	#$ffff,d0		lea		textBuff(a6),a0		clr.w	-(sp)		_Pack7				Pea		textBuff(a6)		_DrawString		; affichage texte sous-titre; calcul des coordonnées du rectangleaffTExte:		move.w		d6,d0		add.w		#151,d0		move.w		d0,Left+Rectangle(a6)				move.w		d7,d0		add.w		#15,d0			move.w		d0,Top+Rectangle(a6)				move.w		d6,d0		add.w		#417,d0		move.w		d0,right+Rectangle(a6)				move.w		d7,d0		add.w		#48,d0		move.w		d0,bottom+Rectangle(a6)		move.l		pointeur(a6),a4		move.l		st_TexteLenth(a4),d0		beq.s		OnpasseAuCommentaire				; on utilise un testyle pour dessiner le texte 		clr.l	-(sp)		pea		Rectangle(a6)		pea		Rectangle(a6)		_TEStylenew		move.l	(sp)+,TEHandle(a6)				move.w	#tejustCenter,-(sp)		move.l	TEHandle(a6),-(sp)		_TESetJust; on y place le texte		move.l	TEHandle(a6),-(sp)		move.l	a4,-(sp)		pea		Rectangle(a6)		move.w	#9,-(sp)		; on ne change pas		import	TransfertTexte_Memoire_StyleTE		jsr		TransfertTexte_Memoire_StyleTE; on sélectionne tout le texte		move.l	TEHandle(a6),-(sp)		_TEDispose										; affichage texte commentaireOnpasseAuCommentaire		tst.w	G.General_Preference_DessinGris		beq		PasDessinGris_3 		pea		qd.Gray 		_PenPat				add.w	#1,bottom+Rectangle(a6)		add.w	#1,right+Rectangle(a6)		sub.w	#1,top+Rectangle(a6)		sub.w	#1,left+Rectangle(a6)				pea		Rectangle(a6)		_FrameRect				; on entoure le texte d'un rectangle en pointillé				_PenNormalPasDessinGris_3		; calcul des coordonnées du rectangle		move.w	#Courier,-(sp)		_TextFont				move.w		d6,d0		add.w		#151,d0		move.w		d0,Left+Rectangle(a6)				move.w		d7,d0		add.w		#2,d0		move.w		d0,Top+Rectangle(a6)						move.w		d6,d0		add.w		#417,d0		move.w		d0,right+Rectangle(a6)						move.w		d7,d0		add.w		#13,d0		move.w		d0,bottom+Rectangle(a6)		move.l		pointeur(a6),a0		move.l		st_CommentairePtr(a0),d0		beq			OnpasseAutrace		move.l		d0,a1		move.l		st_CommentaireLenth(a0),d0		beq.s		OnpasseAutrace		move.l		a1,-(sp)				move.l		d0,-(sp)		pea			Rectangle(a6)		move.w		#1,-(sp)		_TextBox; on trace un rectangle autour du sous-titreOnpasseAutrace		tst.w	G.General_Preference_DessinGris		beq		PasDessinGris_4 		pea		qd.Gray 		_PenPat				add.w	#1,bottom+Rectangle(a6)		add.w	#1,right+Rectangle(a6)		sub.w	#1,top+Rectangle(a6)		sub.w	#1,left+Rectangle(a6)				pea		Rectangle(a6)		_FrameRect				; on entoure le commentaire d'un rectangle en pointillé				_PenNormal		PasDessinGris_4	  	 move.w		d6,d0	   	  	move.w		d0,left+Rectangle(a6)	   	add.w		#417+6,d0	  	 move.w		d0,Right+Rectangle(a6)	   	swap d0	   	add.w		d7,d0	   	   	move.w		d0,Top+Rectangle(a6)	   	add.w		#ListingHauteurCarreST-2,d0	  	move.w	d0,Bottom+Rectangle(a6); on teste si c'est un sous-titre trouvé		_PenNormal				pea		pattern(pc)		_PenPat		move.w	Xoffset(a6),left+rectangle(a6)		move.w	yoffset(a6),top+rectangle(a6)		move.w	left+rectangle(a6),right+rectangle(a6)		move.w	top+rectangle(a6),bottom+rectangle(a6)		add.w	#ListingHauteurCarreST,bottom+rectangle(a6)		add.w	#428,right+rectangle(a6)		OndessineLeRectangle:	  	 pea		Rectangle(a6)	   	_FrameRect				_PenNormalexit	MOVEM.L	(SP)+,D0-D7/A0-A4		UNLK	A6			; destroy the link		MOVEA.L	(SP)+,A0		; pull off the return address		ADDA.L	#ParamSize,SP		; strip all of the caller's parameters		JMP	(A0)			; return to the caller; donnée pour le texte 		STRING asis				string pascaltext1           dc.b	'S.T. n°'text3           dc.b	'Début  : '   text5	        dc.b	'Fin    : 'text8			dc.b	'lisibilité :'pattern		dc.b		%10000000 			dc.b		%00001000 			dc.b		%10000000 			dc.b		%00001000 			dc.b		%10000000 			dc.b		%00001000 			dc.b		%10000000 			dc.b		%00001000 		DbgInfo.new		PrintOneSousTitre		align 4		endp						end