////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// VESupport.h//______________________________________________________________________________________________________________________//                                                Copyright (c) 1993//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                                All Rights Reserved.////                           This is unpublished work and is the proprietary source code of//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                       and should be treated as confidential//______________________________________________________________________________________________________________________//// Video Explorer utility subroutines that do not call the driver.// "VESupport" is a set of routines intended to help you get in toush with// the Video Explorer driver.  As such, they are not dependent on it.//// Author					Date			Description// ------					----			-----------// WHL			01/07/91		Created.// WHL			02/11/92		Changed driverrefnums to short to match actual type.// WHL			02/24/92		Copyright notice modified.// WHL			02/26/92		Added GetPixelDepth, GetScreenSize, and GetScreenRect.// WHL			03/16/92		Added support for I/O docking card.// WHL			03/16/92		Added cardHasVideoBahn to simplify configuration.// WHL			03/24/92		Added numCLUT2Entries for FEA.// RNS			08/18/92		Added VESlotInfo support.// WHL			09/03/92		Modified externally visible functions for Think Pascal compatibility.// FEA			10/03/92		Updated include statements.// APJ			02/17/93		Tidied up includes.// APJ			11/09/93		Removed getBoardID() (replaced by GetBoardID in McSlotManager library)//										Moved IO routines to DCSupport library//										Moved DCMCO routines to DCMCOSupport library//										Moved GetNthCard() and GetNthCardAfter() to McSlotManager library// APJ			11/17/93		Added HasGotVECard() and tidied up comments// APJ			12/14/93		Removed VXHWEqu.h include and VE_CLUTn defines//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#ifndef	_VESupport_h_#define	_VESupport_h_//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ Headers to include.//__________________________________________________________#ifndef  _IRIncludes_h_#include "IRIncludes.h"#endif#ifndef __TYPES__#include <Types.h>#endif#ifndef __QUICKDRAW__#include <Quickdraw.h>#endif//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ Public Defines//__________________________________________________________typedef enum {	VESlotInfoOK = noErr,			// information is valid	VERefNumFailed,					// unable to get the driver refnum	VEGdhFailed							// unable to get the graphics device handle} VESlotInfoError;typedef struct {											//	General information about a video explorer	short		RefNum;					// The Driver reference number	short		Slot;						// The Slot	GDHandle	Gdh;						// The Graphics Device Handle	long		MinorSlotBaseAddr;	// The Minor Slot, Base Address	short		PixelDepth;				// The number of bits per pixel, a resolution	Point		ScreenSize;				// The Screen size in pixels	Rect		ScreenRect;				// The Rectangle that encloses the screen,											// in global coordinates	} VESlotInfo;typedef VESlotInfo* VESlotInfoPtr;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ Public Function Prototypes//__________________________________________________________#ifdef __cplusplusextern "C" {#endif	/********************************************************	GetNthVEAfter - Use this routine to get the slot of the Nth	Video Explorer board, starting from the slot after the slot	passed in. Order is the number of the board you want a slot for.   (1-n), 1=first board, 2=second board, etc. If zero is returned,   then the board was not found.	********************************************************/pascal short GetNthVEAfter(short cardNum, short startingslot);	/********************************************************	GetNthVE - Use this routine to get the slot of the Nth Video Explorer   board. Order is the number of the board you want a slot for.   (1-n), 1=first board, 2=second board, etc. If zero is returned,   then the board was not found.	********************************************************/pascal short GetNthVE (short order);	/********************************************************	This returns true if the Mac can see the VE	********************************************************/Boolean HasGotVECard (short theSlot);	/********************************************************	This returns true if the Mac can see the VE	(Old version - Don't Use!)	********************************************************/pascal Boolean slotcontainsVE (short theSlot);	/********************************************************	firstVE - returns the slot number of the numerically lowest slot in the machine	that contains a video explorer with a valid EEPROM.  Will not work for cards that	have driver problems.	********************************************************/pascal short FIRSTVE (void);	/********************************************************	lastVE - returns the slot number of the numerically highest slot in the machine	that contains a video explorer with a valid EEPROM.  Will not work for cards that	have driver problems	********************************************************/pascal short LASTVE (void);	/********************************************************	nextVE - passed a slot number, it returns the number of the next higher slot	that contains a video explorer with a valid EEPROM.  Will not work for cards that	have driver problems.	********************************************************/pascal short NEXTVE (short slot);	/********************************************************	previousVE - passed a slot number, it returns the number of the next lowest slot	that contains a video explorer with a valid EEPROM.  Will not work for cards that	have driver problems.	********************************************************/pascal short previousVE (short slot);	/********************************************************	VEcount - returns the total number of active Video Explorer cards in the machine	Useful for determining whether you have to worry about synchronizing cards	********************************************************/pascal short VECOUNT (void);	/********************************************************	refnum2GDHandle - passed a driver reference number, it returns the GDevice	handle of the graphics device run by that driver.	********************************************************/pascal GDHandle REFNUM2GDHANDLE (short refnum);	/********************************************************	GDHandle2refnum - passed a GDevice handle, this routine returns the driver reference number of	the driver running that graphics device of the graphics device run by that driver.	********************************************************/pascal short GDHandle2refnum (GDHandle gdh);	/********************************************************	slot2GDHandle - passed a NuBus slot, it returns the GDevice	handle of the graphics device in that slot.	********************************************************/pascal GDHandle slot2GDHandle(short slot);	/********************************************************	GDHandle2slot - passed a GDevice handle, it returns the slot	number of the NuBus card that is that device.	********************************************************/pascal short GDHandle2slot (GDHandle gdh);	/********************************************************	GetROMVersion - passed a NuBus slot, it returns the string from the	vendor information record that should contain the version data.	********************************************************/pascal void GetROMVersion (short slot, char *versnumber);	/********************************************************	minorslotbase - What would the base address of this slot be in minor slot space?	********************************************************/pascal unsigned long minorslotbase (short slot);	/********************************************************	GetPixelDepth -- Utility routine to return the bits per pixel of a given GDevice.	********************************************************/pascal short GetPixelDepth (GDHandle gdh);	/********************************************************	getscreensize -- 	Utility to figure out how wide and how	tall a given GDevice is.	********************************************************/pascal Point GetScreenSize (GDHandle gdh);	/********************************************************	getscreenrect -- 	Utility to return the rectangle	that corresponds to a given GDevice.	********************************************************/pascal Rect GetScreenRect (GDHandle gdh);	/********************************************************	rectcontrol2rectid -- There are two different ways to refer to rectangles	through the driver.  As you have to refer to the same rectangle both ways	to do almost anything useful with it, I decided there should be a routine	to translate back and forth between them.  It should be noted that there	probably is no CLEAN way to do this that avoids problems with future	architectures.	The rectid is the way to go when setting the bounds and active region, and	the rectcontrol (priority control ID) is the way to go when setting the	channel that rectangle contains and the priority.	********************************************************/pascal short rectcontrol2rectid (short rectcontrol);	/********************************************************	rectid2rectcontrol -- There are two different ways to refer to rectangles	through the driver.  As you have to refer to the same rectangle both ways	to do almost anything useful with it, I decided there should be a routine	to translate back and forth between them.  It should be noted that there	probably is no CLEAN way to do this that avoids problems with future	architectures.	********************************************************/pascal short rectid2rectcontrol (short rectid);	/********************************************************	cardHasVideoBahn - Checks the boardID of the NuBus card in the slot specified	against a built-in list to see if it is known to have a videobahn connector.	Without a VideoBahn driver standard, this was about all that could be done to	assure that we wouldn't mess up anything by trying to use a videobahn that	wasn't there.	********************************************************/pascal Boolean cardHasVideoBahn (short theSlot);	/********************************************************	VESlotInfoErrorUpdate the VESlotInfo Record pointed to by "theVEInfo"	********************************************************/pascal VESlotInfoError UpdateVESlotInfo (VESlotInfoPtr theVEInfo);	/********************************************************	VESlotInfoError - Initialize the VESlotInfo Record pointed to by "theVEInfo" with	information about the VideoExploreR in "theSlot"	********************************************************/pascal VESlotInfoError GetVESlotInfo (VESlotInfoPtr theVEInfo, short theSlot);#ifdef __cplusplus}#endif////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#endif