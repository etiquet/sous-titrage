/***************************************		DisplayFont.h	Fichier d'include pour les structure de police FastFont****************************************/#include <QDOffscreen.h>	#include <LowMem.h>#ifndef	__DisplayFonth__#define	__DisplayFonth__/* structure pour le passage de parramètres pour le calcul de caractère */typedef	 struct RenderingParams{short	FontNumber;		// n° de policeshort	FontSize;			// tailleshort	FontStyle;		// styleshort	TheChar;			// le caractèreshort	Border;			// taille de l'épaisseurshort	Blur;				// floushort	Ratio;				// ration 4:3 ou 16:9short	XRendOffset;	// position xshort	YRendOffset;	// position yshort	Quality;			// facteur de qualité (puissance de 2) 1,2,4,8,16,32,64,256} RenderingParams,*RenderingParamsPtr,*RenderingParamsHandle;// structure de l'en tête d'une police d'affichagetypedef struct RenderInfo{GWorldPtr 	OffscreenRendering;		// pour le renduGWorldPtr 	OffscreenRendering2;	// pour le final short		dx;short		dy;short		thechar;short		font;short		style;short		size;short		originalsize;short		Quality;short		border;short		blur;short		ratio;short		baseline;Rect		rect;RgnHandle	region,rgn;RGBColor	noir,blanc;}RenderInfo,*RenderInfoPtr,**RenderInfoHandle;#define	BonBougreFormat		'Bbof'; /*the type of the file*/#define	BonBougreApplFormat 'Bbou';				typedef struct	FontRenderRecord {	Handle	NextFont_Handle;  //handle de la police suivante ; 0 si dernière	Handle	Render_handle;// handle de la police en mémoire 0 si pas en mémoire	Handle	RenderColor_handle;//		ds.l	1		; handle de la police colorée en mémoire	short	First_Char;// N° du 1 er caractère en mémoire	short	last_Char;// N° du dernier  caractère en mémoire	short	Plane_Number;// nombre de plan pour chaque caractère	short	Face_Number;// nombre de style par caractère	short	NormalKerning;//kerning normal pour la font	short	max_Ascent;// ascent de la font	short	max_descent;// descent de la font	short	spaceWidth;// largeur de l'espace $20, $ca	short	interligne;// distance normale entre 2 ligne de texte	short	UseBold;// si c'est une police bold pour normal	Handle	KerningTable	;// table de kerning // dans un fichier cette valeur indique le début de la table de kerning	short	OriginalSize;// taille demandée dans le dialog de calcul	short	VersNumber;// pour le n° de version	short	ExtraInterligne;// pour le extra-interligne	long		KerningTableSize;// taille de la table de kerning		short	FontSize;// taille de la police	short	FontChar;//n° du caractère àrendre	short	FontNumber;// n° de la police dans le mac	Str255	FontName;	//; Name of font	short	FontStyle;// style du caractères	short	FontRatio;// $403 => 4:3 $1009 => 16:9	short	FontQuality;// facteur de grossissement (n.u.)		short	FaceThickness;// epaisseur de la face		short	FaceSkew;//(n.u.)		short	FaceInclinaison;//(nu)	short	FaceHeight;//(nu)	short	FaceWidth;//(nu)	short	FaceBlur;// facteur de blur  	short	FacePlain;//PlainOutline	(nu)	long		FaceEffect;	// effect de rendu	(nu)	long		FaceTextur;//(nu)	long		FaceRGBAlpha;//(nu)	long		FaceRGBAlpha2;//(nu)	short	FaceSpread;	//(nu)	long		FaceSpare[2];//(nu)	short	BorderThickness	;// epaisseur de la face		short	BorderXoffset;// offset en X	short	BorderYoffset;//offset en Y	short	BorderSkew;//(n.u.)		short	BorderInclinaison;//(nu)	short	BorderHeight;//(nu)	short	BorderWidth	;//(nu)	short	BorderBlur;// facteur de blur  	short	BorderPlain	;//PlainOutline	(nu)	long		BorderEffect;//effect de rendu	(nu)	long		BorderTextur;//(nu)	long		BorderRGBAlpha;// (nu)	long		BorderRGBAlpha2;//(nu)	short	BorderSpread;// (nu)	short	BorderDx;//  offset en sub pix	short	BorderDy;//   offset en sub pix	long		BorderSpare[1]	;// (nu)	short	ShadowThickness	;// epaisseur de la face		short	ShadowXoffset;// offset en X	short	ShadowYoffset;// offset en Y	short	ShadowSkew;//         (n.u.)		short	ShadowInclinaison;//(nu)	short	ShadowHeight;//(nu)	short	ShadowWidth;//(nu)	short	ShadowBlur;	//facteur de blur  	short	ShadowPlain	;// PlainOutline	(nu)	long		ShadowEffect;// effect de rendu	(nu)	long		ShadowTextur;//(nu)	long		ShadowRGBAlpha;	//(nu)	long		ShadowRGBAlpha2	;// (nu)	short	ShadowSpread;	long 		ShadowSpare[2];// spare } FontRenderRecord,*FontRenderRecordPtr,**FontRenderRecordHandle;typedef struct	KerningElement {	short	PremierChar;  // note -1 pour allways	short	DeuxiemeChar; // note -1 pour allways	short	PremierCharStylMask;	short	DeuxiemeCharStylMask;	short	spare[2];	short	value;	short	styleflags;}  KerningElement,*KerningElementPtr, **KerningElementHandle;typedef struct KerningMasterList {	long			kernHeader; //value doit être égal à 'kern'	long			version; 	//version de la table de kern	long			nbKernPair;	long			FontSize;	long			spare[4];	KerningElement	kernElements[];	}  KerningMasterList,*KerningMasterListPtr,**KerningMasterListHandle;/*; pour l'instant on définie ici les paramètres suivant; ####; note 1: il pourra ètre nécéssaire d'insérer,; un coefficient de réentrée par la droite pour coller les caractères entres eux comme le T par ex; et aussi la hauteur max pour que cela puisse ètre actif.; on pourra utilisé le spare pour cela;; note 2: il faudra placer dans le style spare  adr: n° de style*8 +4;			le max ascent de la police.b , max descent.b , style type.b;;; note 3: il faut inclure dans le font record les parramètres suivants:;			normal spacing, underline position, min spacing ?, ... organisation en mémoire d'une police d'affichage; ---; on reserve de la place pour le header du font bitmaps;; rappel  :     	ptr style 1		<-  début du font bitmaps	);				  / / / / 									) header font bitmap;				ptr style n									) ;;				headerCharN°1	<- début 1 er style, début 1 er char;				bitmapPlane1char1;				bitmapPlanenchar1;				    / / / /;				headerCharN°n	<-   char n;				bitmapPlane1charn;				bitmapPlanencharn;				    / / / /;				headerCharN°1	<- début n ème style, début 1 er char;				bitmapPlane1char1;				bitmapPlanenchar1;				    / / / /;				headerCharN°n	<-   char n;				bitmapPlane1charn;				bitmapPlanencharn; (il faut réserver un  long ptr pour chaque style) ; il faudra changer le nom face number par style number (nombre de style dans le bitmap)*/#define styleHeaderSize	 0x0000008typedef struct MasterPlaneInfo{Ptr	offset;Ptr	SparePtr;}MasterPlaneInfo,*MasterPlaneInfoPtr,**MasterPlaneInfoHandle;typedef struct MasterPlane{	MasterPlaneInfo	styleoffset[4];}MasterPlane,*MasterPlanePtr,**MasterPlaneHandle;typedef struct PlaneInfo{Rect		pi_Rect; 	//rectangle du planPtr		pi_PlaneBase;//	equ	8	ptr du plan charshort	pi_Baseline; 	//base line du plan 12short	pi_spare; //spare  14}PlaneInfo,*PlaneInfoPtr,**PlaneInfoHandle;typedef struct CharHeader{Ptr		CH_NextChar; //		equ	0Ptr		CH_PreviousChar;//	equ	4short	CH_CharNumber;//	equ	8short	CH_Spare;//		equ	10		;(distance de réentrée, hauteur max de réentré ?)Rect		CH_Rect;//			equ	12} CharHeader,*CharHeaderPtr,**CharHeaderHandle;typedef struct CharHeader_C{CharHeader	ch;PlaneInfo		pi[3];				// les plane infos pour le caractère (uniquement pour C_draw_a_char)} CharHeader_C,*CharHeader_CPtr,**CharHeader_CHandle;#endif	//__DisplayFont.h__