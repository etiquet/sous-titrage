/*CQuicktime.hClass de gestion de la fenêtre de gestion quicktimele 28/04/01*/#ifndef __CQUICKTIME__#define __CQUICKTIME__#include <QuickTimeComponents.h>#include <QuickTimeVR.h>#include <time.h>#include <stdlib.h>#include <Displays.h>#include <Quickdraw.h>#include <Processes.h>#include "BB.FloatWindow.h"#include "QTUtilities.h"// enumsenum eWindowConstants {	kDefaultX				= 100,	kDefaultY				= 100};enum eBasicConstants {	kWNEDefaultSleep		= 0,																// WNE Sleep time value	kDefaultSysBeep			= 10};// movie and movie controller constantsenum eMCValues { 	kMCFlags =  0L | mcTopLeftMovie 		// default MC setup};enum eMovieValues {	kMaxMilliSecToUse		= 0L			// MoviesTask value, 0 indicates as much as possible (serve all movies)											// define other millisecond values if needed.};#define kInvalidFileRefNum			-1				// an invalid file reference number// for dialogsenum eDialogs {	kAboutBoxID						= 128,					// dialog ID for About box	kAlertErrorID					= 129,					// dialog ID for warning box	kSaveDialogQTID					= 180					// dialog ID for "Save changes..." dialog box};// items in these dialogs#define kSaveChanges				1						// save the changes before closing window#define kCancelClose				2						// no, don't close the window or save changes#define kDontSaveChanges			3						// discard any unsaved changes#define kOKButtonUserItem			4// constants for standard modal dialog filter proc#define kMyButtonDelay				8#define kReturnKey					(char)0x0D	#define kEnterKey					(char)0x03	#define kEscapeKey					(char)0x1B	#define kPeriod						'.'enum {	kMovieControllerObject  		= FOUR_CHAR_CODE('MCvr'),	kMovieControllerNoObject  		= FOUR_CHAR_CODE('MC00')};// pour windows		/*		$27=ff		$25 frew		$28 = stop		$26 = play*/// pour macenum arrowkey {arrowleftkey=0x1C,arrowrightkey=0x1D,arrowupkey=0x1E,arrowdownkey=0x1F};/*const UInt8		char_Home			 = 0x01;const UInt8		char_End			 = 0x04;const UInt8		char_PageUp			 = 0x0B;const UInt8		char_PageDown		 = 0x0C;	// • Deletion Keys •const UInt8		char_Backspace		 = 0x08;const UInt8		char_FwdDelete		 = 0x7F;	// Only nonprinting above $20const UInt8		char_Clear			 = 0x1B;	// Same as Escapeconst UInt32	vkey_Clear			 = 0x00004700;	// • Action Keys •const UInt8		char_Enter			 = 0x03;const UInt8		char_Tab			 = 0x09;const UInt8		char_Return			 = 0x0D;const UInt8		char_Escape			 = 0x1B;	// Same as Clearconst UInt32	vkey_Escape			 = 0x00003500;*/// construction / destructionvoid	QT_Constructor(void);void	QT_Destrutor(void);// Gestion messagevoid	QT_Idle(void);short	QT_EventMessage(EventRecord *event);void		QT_AdjustMenu(void); // le menu quicktime		short	QT_MouseDown(EventRecord  *event);void 		QT_MenuCommand(long  myMenuItem);// Gestion TimeCodelong	QT_GetCurTimeCode(short track);void	QT_SetTimeCode(long tc);long	QT_GetTimeOffset(void);void	QT_SetTimeOffset(long offset);// Telecommandevoid	QT_SetMovieRate(short rate);long	QT_GetMovieRate(short rate);// Gestion de fichierlong	QT_OpenMovie(FSSpec* fss);long	QT_SaveMovieAs(FSSpec* fss);long	QT_CloseMovie();// gestion des sous-titrelong	QT_SynchroniseSTListe(short track);FSSpec* QT_GetMovieFss(void);void	QT_CreateNewMovieController(Movie m_theMovie);// gestion de la fenêtrevoid	QT_PositionneFenetre(GDHandle gdh,short fullscreen);//driverspascal Boolean QT_StandardModalDialogEventFilter (DialogPtr theDialog, EventRecord *theEvent, short *theItemHit);//// Structure (class du pauvre liée à la gestion quicktime//typedef	struct	CQuicktimeClass{WindowReference		m_windows;			// the windowsMovie				m_theMovie;			// movie pointerMovieController		m_theMC;short				m_movieOpened;		// flags pour indiquer si le système est en mode plein écran  (peux-t-on le resizer)short 				m_fullscreen;		// mode pleinelong 				m_haveTCtrack;Rect				m_OriginalMovieRect;// propertiesRect				m_theMovieRect;Rect				m_theMCRect;TimeValue 			m_dur;				// native valueTimeValue 			m_tcpos;TimeScale 			m_ts;TimeBase 			m_tb;Fixed 				m_pbRate;OSType				m_fObjectType;Track				m_TextTrack;// calculate (25 fps...)long				m_CurrentTC; 		// tc absolulong				m_CurrentTCAbs; 	// tc absolulong				m_CurrentTCTracks; 	// si piste time codelong				m_MovieDuration; 	// duree du movielong				m_MovieOffset; 		// offset ‡ la lecture//gestion des eventsclock_t 			m_keytime;clock_t 			m_AutoIncrtime;long				m_AutoIncrFlag;long				m_keyUp;long				m_lastkeyUp;long 				m_keypress;long 				m_lastkeypress;long 				m_keyMovSpeed; 		//speed index .2,.3,.5,.7,1,2,3,5,8short				m_key_joy_flag;		//flag joystick /keyboard// la gestion OSType				m_ObjectType;		// specific tag indicating that the window object belongs to our applicationFSSpec				m_FileFSSpec;		// location of the movie fileshort				m_FileResID;short				m_FileRefNum;Boolean				m_Dirty;			// has the movie data changed since the last save?QTVRInstance		m_Instance;			// the QTVRInstanceHandle				m_fAppData;			// a handle to application-specific window data} CQuicktimeClass,*CQuicktimeClassPtr;///// MethodesMovieController	QT_SetupMovieWindowWithController (Movie theMovie, WindowReference theWindow, Boolean theMoveWindow,CQuicktimeClass* m_WindowQTObject);Boolean			QT_DoCreateMovieWindow (CQuicktimeClassPtr	m_WindowQTObject, Movie theMovie, FSSpec *theFSSpec);void			QT_DoDestroyMovieWindow (WindowReference theWindow);OSErr			QT_DoSaveAsMovieFile (WindowReference theWindow);Boolean			QT_DoUpdateMovieFile (WindowReference theWindow);OSErr			QT_MakeCloneOfMovieFile (const FSSpec *theFSSpec,FSSpec *theFSSpecDst);void			QT_DoActivateWindow (WindowReference theWindow, Boolean isBecomingActive);pascal void  	QT_StandardUserItemProcedure (DialogPtr theDialog, short theItem);Boolean  		QT_CheckMovieControllers (EventRecord *theEvent,WindowReference theWindow);void 			QT_SizeWindowToMovie (CQuicktimeClassPtr theWindowObject,short fullscreen);void  			QT_ShowWarning(Str255 theMessage, OSErr theErr);MovieController	QT_GetMCFromFrontWindow (void);MovieController	QT_GetMCFromWindow (WindowReference theWindow);GrafPtr			QT_GetPortFromWindowReference (WindowReference theWindow);WindowReference	QT_GetWindowReferenceFromPort (GrafPtr thePort);short			QT_GetWindowWidth (WindowReference theWindow);void			QT_AddControllerFunctionality (MovieController theMC);pascal Boolean 	QT_ApplicationMCActionFilterProc(MovieController theMC, short theAction,void *theParams, long theRefCon);CQuicktimeClassPtr	QT_GetWindowObjectFromWindow (WindowReference theWindow);Boolean			QT_IsWindowObjectOurs (CQuicktimeClassPtr m_WindowQTObject);void			QT_SetTC_Offset(void);void 			QT_MovieSpeed(CQuicktimeClass* m_QT, long speed );short 			QT_ProcessKey(short wParam,short message, long modifier, CQuicktimeClassPtr m_QT);void 			QT_ShowControler(CQuicktimeClassPtr m_WindowQTObject,short flag);short 			QT_UpdateOneCaption(CQuicktimeClass* QTC,long AbsStNum);short 			QT_UpdateQTCaption(long AbsStNum);short 			QT_UpdateQTList(void);short 			QT_ProcessJoystick(CQuicktimeClassPtr m_QT);void			QT_MovieStep(short rate);void			QT_PlayStop(void);void			QT_PlayRStop(void);long 			GetCurrentSoundLevel();void 			QT_GetTimeCodeTrackOffset2FrameCount(void);#endif __CQUICKTIME__