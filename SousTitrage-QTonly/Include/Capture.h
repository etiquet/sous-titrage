/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	Capture.h //_____________________________________________________________________________________________________________________________//                                              Copyright (c) 1993-1994//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                                All Rights Reserved.////                           This is unpublished work and is the proprietary source code of//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                       and should be treated as confidential//_____________________________________________________________________________________________________________________________////	This file provides prototypes for some of the functions necessary, and some basic data structures to use a basic capture //	function with the Video Explorerª card.//// Author		Date			Description// ------		----			-----------// MJG			12/14/93		Created// MJG			01/05/94		Finished commenting and cleanup.// APJ			01/10/94		More cleanup./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#ifndef _Capture_h_#define _Capture_h_/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	Required headers //ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ#ifndef __QUICKDRAW__#include <QuickDraw.h>#endif#ifndef __QDOFFSCREEN__#include <QDOffscreen.h>#endif#ifndef __TYPES__#include <Types.h>#endif/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	Enumerated constants. //ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑenum TCaptureError						//	Errors {	kNoErr = noErr,						//	No error has occurred 	kErrInvalidSlot = -10000,			//	The specified slot doesn't register a Video Explorer 	kErrLoadBuffer = -10001,			//	Unable to load the image into the buffer 	kErrOpenPicture = -10002,			//	Unable to open a picture to store the image 	kErrUpdateGWorld = -10003,			//	Unable to update the offscreen world };enum TCaptureSource 					//	Capture sources{	kDesktop, 							//	Macintosh desktop 	kLiveIn, 							//	Input module 	kDigitalVideoIn 					//	VideoBahn Input };	//	Note:	//	If the selected source is kDesktop, then there is no meaning to a capture type other than kFrame. In terms of a 	//	source, the desktop is considered to be a continuous plane of memory. It has no ÒfieldÓ description. If you intend to 	//	capture a field of the desktop, keep in mind that the image returned will effectively be the entire frame of the 	//	desktop. Removal of unwanted data from the returned image is up to the client.enum TCaptureType 						//	Capture types{	kFrame,  							//	Entire frame 	kOddField,  						//	Only odd field 	kEvenField  						//	Only even field };enum									//	These constants can be useful for the LoadBufferWithColor function {	kRGB888ColorBlack	= 0x00000000,	//	Black in 24 bit RGB space 	kRGB888ColorWhite	= 0x00FFFFFF,	//	White in 24 bit RGB space 		kRGB888ColorRed		= 0x00FF0000,	//	Red in 24 bit RGB space 	kRGB888ColorGreen	= 0x0000FF00,	//	Green in 24 bit RGB space 	kRGB888ColorBlue	= 0x000000FF,	//	Blue in 24 bit RGB space 		kRGB888ColorCyan	= 0x0000FFFF,	//	Cyan in 24 bit RGB space		(kRGB888ColorGreen | kRGB888ColorBlue) 	kRGB888ColorYellow	= 0x00FFFF00,	//	Yellow in 24 bit RGB space		(kRGB888ColorRed | kRGB888ColorGreen) 	kRGB888ColorMagenta	= 0x00FF00FF	//	Magenta in 24 bit RGB space		(kRGB888ColorRed | kRGB888ColorBlue) };	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	TCaptureInfoRec 	//		//	WARNING: 	//	The TCaptureInfoRec struct is a PRIVATE struct and users should NOT access the member fields directly. Use the utility 	//	routines provided to access this structure. Accessing these fields directly will lead you to the Dark side of the Force, 	//	and your software will probably break in the future. And you really don't want that, right?!?	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑtypedef struct TCaptureInfoRec {	//	Common user adjusted settings		short			fCaptureSlot;		//	Slot number of Video Explorer you want to capture on 	TCaptureSource	fCaptureSource;		//	Source for captured image 	TCaptureType	fCaptureType;		//	Type of image to capure 		//	Less common user adjusted settings		Rect			fDestRect;			//	Destination rectangle for captured image (world coordinates) 	Rect			fSourceRect;		//	Source rectangle to capture from the Video Explorer (world coordinates) 		//	***FOR INTERNAL USE ONLY***		Rect			fScreenRect;		//	World coordinates of screen 	Rect			fNormRect;			//	Normalized coordinates of screen (shifted to 0,0) 	short			fPixDepth;			//	Pixel depth of captured image 	GWorldPtr		fOSWorld;			//	Off-screen color GrafPort 	short			fOldDisplay;		//	The old display (so we can clean up when done) 	} TCaptureInfoRec;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	Function prototypes //ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ#ifdef __cplusplus		extern "C" {#endif	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	DoSimpleCapture 	//		//	This function is the single-line capture function for those that don't need or want to have precise control. It captures a 	//	single frame of the entire Video Explorer screen with no clipping. The captured image is returned to the client in a 	//	picture handle. The client is responsible for disposing the returned image. 	//		//	Parameters: 	//		->		theSlot:	The slot number that contains the Video Explorer you want to use to perform the capture. 	//		->		theSource:	The source that you want to capture. 	//		//	Returns:	A PicHandle that holds the captured image. The client is repsonsible for disposing of this PicHandle. 	//				Any errors that are trapped within this function will result in nil being returned to the client.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑPicHandleDoSimpleCapture (short theSlot, TCaptureSource theSource);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	OpenCaptureCard, DoCapture, CloseCaptureCard //	//	Note:	The client needs to call InitCaptureFunction before any of these calls are made. This function is described below.//	//	These are 3 basic functions performing a capture. This function group splits the DoSimpleCapture into 3 distinct functions //	for added flexibility. //	//	Between the OpenCaptureCard call and the DoCapture, you can call provided utility functions to change various parameters //	of the capture to allow for something other than a basic capture; i.e., you can clip your rectangle to half the screen./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	OpenCaptureCard 	//		//	This function calls the selects the specified capture card and prepares it for the DoCapture function call. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns:	A PicHandle that holds the captured image. The client is repsonsible for disposing of this PicHandle. 	//				Any errors that are trapped within this function will result in nil being returned to the client.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorOpenCaptureCard (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	DoCapture 	//		//	This function fills the Video Explorer frame buffer with the image from the specified source. Immediately prior to the 	//	actual capture, the display is switched to that souce and immediately after it is switched back. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns: 	A PicHandle that holds the captured image. The client is repsonsible for disposing of this PicHandle. 	//				Any errors that are trapped within this function will result in nil being returned to the client.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑPicHandleDoCapture (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	CloseCaptureCard 	//		//	This function closes the capture opened by the OpenCaptureCard function call.	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidCloseCaptureCard (TCaptureInfoRec* captureInfo);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	SelectCaptureCard, SetupCaptureCard, LoadBufferFromSource, LoadBufferToPicHandle, LoadBufferToPICTFile, //	CleanupCaptureCard //	//	Note:	The client needs to call InitCaptureFunction before any of these calls are made. This function is described below.//	//	These are the core level functions used to perform a capture. This level grants the client the most flexibility currently //	programmed in the Capture Function. /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SelectCaptureCard 	//		//	This function intializes card specific information used for the capture. This can be called whenever the client wishes to 	//	change the card responsible for the captured image.	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns:	An appropriate error.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorSelectCaptureCard (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SetupCaptureCard 	//		//	This function initializes the card responsible for capturing the image. Several card properties are adjusted to a known 	//	state to allow for a clean capture. If the client is capturing a field from a source other than the desktop, the Video 	//	Explorer frame buffer is cleared to black. The source and destination rectangles are set to allow for a capture of the 	//	entire image. The client can use the utility routines to change these rectangles if they desire. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns:	An appropriate error.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorSetupCaptureCard (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	LoadBufferFromSource 	//		//	This function is the core of the capture function. This loads the Video Explorer frame buffer with the image from the 	//	specified source. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns:	An appropriate error.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorLoadBufferFromSource (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	LoadPicHandleFromBuffer 	//		//	This function moves the image from the Video Explorer frame buffer into a PicHandle. The client is responsible for 	//	disposing of the PicHandle after they are done with it. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec. 	//		//	Returns:	A PicHandle that holds the captured image. The client is repsonsible for disposing of this PicHandle. 	//				Any errors that are trapped within this function will result in nil being returned to the client.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑPicHandleLoadPicHandleFromBuffer (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	LoadPICTFileFromBuffer 	//		//	This function moves the image from the Video Explorer frame buffer into a PICT file. 	//		//	Parameters: 	//		<->		captureInfo:		A pointer to your current TCaptureInfoRec. 	//		 ->		theFileName:		The name of the file that you want your image saved into. 	//		 ->		theVolumeRefNum:	The volume reference number where you want your image saved. 	//		//	Returns:	An appropriate error.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorLoadPICTFileFromBuffer (TCaptureInfoRec* captureInfo, Str255 theFileName, short theVolumeRefNum);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	CleanupCaptureCard 	//		//	This function disposes of internal memory required by the capture function. You should call this function when you are 	//	through using the capture function. After calling this function, the capture information record needs to be re-initialized 	//	before being used again. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to your current TCaptureInfoRec.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidCleanupCaptureCard (TCaptureInfoRec* captureInfo);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	InitCaptureFunction, SetCaptureInformation, GetCaptureInformation, PreviewCaptureSource, RestoreCaptureCardDisplay, //	SetCaptureDepth, SetSourceRect, SetDestinationRect, LoadBufferWithColor//	//	These are utility functions used to augment the Capture Function abilities. /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	InitCaptureFunction 	//		//	This function is meant to be called before any other functions (except the DoSimpleCapture). It initializes the capture 	//	information record with the parameters provided. This should only be called once when using the capture function. It sets 	//	the capture slot, capture source and capture type.	//		//	Parameters: 	//		<->		captureInfo:	A pointer to a TCaptureInfoRec structure. This should be a new record. 	//		 ->		theSlot:		The slot number of the Video Explorer you want to use for capturing. 	//		 ->		theSource:		The source that you want to capture. See CaptureFunctionCommon.h for valid values. 	//		 ->		theType:		The type of capture that you want to perform. See CaptureFunctionCommon.h for valid values.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidInitCaptureFunction (TCaptureInfoRec* captureInfo, short theSlot, TCaptureSource theSource, TCaptureType theType);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SetCaptureInformation 	//		//	This function is meant to be called to change currently set capture parameters. It sets capture specific parameters: 	//	capture slot, capture source and capture type. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		 ->		theSlot:		The slot number of the Video Explorer you want to use for capturing. 	//		 ->		theSource:		The source that you want to capture. See CaptureFunctionCommon.h for valid values. 	//		 ->		theType:		The type of capture that you want to perform. See CaptureFunctionCommon.h for valid values.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidSetCaptureInformation (TCaptureInfoRec* captureInfo, short theSlot, TCaptureSource theSource, TCaptureType theType);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	GetCaptureInformation 	//		//	This function is meant to be called whenever you wish to view the currently set capture parameters. It gets capture 	//	specific parameters: capture slot, capture source and capture type. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		<-		theSlot:		The currently set capture slot will be returned in this pointer. 	//		<-		theSource:		The currently set capture source will be returned in this pointer. 	//		<-		theType:		The currently set capture type will be returned in this pointer.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidGetCaptureInformation (TCaptureInfoRec* captureInfo, short* theSlot, TCaptureSource* theSource, TCaptureType* theType);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	PreviewCaptureSource 	//		//	This function is meant to be called after the OpenCaptureCard function. It displays the selected capture source on the 	//	selected Video Explorer. You do not need to call this function, although it might be useful to show your user what the 	//	source looks like so they can determine if they have the correct source before they do the capture. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		//	Returns:	An appropriate error code.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorPreviewCaptureSource (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	RestoreCaptureCardDisplay 	//		//	This function is meant to be called after the PreviewCaptureSource, OpenCaptureCard or CaptureSourceToBuffer functions. It 	//	restores the display on the selected Video Explorer. You do not need to call this function, although it might be useful if 	//	you called the PreviewCaptureSource and wish to restore the display for the user. Note: If the display was the desktop 	//	before the capture, then you will end up seeing the captured image, since it is captured into the Video Explorer frame 	//	buffer. You can remove the image by calling the LoadBufferWithColor function from CaptureFunctionUtils.h. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		//	Returns:	An appropriate error code.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorRestoreCaptureCardDisplay (TCaptureInfoRec* captureInfo);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SetCaptureDepth 	//		//	This function checks the pixel depth of the (possibly) existing offscreen GWorld. If no GWorld exists, one is created with 	//	the specified pixel depth and as large as the current destination rectangle. If an offscreen GWorld exists, and its pixel 	//	depth is different than the depth specified, it is updated to the new depth. If pixelDepth is 0, the depth of the current 	//	main screen is used.	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		 ->		pixelDepth:		The pixel depth that you want the captured image to be set at. 	//		//	Returns:	An appropriate error code.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorSetCaptureDepth (TCaptureInfoRec* captureInfo, short pixelDepth);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SetSourceRect 	//		//	This function sets the source rectangle for the given capture record which will dictate the area of the Video Explorer 	//	which is to be captured. The input to this function should be in coordinates normalized to the Video Explorer. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		 ->		left:			The left coordinate of your source rectangle in local Video Explorer coordinates.	//		 ->		top:			The top coordinate of your source rectangle in local Video Explorer coordinates.	//		 ->		right:			The right coordinate of your source rectangle in local Video Explorer coordinates.	//		 ->		bottom:			The bottom coordinate of your source rectangle in local Video Explorer coordinates.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑvoidSetSourceRect (TCaptureInfoRec* captureInfo, short left, short top, short right, short bottom);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	SetDestinationRect 	//		//	This function checks the size of the (possibly) existing offscreen GWorld. If no GWorld exists, one is created with the 	//	specified (normalized) coordinates and the pixel depth stored in the capture record. If an offscreen GWorld exists, and 	//	its size is different than the size specified, it is updated to the new size. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		 ->		left:			The left coordinate of your destination rectangle.	//		 ->		top:			The top coordinate of your destination rectangle.	//		 ->		right:			The right coordinate of your destination rectangle.	//		 ->		bottom:			The bottom coordinate of your destination rectangle.	//		//	Returns:	An appropriate error code.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorSetDestinationRect (TCaptureInfoRec* captureInfo, short left, short top, short right, short bottom);	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ	//	LoadBufferWithColor 	//		//	This function fills the Video Explorer screen frame buffer with the color value passed in. 	//		//	Parameters: 	//		<->		captureInfo:	A pointer to the current TCaptureInfoRec structure. 	//		 ->		RGBvalue:		A 24 bit color value to fill the Video Explorer frame buffer. Common values are predefined.	//		//	Returns:	An appropriate error code.	//	//ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑTCaptureErrorLoadBufferWithColor (TCaptureInfoRec* captureInfo, long RGBvalue);#ifdef __cplusplus}#endif#endif