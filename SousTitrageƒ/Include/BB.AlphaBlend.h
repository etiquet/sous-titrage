////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// AlphaBlend.h//______________________________________________________________________________________________________________________//                                                Copyright (c) 1993//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                                All Rights Reserved.////                           This is unpublished work and is the proprietary source code of//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                       and should be treated as confidential//______________________________________________________________________________________________________________________//// Author		Date			Description// ------		----			-----------// FEA			11/23/93		Ported to new project system//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#ifndef  _AlphaBlend_h_#define  _AlphaBlend_h_//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ Headers to include.//__________________________________________________________#ifndef __TYPES__#include <Types.h>#endif//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	Published Functions//__________________________________________________________#ifdef __cplusplus		extern "C" {#endifpascal long AlphaBlendSetup(short		theDriver,		//  common to all effects 									 Boolean		keepOldState,									 short		source1,									 short		source2,									 short		source3,									 Fixed		blendRatioTotal,									 Fixed		icf3);	//  Setup: AlphaBlend. Returns an opaque hatcheck. If hatcheck = nil	//	it was not possible to set up processing. If keepOldState was true	//	the mulitipliers are restored when the "passes remaining" field hits 0.pascal long AlphaBlendRun(long		hatcheck,		//  from setup call 								  short		duration);		//  in frames 	//  Process: AlphaBlend. Requires a hatcheck from the setup call.	//	Should be called after setup completes. If duration == -1	//	this will run indefinitely, until "AlphaBlendStop" is invoked.	//	If duration is 0 AlphaBlendRestore and AlphaBlendCleanup are	//	called, and nil returned.  pascal long AlphaBlendStop(long	hatcheck);	// 	//	Stop: This will set the "passes remaining" field to 0, causing the run	//	to stop after the next pass. This is mandatory if the run duration was	//	set to infinity (i.e. -1)	 pascal void AlphaBlendCleanup(long		hatcheck);	//  Cleanup: AlphaBlend. Requires a hatcheck from the run call.	//	This assumes that the run call has already completed. pascal short AlphaBlendStatus(long 	hatcheck);	//  Completion test. Tests the status of the function identified by the	//	hatcheck, either setup or run. Returns:	//	0 if in progress,	//	1 if completed successfully	//	>1 if VEDriverAcess error or negative # if toolbox error	#ifdef __cplusplus}#endif////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#endif