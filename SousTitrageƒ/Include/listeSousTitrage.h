/* définition pour les edit textes */ #define		Texte_SousTitre				1#define		Commentaire_SousTitre		2#define		TimecodeIn_SousTitre		3#define		TimecodeOut_SousTitre		4#define		Duree_SousTitre				5#define		TimecodeIn_SousTitrebcd		6	//undo uniquement#define		TimecodeOut_SousTitrebcd	7	//undo uniquement/* Structure pour les erreurs trouvées dans la listes des sous-titres */typedef struct SousTitreError{long			AbsNum;long			Errors;Handle		datah;long			spare;}SousTitreError,*SousTitreErrorPtr,**SousTitreErrorHandle;typedef struct SousTitreErrorListe{long				TotalErrorElement;SousTitreError		Errors[];}SousTitreErrorListe,*SousTitreErrorListePtr,**SousTitreErrorListeHandle;class Element{public:unsigned long			TimeCodeIn ;unsigned long			TimeCodeOut;unsigned long			AbsNUMST; 	//numéro absolu du stunsigned long			NumeroST;		//(dc.l) numéro du sous-titre dans la listeunsigned long			OldNumeroST;		//(dc.l) numéro du sous-titre dans la listeHandle				HTexte;Handle				HStyle;Handle				HCommentaire;Handle				HPosOffsetTable;	// nu pour l'instant ""KARAOKE"" momentanéementunsigned long			TexteLenth;unsigned long			StyleLenth;unsigned long			CommentaireLenth;unsigned long			PosOffsetTableLenth;	short				XOffset; /*	Offset sur position du sous-titre */short				YOffset; unsigned short			Nlines;			// nombres de lignes dans le sous-titre	Byte					Justification; 		//justification du texte 0 centrée, Byte					MasKType; 			//type de mask box, line, rectangle; = rienshort				MaskHeight;		// hauteur masqueshort				MaskWidth;		// largeur masquelong					Flags; 			//16 possibilitées (suffisants je l'espère)short				Comedien;short				piste;short				canal;short				detection;long					spare[8]; 			//8 long en reserve	 Element();	 ~Element();	short TestIfDansST(unsigned long);};class ListeSTGlobals{ public:	unsigned short 				versionLogiciel;unsigned long 				PremierTC;unsigned long 				DernierTC;unsigned long 				NombreST;unsigned short 				SousTitretrouve;  //sous- titre trouvé lors d'une rechercheunsigned short 				SousTitreEncour; //sous-titre en cour de traitement dans saisieunsigned short 				SousTitreAffiche; //sous-titre en cour de traitement dans saisie/*	variable pour le chien de garde	*/short 						ChangeSinceLastSave;  	//true si liste mofifiée depuis dernière sauvegardeshort 						Active;  	//true si fenêtre active/* nom de la denière police d'affichage utilisée */char						LastFontUsed[32];/* --------------- le stockage des fenêtres --------------------*/WindowPtr					ListingWindow;GWorldPtr	 				OffscreenListing;ControlHandle     			ListingVScroll;short						Listing_PatNum	;short 						Preference_HardTracking;short 						Preference_Tracking;short						HauteurST;/* 	Police et taille choisies pour l'affichage	*/short						General_TextSize; 		//courant size for saisieshort						General_FontNumber; 	//courant number for saisieunsigned short 				General_Preference_DessinGris;unsigned long 				CaseATickCountListing;long 						CaseALastPointListing	;short 						General_OffsetSurListing; //pour détection click listingshort 						General_ClickOnce; //pour détection double ClickTEHandle 					ListingTE;unsigned long 				ListingTEStNum; 		//abs num du te en cour 	short 						ListingTEStItem; 		//item en courshort 						ListingMaxDisplay;/* mémoire pour le block note */DialogPtr 					BlockNoteWindow;unsigned long				BlockNote_tc[16]; //espace pour 16 time code unsigned char				BlockNote_texte[256]; //256 caractères// --------  Buffers Offscreen  TEHandle 					BlockNoteTE; //handle du te pour le block noteshort 						BlockNoteTE_Item; //item correspondant au te/* Handle pour la liste des erreurs trouvées */SousTitreErrorListeHandle	ListeError;/*	PARAMETRES POUR LE FICHIER EN COUR	*//*Alias du fichier en cours */AliasHandle 				aliashandle; //handle pour le alias du fichier en courshort						vRefNum;long						FileType;//TEXT Bbof ETC pas actifunsigned char				VersionModif;/* en tête du fichier */unsigned char				Preference_TitreOriginal[256];unsigned char				Preference_TitreFrancais[256];unsigned char				Preference_TitreEpisodeOriginal[256];unsigned char				Preference_TitreEpisodeTraduit[256];unsigned char				Preference_NomAdaptateur[256];unsigned char				Preference_CoordonneesAdaptateur[256];unsigned char				Preference_commentaire[256];unsigned char				CodeDeReference[256];unsigned short				PaysOrigine;unsigned short				CodeLangue;unsigned short				CodeCaractere;unsigned long				TcDebutFilm;unsigned long				DateDeCreation;unsigned long				ModifieLe;unsigned short				Revision;unsigned char 				EditeurListe[34];			//Editeur liste sous-titreunsigned char 				NomDuMonteur[34]; 		//Nom du monteur de la liste de sous-titreunsigned char 				CoordonneeMonteur[34]; /* QUELQUES PREFERENCES */unsigned short				TempsSauve;unsigned short				AutoSave;unsigned short				UtilCheck;unsigned short				Interval;unsigned short				LisiValue;unsigned short				Renumerotation;unsigned short				Enchaine;unsigned short				affiche_CR_Flag;							// ex préférence_multifinder/* ---- Structure de données liée à l'impression du document */TPrStatus 					T_Print; //unsigned char	ListeSTGlobals(void);	friend	void ListeSTGlobalsInit(ListeSTGlobals* STG);	~ListeSTGlobals(void);};class ListeSTFonctionGlobals{public:	/* MÉMOIRE POUR RECHERCHEZ rEMPLACER */unsigned char 			Rechercher_STR[256];unsigned char 			Remplacer_STR[256];short 				Rechercher_Majuscule; 		//si true case sensitiveshort 				Rechercher_RevenirDebut; 	//wrap around searchunsigned short 			Rechercher_Commentaire; 	//flag pour indiquer si la rechehche doit se faire dans la chaine commentaireunsigned short 			Rechercher_DansZoneFlag; 	//flag si zone de rechercheunsigned long 			Rechercher_DebutZone;		// ptr du premier st de rechercheunsigned long 			Rechercher_FinZone; 		//ptr du dernier st de rechercheunsigned long			Rechercher_STNum; 			//pointeur du dernier sous titre trouveshort				Rechercher_StartOffset; 		// position du premier caractère trouvéshort				Rechercher_EndOffset ; 		//position du dernier caractère trouvéunsigned short			Rechercher_InCommentaire; 	//flags pour indiquer si la chaine a été trouver dans un commentaire/* sauvegarde pour le dialog changer style,police,couleur */short 				ChangeStyleDialog_Mode;short 				ChangeStyleDialog_style;short 				ChangeStyleDialog_font;RGBColor 				ChangeStyleDialog_Color;unsigned long 			ChangeStyleDialog_debut;unsigned long 			ChangeStyleDialog_fin;/* variables pour l'exportation vers d'autres logiciels	*/short 				Preference_TypeExport;short				Preference_ConvertMsDos;short				Preference_InclureCommentaire;short				Preference_InclureSousNumero;short				Preference_N19_TypeTeletexte;short				Preference_DoubleHauteur;short				Preference_DoubleLargeur;short				Preference_Couleur;/*	espace pour la protection du logiciel  case pour le n°de série (comme cela on peut connaître la provenance d'un fichier)*/unsigned long 			offsetTC;unsigned long			offsetTCIn;unsigned long			offsetTCOut;unsigned short			ModeRecherche; 	//pour le dialog recherche ST};/*------------------------------------------------------*///une liste entière de sous-titreclass ListeST{ListeSTGlobals 			LSTG;ListeSTFonctionGlobals  	LSTFG;Element** 			emt;public:		friend	ListeST**	NouvelleListe(void);	friend	void			DetruitListe(ListeST** LH);		friend 	void			addelement(ListeST** LH);	friend	short		InsertSTlisteST(ListeST** LH,long apresnum);	friend	short		InsertEnTeteST(ListeST** LH);	friend	void			DeleteST(ListeST** LH,long ApresST);	friend	void			RenumeroteNumeroAbs(ListeST** LH);	friend	void			RenumeroteListe(ListeST** LH);	friend	long			VerifieST(ListeST** LH,long st);	friend	short		TestSiDansST(ListeST** LH,long ST,unsigned long TC);	friend	long			rechercheSTParNumero(ListeST** LH,long NUM);	friend	void			UpdateGeneralValue(ListeST** LH);};typedef ListeST 	*ListePtr;typedef ListePtr 	*ListeSTHandle;