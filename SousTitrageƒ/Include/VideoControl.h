////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// VideoControl.h//______________________________________________________________________________________________________________________//                                                Copyright (c) 1993//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                                All Rights Reserved.////                           This is unpublished work and is the proprietary source code of//                                   INTELLIGENT RESOURCES INTEGRATED SYSTEMS INC.//                                       and should be treated as confidential//______________________________________________________________________________________________________________________//// This defines a TVideoControlNugget class. This class is an abstract// base class for controlling a video device. Video control nugget// classes are "higher level", in that they are functional. They do not// simply twidle a bit or two, but they are black boxes for performing// a particular service (E.G. add sync to video), or effect (E.G. to a// cut or a wipe).//// TInterruptVideoControlNuggets are abstract classes which tie// video control to VBLs. The particular OS implementation of queueing// a VBL task is encapsulated, so VBL based nuggets only have to deal// with the implementation of their service or effect, not things// like SlotVInstall, and VBLTaskRecords.//// TO DO://		 Type negotiation//// Author			Date			Description// ------			----			-----------// JDZ				10/12/93		Started today.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#ifndef  _VideoControl_h_#define  _VideoControl_h_//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ Headers to include.//__________________________________________________________#ifndef  _VdCLIncludes_h_#include "VdCLIncludes.h"#endif#ifndef __STDDEF__#include <StdDef.h>#endif#ifndef __RETRACE__#include <Retrace.h>#endif//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////___ //__________________________________________________________class SimpleList;class TInterruptVideoControlNugget;Ptr GetVBLRec() = 0x2008;		//	MOVE.L A0,D0	Typecast the returned value to the actual record pointer struct enhVBLTask // This is a VBLTask record with an addition field for our global world	{	VBLTask theVBLTask;	size_t theStorage;	TInterruptVideoControlNugget *taskNugget;	};typedef struct enhVBLTask enhVBLTask;class TVideoDevice;class TVideoControlNugget	////	//// This class provides basic support for video control.	////	{	public:		TVideoControlNugget();		TVideoControlNugget(TVideoDevice* VideoEffectDevice);		virtual ~TVideoControlNugget();		virtual Boolean AddVideoDevice(TVideoDevice* theVideoDevice);		virtual Boolean RemoveVideoDevice(TVideoDevice& theVideoDevice);		virtual void DoVideoControlNugget() = 0;		// Start the VideoControlNugget		virtual void StopVideoControlNugget() = 0;		// For asynchronous nuggets	protected:		SimpleList *fVideoControlDeviceList;	private:		TVideoControlNugget(const TVideoControlNugget& from);		TVideoControlNugget& operator=(const TVideoControlNugget& from);	};class TInterruptVideoControlNugget: public TVideoControlNugget	////	//// This class provides support for video control nuggets	//// which are interrupt based.	////	//// This provides a pure virtual function which performs	//// the VBL task. Derived classes must implement this.	////	{	public:		typedef long TRefcon;		typedef void (*CallBackFunction)(TRefcon clientRefcon, TInterruptVideoControlNugget* effectRef);		enum ControlNuggetState {	kStopped = 0,		// Nothing is happening									kStarting,			// Beginning effect									kActive,			// Doing effect									kCompleting,		// Completing effect									kPaused,			// Paused									kKilling			// Killing active/paused effect								};		TInterruptVideoControlNugget();		TInterruptVideoControlNugget(TVideoDevice* VideoEffectDevice);		virtual ~TInterruptVideoControlNugget();		virtual void DoVideoControlNugget();			// Start the interrupt based VideoControlNugget		virtual void PauseVideoControlNugget();			// Move active VideoControlNugget to paused state		virtual void ResumeVideoControlNugget();		// Move paused VideoControlNugget to active state		virtual void StopVideoControlNugget();			// Move VBL task to the stopped state		virtual int GetFieldCounter();		virtual void SetFieldCounter(long newCount);		virtual	ControlNuggetState GetStatus();			// Get the state		virtual void SetCallBackFunction(CallBackFunction callBack, TRefcon clientRefcon);	protected:		virtual Boolean StartVBL();						// Optionally defined by effect for first time initialization		virtual Boolean DoVBL();						// Optionally defined by effect for main effect processing		virtual Boolean CompleteVBL();					// Optionally defined by effect for completion processing		virtual Boolean PauseVBL();						// Optionally defined by effect for paused (idle) processing		virtual	void SetState(ControlNuggetState newState);	// Set the internal state	private:		TInterruptVideoControlNugget(const TInterruptVideoControlNugget& from);		TInterruptVideoControlNugget& operator=(const TInterruptVideoControlNugget& from);		virtual void		StartVBLTask();		static pascal		void VBLTaskWrapper();		enhVBLTask			*VBLBlockPtr;		ControlNuggetState	currentState;		long				fieldCounter;		int					theSlot;		CallBackFunction	callBack;		TRefcon				clientRefcon;	};////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////#endif