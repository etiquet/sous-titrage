;-------------------------------------------------------------------------;	Video Explorer Driver and Extended Driver;	© 1990-1991, ICOM Simulations, Inc.;	© 1992, Intelligent Resources - Integrated Systems, Inc.;	All rights reserved.;;	Written by Jay Zipnick;	2/5/92 Modified to support CCIR-601 by Jeff Sargent;-------------------------------------------------------------------------;;	File   		: VXDrvrEQU.a;	Description	: This file contains templates and equates for the driver;;-------------------------------------------------------------------------;		Extended Control and Status codesvendorCSCBase	EQU		1000;Control calls;@@remove this;set base 0;loop;break if `Evaluate {base}`>71;replace /vendorCSCBase¶+[Â ¶t¶n]+/ "vendorCSCBase+`echo -n {base}`" {Active};set base `Evaluate {base}+1`;end;@@remove thiscscSetMemoryAddressing			EQU	vendorCSCBase+0cscSetPhysicalMemoryOffset		EQU	vendorCSCBase+1cscSetMemoryProtectMask			EQU	vendorCSCBase+2cscSetBankState				EQU	vendorCSCBase+3cscSetPairDecoder			EQU	vendorCSCBase+4cscSetDYUV8Decoder			EQU	vendorCSCBase+5cscSetBusMuxChannel			EQU	vendorCSCBase+6cscSetPriority				EQU	vendorCSCBase+7cscSetChannel				EQU	vendorCSCBase+8cscSetColorFormat			EQU	vendorCSCBase+9cscSetAlphaDisplayChannel		EQU	vendorCSCBase+10cscSetChannelColor			EQU	vendorCSCBase+11cscSetCaptureState			EQU	vendorCSCBase+12cscSetCaptureWindow			EQU	vendorCSCBase+13cscSetCaptureChannel			EQU	vendorCSCBase+14cscSetCaptureFormat			EQU	vendorCSCBase+15cscSetCaptureColor			EQU	vendorCSCBase+16cscSetClockState			EQU	vendorCSCBase+17cscSetMasterClockSource			EQU	vendorCSCBase+18cscSetClockDividerInterval		EQU	vendorCSCBase+19cscSetMasterControl			EQU	vendorCSCBase+20cscSetRefreshRate			EQU	vendorCSCBase+21cscSetInterruptEnables			EQU	vendorCSCBase+22cscSetInterruptClears			EQU	vendorCSCBase+23cscSetAbsoluteInterruptMode		EQU	vendorCSCBase+24cscSetHVStatus				EQU	vendorCSCBase+25cscSetHVControl				EQU	vendorCSCBase+26cscSetTimeSequencerParameters		EQU	vendorCSCBase+27cscSetHorizontalSequenceCommands	EQU	vendorCSCBase+28cscSetVerticalSequenceCommands		EQU	vendorCSCBase+29cscSetSyncControls			EQU	vendorCSCBase+30cscSetGenlockControls			EQU	vendorCSCBase+31cscSetExtendedVideoMode			EQU	vendorCSCBase+32cscSetMemoryBankConfiguration		EQU	vendorCSCBase+33cscSetBankDisplayAttributes		EQU	vendorCSCBase+34cscSetLiveMosaics			EQU	vendorCSCBase+35cscSetVDESyncLoadControl		EQU	vendorCSCBase+36cscSetVSCSyncLoadControl		EQU	vendorCSCBase+37cscSetSerialBusControl			EQU	vendorCSCBase+38cscSetDigitalVideoPort			EQU	vendorCSCBase+39cscSetDVPWriteValue			EQU	vendorCSCBase+40cscSetMultiplierConstants		EQU	vendorCSCBase+41cscSetMultiplierConstantsChannel	EQU	vendorCSCBase+42cscSetMultiplierICFControls		EQU	vendorCSCBase+43cscSetMultiplierMode			EQU	vendorCSCBase+44cscSetMultiplierSigns			EQU	vendorCSCBase+45cscSetNoiseChannel			EQU	vendorCSCBase+46cscSetMultiplierFilterChannel		EQU	vendorCSCBase+47cscSetMultiplierPartialSumInChannel	EQU	vendorCSCBase+48cscSetCLUTMode				EQU	vendorCSCBase+49cscSetCLUTMixRatio			EQU	vendorCSCBase+50cscSetCLUTSource			EQU	vendorCSCBase+51cscSetCLUTMatrixConfiguration		EQU	vendorCSCBase+52cscExtendedSetEntries			EQU	vendorCSCBase+53cscSetThresholderRange			EQU	vendorCSCBase+54cscSetThresholderSigns			EQU	vendorCSCBase+55cscSetThresholderColorFormat		EQU	vendorCSCBase+56cscSetThresholderTransitionMode		EQU	vendorCSCBase+57cscSetRectangleBounds			EQU	vendorCSCBase+58cscSetRectangleControl			EQU	vendorCSCBase+59cscSetBlendRatioRateOfChange		EQU	vendorCSCBase+60cscSetLineControlMode			EQU	vendorCSCBase+61cscSetLineCommands			EQU	vendorCSCBase+62cscSetRawLineCommands			EQU	vendorCSCBase+63cscSetPixelControlMode			EQU	vendorCSCBase+64cscUnusedControl0			EQU	vendorCSCBase+65cscSetPixelICF				EQU	vendorCSCBase+66cscSetPixelMultiplierChannel		EQU	vendorCSCBase+67cscSetPixelThresholderChannel		EQU	vendorCSCBase+68cscSetPixelDisplayChannelColorFormat	EQU	vendorCSCBase+69cscSetPixelNoiseMode			EQU	vendorCSCBase+70cscWriteToSlotSpace			EQU	vendorCSCBase+71cscSetD1OutputOptions			EQU	vendorCSCBase+72	;JSSD1;Status callscscGetMemoryAddressing			EQU	vendorCSCBase+0	cscGetPhysicalMemoryOffset		EQU	vendorCSCBase+1cscGetMemoryProtectMask			EQU	vendorCSCBase+2cscGetHWStatus				EQU	vendorCSCBase+3cscGetBankState				EQU	vendorCSCBase+4cscGetPairDecoder			EQU	vendorCSCBase+5cscGetDYUV8Decoder			EQU	vendorCSCBase+6cscGetBusMuxChannel			EQU	vendorCSCBase+7cscGetPriority				EQU	vendorCSCBase+8cscGetChannel				EQU	vendorCSCBase+9cscGetAlphaDisplayChannel		EQU	vendorCSCBase+10cscGetColorFormat			EQU	vendorCSCBase+11cscGetChannelColor			EQU	vendorCSCBase+12cscGetBankCaptureEnables		EQU	vendorCSCBase+13cscGetCaptureWindow			EQU	vendorCSCBase+14cscGetCaptureChannel			EQU	vendorCSCBase+15cscGetCaptureFormat			EQU	vendorCSCBase+16cscGetCaptureColor			EQU	vendorCSCBase+17cscGetClockState			EQU	vendorCSCBase+18cscGetMasterClockSource			EQU	vendorCSCBase+19cscGetClockDividerInterval		EQU	vendorCSCBase+20cscGetMasterControl			EQU	vendorCSCBase+21cscGetRefreshRate			EQU	vendorCSCBase+22cscGetInterruptEnables			EQU	vendorCSCBase+23cscGetInterruptStatus			EQU	vendorCSCBase+24cscGetAbsoluteInterruptMode		EQU	vendorCSCBase+25cscGetHVStatus				EQU	vendorCSCBase+26cscGetHVControl				EQU	vendorCSCBase+27cscGetTimeSequencerParameters		EQU	vendorCSCBase+28cscGetHorizontalSequenceCommands	EQU	vendorCSCBase+29cscGetVerticalSequenceCommands		EQU	vendorCSCBase+30cscGetSyncControls			EQU	vendorCSCBase+31cscGetGenlockControls			EQU	vendorCSCBase+32cscGetMemoryBankConfiguration		EQU	vendorCSCBase+33cscGetBankDisplayAttributes		EQU	vendorCSCBase+34cscGetLiveMosaics			EQU	vendorCSCBase+35cscGetLiveADConfigurationStatus		EQU	vendorCSCBase+36cscGetVDESyncLoadControl		EQU	vendorCSCBase+37cscGetVSCSyncLoadControl		EQU	vendorCSCBase+38cscGetSerialBusControl			EQU	vendorCSCBase+39cscGetDigitalVideoPort			EQU	vendorCSCBase+40cscGetDVPWriteValue			EQU	vendorCSCBase+41cscReadDVPData				EQU	vendorCSCBase+42cscGetDACInfo				EQU	vendorCSCBase+43cscGetMultiplierConstants		EQU	vendorCSCBase+44cscGetMultiplierConstantsChannel	EQU	vendorCSCBase+45cscGetMultiplierICFControls		EQU	vendorCSCBase+46cscGetMultiplierMode			EQU	vendorCSCBase+47cscGetMultiplierSigns			EQU	vendorCSCBase+48cscGetNoiseChannel			EQU	vendorCSCBase+49cscGetMultiplierFilterChannel		EQU	vendorCSCBase+50cscGetMultiplierPartialSumInChannel	EQU	vendorCSCBase+51cscGetCLUTMode				EQU	vendorCSCBase+52cscGetCLUTMixRatio			EQU	vendorCSCBase+53cscGetCLUTSource			EQU	vendorCSCBase+54cscGetCLUTMatrixConfiguration		EQU	vendorCSCBase+55cscGetThresholderRange			EQU	vendorCSCBase+56cscGetThresholderSigns			EQU	vendorCSCBase+57cscGetThresholderColorFormat		EQU	vendorCSCBase+58cscGetThresholderTransitionMode		EQU	vendorCSCBase+59cscGetRectangleBounds			EQU	vendorCSCBase+60cscGetRectangleControl			EQU	vendorCSCBase+61cscGetBlendRatioRateOfChange		EQU	vendorCSCBase+62cscGetLineControlMode			EQU	vendorCSCBase+63cscGetRawLineCommands			EQU	vendorCSCBase+64cscGetPixelControlMode			EQU	vendorCSCBase+65cscUnusedStatus0			EQU	vendorCSCBase+66cscGetPixelICF				EQU	vendorCSCBase+67cscGetPixelMultiplierChannel		EQU	vendorCSCBase+68cscGetPixelThresholderChannel		EQU	vendorCSCBase+69cscGetPixelDisplayChannelColorFormat	EQU	vendorCSCBase+70cscGetPixelNoiseMode			EQU	vendorCSCBase+71cscReadFromSlotSpace			EQU	vendorCSCBase+72cscGetD1OutputOptions			EQU	vendorCSCBase+73	;JSSD1;Define constants for maximum Control, Status, extended Control,;and extended Status control status codes;maxControl	EQU		cscSetDefaultMode;maxStatus	EQU		cscGetDefaultModemaxXControl	EQU		cscSetD1OutputOptions-vendorCSCBase	;JSSD1maxXStatus	EQU		cscGetD1OutputOptions-vendorCSCBase	;JSSD1;-------------------------------------------------------------------------;		TEMPLATESVDAddressing	RECORD		0depth		DS.W		1	;INTEGER: pixel depth { 1, 2, 4, 8, 16, 32 }rowBytes	DS.W		1	;INTEGER: hardware row bytes { 1K, 2K, 4K }rows		DS.W		1	;INTEGER: rows { 512, 1K, 2K, 4K, 8K }interleaving	DS.W		1	;BitState: for double plane interleaving		ENDRVDMemoryProtectMask	RECORD	0mask			DS.L	1	;long:			ENDRVDPhysicalMemoryOffset	RECORD	0offset			DS.L	1	;point:			ENDRVDHWStatus		RECORD	0VSCVersion   		DS.W	1	;word:VDEVersion   		DS.W	1	;word:WICVersion   		DS.W	1	;word:EEPROMStatus   		DS.W	1	;BitState: if true, EEPROM is present and functionalvideoSets   		DS.W	1	;BitState: if true, 2 sets of video RAM are present else only 1vMemType   		DS.W	1	;BitState: if true, 1 or 2MByte devices are used else 4MByteinputModuleStatus	DS.L	1	;long:lightPenStatus		DS.L	1	;long: currently unused and zerooutputModuleStatus	DS.L	1	;long: Returns the output module ID in LSBytedisplayCardStatus	DS.L	1	;long: Returns the default start ID in 31:24, Serial Number in 23:0displayCardSignature	DS.L	1	;long: Returns the main card Signature ( board type )			ENDRVDBankState	RECORD		0bankID		DS.W		1	;BankID: { NoBank, BankA, BankB, BankC, BankD }CCCEnable	DS.W		1	;BitState: BitState for CCCEnablebankDepth	DS.W		1	;INTEGER: { 1, 2, 4, 8 }CLUTIndexMSBs	DS.B		1	;byte: most significant bits for depth<8pad1		DS.B		1		ENDRVDBankPairState	RECORD		0pairID		DS.W		1	;PairID: { PairAB, PairCD }pairMode	DS.W		1	;PairMode: { PairModeRGB555, PairModeYCc, PairModeCCC4 }RGB555LSBs	DS.W		1	;INTEGER: Least significant bits for RGB555 modealphaMode	DS.W		1	;AlphaMode: { alphaBitNotUsed, alphaBitIsGreen, alphaBitIsSavedThresholder, alphaBitIsSourceEnable }		ENDRVDDYUV8State	RECORD		0bankID		DS.W		1	;BankID: { NoBank, BankA, BankB, BankC, BankD }yLUT		DS.L		1	;PTR: NIL, or pointer to 16 byte y LUTuvLUT		DS.L		1	;PTR: NIL, or pointer to 16 byte uv LUTinterpolate	DS.W		1	;BitState:  enable chrominance interpolation		ENDRVDBusMuxState	RECORD		0busMux		DS.W		1	;BusMux: { BusMuxVB1, BusMuxVB2 }busCompMask	DS.W		1	;INTEGER: { BusCompMaskA + BusCompMaskB + BusCompMaskC + BusCompMaskD }channel		DS.W		1	;ChannelID: { memBankChannel, DYUVdecoderChannel, ABdecoderChannel, CDdecoderChannel }		ENDRVDControlState	RECORD		0control		DS.W		1	;ControlID:priority	DS.W		1	;INTEGER: prioritychannel		DS.W		1	;ChannelID:		ENDRVDAlphaDisplaySource	RECORD	0channel		DS.W		1	;ChannelID:default		DS.W		1	;AlphaDisplayMode:		ENDRVDChannelColorState	RECORD	0channel		DS.W		1	;ChannelID: display sourcecolorFormat	DS.W		1	;INTEGER: { Color24, Color24fromAlpha, Color24fromRed, Color24fromGreen, Color24fromBlue }color		DS.L		1	;LONGINT: ARGB8888 color		ENDRVDCaptureState	RECORD		0box		DS.W		1	;CaptureBoxID: { CaptureBox1 }captureEnables	DS.W		1	;BusCompMask: { A + B + C + D }captureRectID	DS.W		1	;INTEGER: [currently unused, set to zero]captureRect	DS.B		8	;Rect: (8 bytes) QuickDraw rectcaptureChannel	DS.W		1	;ChannelID: capture sourcecaptureFormat	DS.W		1	;CaptureFormat: { Capture32Bits, CaptureRGB555, CaptureYCcEvenPixelCc,					;	CaptureYCcAveragePixelCc, CaptureAlphaToComponents,					;	CaptureRedToComponents, CaptureGreenToComponents, CaptureBlueToComponents }captureStart	DS.W		1	;CaptureStart: { startOdd, startEven, startNext }captureLength	DS.L		1	;CaptureLength: { captureField, captureFrame, captureContinuous }waitTillDone	DS.W		1	;Boolean: If true, wait till done capturing		ENDRVDCaptureColor	RECORD	0color		DS.L		1	;LONGINT: ARGB8888 color		ENDRVDClockState	RECORD		0chroma		DS.W		1	;BitState: enable the chroma clock outputsquare		DS.W		1	;BitState: convert the VCO Clock and the Reference Clock from pulses to square wavesline		DS.W		1	;BitState: enable the shift clock to the line command processorvRAM		DS.W		1	;BitState: enable the shift clock to the video memoryDCLK		DS.W		1	;BitState: drive the clock pins on the digital video ports as outputsPCLK		DS.W		1	;BitState: sync the phase clock to input instead of free running		ENDRVDClockSource		RECORD	0masterClockSource	DS.W	1	;MasterClockSource: { MasterClockFromVCO, MasterClockFromInputModule, MasterClockFromReference, MasterClockFromDigitalVideoPort }			ENDRVDClockDivider	RECORD		0divider		DS.W		1	;ClockDivider: { PixelClkDivider, ChromaClkDivider, VCOClkDivider, ReferenceClkDivider }interval	DS.L		1	;LONGINT: divider value (period of clock)squareClock	DS.W		1	;BitState: convert from pulses to square waves (divide by 2)		ENDRVDMasterControl	RECORD		0refresh		DS.W		1	;BitState: enables RAM refreshtransfer	DS.W		1	;BitState: enables Transfer Cycles to video RAMinterrupt	DS.W		1	;BitState: master interrupt enable for the entire board		ENDRVDInterruptStates	RECORD	0time		DS.W		1	;BitState: Absolute time interruptpen		DS.W		1	;BitState: Light Pen interruptpenTrigger	DS.W		1	;BitState: Light Pen trigger interruptdirectPen	DS.W		1	;BitState: Actual state of pendirectTrigger	DS.W		1	;BitState: Actual state of trigger		ENDRVDInterruptMode	RECORD		0mode		DS.W		1	;AbsoluteInterruptMode: { InterruptEveryFrame, InterruptEveryField, InterruptEveryLine }where		DS.W		2	;Point: the point on the screen this interrupt is set for		ENDRVDHVStatus	RECORD		0mode		DS.W		1	;HVStatusMode: { FreezeHVStatus, ContinuousHVStatus, LightPenHVStatus }where		DS.W		2	;Point: horizontal and vertical coordinates (based on mode)		ENDRVDHVControl	RECORD		0onOff		DS.W		1	;BitState:interleave	DS.W		1	;BitState: if enabled, generate adjusted clocks		ENDRVDTimeSequencerState	RECORD	0HRAM		DS.W		1	;INTEGER: Address within horizontal display sequencerVRAM		DS.W		1	;INTEGER: Address within vertical display sequencerHCnt		DS.W		1	;INTEGER: Address within horizontal display sequencerVCnt		DS.W		1	;INTEGER: Address within vertical display sequencerHLV		DS.W		1	;INTEGER: Horizontal load valueVLV		DS.W		1	;INTEGER: Vertical load valuecommand1	DS.W		1	;INTEGER: H/V command paircommand2	DS.W		1	;INTEGERcommandCount	DS.W		1	;INTEGER: Command pair counter activation value		ENDRVDSyncControl		RECORD	0inputSyncSource		DS.W	1	;SyncSource: { SyncFromSame, SyncFromGreen, SyncFromBlack }IREclamp		DS.W	1	;BitState: if true, IRE clamping in effectinterlace		DS.W	1	;BitState: if true, sync is interlacedEQAndSer		DS.W	1	;BitState: if true, equalization and serration is in effectsyncOnVideo		DS.W	1	;BitState: if true, sync is output on video signalsVBDigital		DS.W	1	;BitState: if true, VideoBahn Digital MasterVBComposite		DS.W	1	;BitState: if true, VideoBahn Composite MasterTTLsync			DS.W	1	;TTLsyncMode: { TTLsyncSame, TTLsyncOff, TTLsyncHsync, TTLsyncHESsync, TTLsyncComposite12PixelDelay,					;	TTLsyncComposite11PixelDelay, TTLsyncComposite10PixelDelay, TTLsyncComposite1PixelDelay,					;	TTLsyncCompositeNoPixelDelay }			ENDR;;JSSD1 - Parameter record structure for Get/SetD1OutputOptions function;VDD1OutputOptions	RECORD	0modulePresent		DS.W	1	;Bitstate: 0 if module present, 1 if some other kind of modulepassYUV			DS.W	1	;BitState: Pass YUV straight thru if 1 (default is 0) luminenceFilter		DS.W	1	;BitState: Luminence Filter Enable (1 == enabled)dynamicRounding		DS.W	1	;Integer: 0=normal, 1=even, 2=reserved, 3=dynamic (default)outputSelect		DS.W	1	;OutputSelect: Output Select: 0=program, 1=alpha (key); outputProgram, outputKeyencodingMatrix		DS.W	1	;Encoding matrix: 0=analog, 1=digital (default)			ENDR						VDGenlockControl	RECORD	0genlockControl		DS.W	1	;word: genlock control wordgenlockReserved		DS.W	1	;word: RESERVEDHorzNoLockThreshold	DS.W	1	;INTEGER: this is the number of times genlock must miss					;	a horizontal frame before search mode beginsVertNoLockThreshold	DS.W	1	;INTEGER: this is the number of times genlock must miss					;	a vertical frame before search mode beginshLockAquisitionTime	DS.W	1	;INTEGER: this is the number of frame locks					;	required before HLockStatus is sethLockStatus		DS.W	1	;BitState: if true, horizontal lock achievedvLockStatus		DS.W	1	;BitState: if true, vertical lock achievedsingleHSSmode		DS.W	1	;BitState: if true, only one horizontal start sync command can be issued					;	by the sequencer after a horizontal HSS enable command			ENDRVDModeInfo		RECORD	0newMode			DS.W	1	;sResource IDoldMode			DS.W	1	;sResource ID			ENDRVDBankConfiguration	RECORD	0ConcatenateMode		DS.W	1	;MemoryConcatenation: Bank concatenation modeABInterleaving		DS.W	1	;BitState: 8  bit interleave, only valid for some configsCDInterleaving		DS.W	1	;BitState: 8  bit interleave, only valid for some configsABCDInterleaving	DS.W	1	;BitState: 16 bit interleave, only valid for some configs			ENDRBankAttributeRecord	RECORD	0bankID			DS.W	1	;BankID:attributeID		DS.W	1	;attributeID: { BankDisplayOffset | BankDisplayZoom | BankDisplayMosaic }point			DS.W	2	;Point: { BankDisplayOffset | BankDisplayZoom | BankDisplayMosaic }size			EQU	*			ENDRVDBankDisplayAttributes	RECORD	0numRecs			DS.L	1	;long: the number of display attribute records that followattributeRecs		DS	BankAttributeRecord	;BankAttributeRecord[1..numRecs]: bank/attribute/value records			ENDRVDLiveMosaics	Record	0mosaicFactor		DS.L	1	;point:			ENDRVDLiveADConfigurationStatus	Record	0status			DS.L	1	;long:			ENDRVDVDESyncLoadState	RECORD	0multiplier		DS.W	1	;BitState: if true, multiplier control registers are loaded synchronouslyevenMultConstants	DS.W	1	;BitState:oddMultConstants	DS.W	1	;BitState:CLUTMatrixOffset	DS.W	1	;BitState:defaultDisplayChannel	DS.W	1	;BitState:captureDataSourceFormat	DS.W	1	;BitState:evenFieldSync		DS.W	1	;BitState: if true above register writes are delayed till the end of an even fieldoddFieldSync		DS.W	1	;BitState: if true above register writes are delayed till the end of an odd field			ENDRVDVSCSyncLoadState	RECORD	0bankOffsets		DS.W	1	;BitState:bankZooms_Mosaics	DS.W	1	;BitState:captureBankEnables	DS.W	1	;BitState:bankConfig_CCCEnables	DS.W	1	;BitState:captureWindow		DS.W	1	;BitState:rectangles		DS.W	1	;BitState:busMux_bankDepth	DS.W	1	;BitState:CLUTOffsets		DS.W	1	;BitState:lineControl_priority	DS.W	1	;BitState:syncLoadMode		DS.W	1	;SyncLoadMode:			ENDRVDSerialState		RECORD	0IMDOutputEnable		DS.W	1	;BitState: if True, enables IMD as outputIMCOutput		DS.W	1	;BitState: output bitIMIOutput		DS.W	1	;BitState: output bitIMDOutput		DS.W	1	;BitState: output bitIMDInput		DS.W	1	;BitState: input bit			ENDRVDDVPState		RECORD	0port			DS.W	1	;DigitalVideoPort: { digitalVideoPort1, digitalVideoPort1 }inputEnable		DS.W	1	;BitState: if True, port is enabled for inputoutputEnable		DS.W	1	;BitState: if True, port is enabled for outputchannel			DS.W	1	;INTEGER: { memBankChannel, DYUVdecoderChannel, ABdecoderChannel, CDdecoderChannel }DVPWriteValue		DS.L	1	;LONGINT: DVP write register valueDVPReadValue		DS.L	1	;LONGINT: value read from DVP			ENDRVDDACInfo		RECORD	0RAMDACBase		DS.L	1	;Ptr:			ENDRVDMultiplierConstants	RECORD	0multiplierID		DS.W	1	;MultiplierID: { multiplier1 }arraySelect		DS.W	1	;OddEven: access to the odd and/or even arrayarrayPtr		DS.L	1	;Ptr: Pointer to array of Fixed multiplier constantsarrayBounds		DS.B	8	;Rect: (8 bytes) QuickDraw rect (sizes array)			ENDRVDMultiplierState	RECORD	0multiplierID		DS.W	1	;MultiplierID: { multiplier1 }channel			DS.W	1	;ChannelID:busComp			DS.W	1	;BusComp: { busCompA, busCompB, busCompC, busCompD }multiplierMode		DS.W	1	;multiplierMode:filterTaps		DS.W	1	;word: 9 or 18clampedBits		DS.W	1	;word: 8 or 16CLUT2Override		DS.W	1	;BitState: if True, even multiplier output overrides CLUT2multiplexMode		DS.W	1	;MultiplierMultiplexMode: { dependent, independent }			ENDRVDMultiplierSigns	RECORD	0multiplierID		DS.W	1	;MultiplierID: { multiplier1 }signType		DS.W	1	;MultSignType: { BlendInputSigns, TransformInputSigns, MultiplierOutputSigns, PartialSumOutputSign }arraySelect		DS.W	1	;OddEven: access to the odd or even arrayarrayPtr		DS.L	1	;Ptr: Pointer to word array of multiplier signsarrayBounds		DS.B	8	;Rect: (8 bytes) QuickDraw rect (sizes array)			ENDRVDICFState		RECORD	0ICFScaleFactor		DS.L	1	;Fixed: 16.16 value. 2.7 useable bitsblendRatioTotal		DS.L	1	;Fixed: 16.16 value. 3.7 useable bitsblendRatioRate		DS.L	1	;Fixed: 16.16 value. 3.9 useable bits			ENDRVDLineControl		RECORD	0mode			DS.W	1	;LineControlMode: { lineControlOff, activeLineControl, preScanLineControl, activeAndPreScanLineControl }rect			DS.B	8	;Rect: defines the region, in lines and commandscommands		DS.L	1	;Ptr: pointer to raw or pseudo line control commands			ENDRVDPixelControl		RECORD	0mode			DS.W	1	;PixelControlMode: { pixelIs8BitICF, pixelIs4BitDisplayChannel4BitPriority,					;pixelIs7BitICF1BitChoiceControl, pixelIs8BitChoiceControl,					;pixelIsCaptureAndShiftControl }source			DS.W	1	;ICFSource: { ICFSourceFromPixelControl, ICFSourceFromNoise }signState		DS.W	1	;BitState: if true ICF is 8 bit signed value -0.9999 to 0.9999					;	   if false ICF is 8 bit value 0 to 1.9999ICFScaleSource		DS.W	1	;ICFScaleFactorSource: { ICFscaleFactorFromRegister, ICFscaleFactorFromPixelControl, ICFscaleFactorFromNoise }			ENDRVDPixelState		RECORD	0pixelSelect		DS.W	1	;pixelSelectChoice: { PixelSelect0, PixelSelect1 }multiplierID		DS.W	1	;MultiplierID: { multiplier1 }multiplierColumn	DS.W	1	;INTEGER: Column affected (1..3)multiplierChannel	DS.W	1	;Channel: { inputModuleChannel, liveDigitalInChannel, videoBus1Channel, videoBus2Channel, CLUT1Channel,					;		CLUT2Channel, multiplierOutChannel, liveDigitalInAlpha_partialSum16Channel }thresholderID		DS.W	1	;ThresholderID: { thresholder1 }thresholderChannel	DS.W	1	;Channel: { inputModuleChannel, liveDigitalInChannel, videoBus1Channel, videoBus2Channel, CLUT1Channel,					;		CLUT2Channel, multiplierOutChannel, liveDigitalInAlpha_partialSum16Channel }colorFormat		DS.W	1	;ColorFormat: { Color24, Color24fromAlpha, Color24fromRed, Color24fromGreen, Color24fromBlue }pixelICF		DS.L	1	;Fixed: 16.16 value. 1.7 useable bits			ENDRVDNoiseState		RECORD	0channel			DS.W	1	;ChannelID: { videoBus2Channel, liveDigitalInChannel, monochrome8BitNoise, color24BitNoise }busComp			DS.W	1	;BusComp: { busCompA, busCompB, busCompC, busCompD }syncMode		DS.W	1	;NoiseSync: { nonSyncNoise, frameSyncNoise }taps			DS.W	1	;word: { 13, 19 } (repeat every 8,191 values, or every 524,287 values)bits			DS.W	1	;word: { 7, 8 } (7-bit noise, or 8-bit noise)			ENDRVDCLUTState		RECORD	0CLUTID			DS.W	1	;CLUTID: { CLUT1, CLUT2 }CLUTMode		DS.W	1	;CLUTMode:mixRatio		DS.W	1	;unsigned word: $FFFF is 100%channel			DS.W	1	;ChannelID: { videoBus2Channel, multiplierOutChannel }busComp			DS.W	1	;BusComp: { busCompA, busCompB, busCompC, busCompD }			ENDRVDCLUTMatrixState	RECORD	0CLUTID			DS.W	1	;CLUTID: { CLUT1, CLUT2 }size			DS.W	1	;CLUTmatrixSize: { MatrixSize16, MatrixSize32 }start			DS.W	2	;Point: (QuickDraw point)			ENDRVDXEntryRecord		RECORD	0csTable   		DS.L	1	;^ColorSpec: Pointer to an array of color specscsStart   		DS.W	1	;word: - Which spec in array to start with, or -1csCount   		DS.W	1	;word: - Number of color spec entries to setcsCLUTID   		DS.W	1	;CLUTID: { CLUT1, CLUT2 }csCLUTMode   		DS.W	1	;CLUTMode:			ENDRVDThresholderState	RECORD	0thresholderID		DS.W	1	;ThresholderID: { thresholder1 }loColor			DS.L	1	;long:	RGB888hiColor			DS.L	1	;long:	RGB888dim			DS.W	1	;number of elements of the sign bit arrayarrayPtr		DS.L	1	;*Sign: pointer to the thresholder signs arraycolorFormat		DS.W	1	;ColorFormat: { color24, color24fromAlpha, color24fromRed, color24fromGreen, color24fromBlue }transitionMode		DS.W	1	;TransitionMode: { transitionInactive, transitionInside, transitionOutside, transitionInsideAndOutside }			ENDRVDRectangleState	RECORD	0rectangleID   		DS.W	1	;RectangleID:	{ rectangle1, rectangle2, rectangle3, rectangle4 }bounds			DS.B	8	;Rect: (8 bytes) QuickDraw rectcontrol  		DS.W	1	;RectangleControl:			ENDRVDPixelNoiseControl	RECORD	0noiseBits		DS.W	1	;word: { 8, 9 } (8-bit noise, or 9-bit noise)signedNoise		DS.W	1	;BitState: if true noise is signedsynchronous		DS.W	1	;BitState: if true noise is synchronous to a frame			ENDRVDDataBlock		RECORD	0offset   		DS.L	1	;LONGINT: offset into minor slot space (24 bit range)size			DS.L	1	;LONGINT: size of data to writedata  			DS.B	1	;byte[size]: data to write to card			ENDR;-------------------------------------------------------------------------;		Constants used in VX Control and Status calls;@@ These will change from ÉRate to ÉMode since they also;@@ will indicate size of screen.  Waiting for list of from IRIS.;@@ There can still be both a logical and physical screen size;@@ if virtual screens are supported.;@@;@@ DON'T USE THESE. DRVR calls use the sResource IDs which are offset;@@ by 128, and are divided between the 24-bit mode Color QuickDraw and;@@ 32-bit mode 32-Bit QuickDraw versions since the OS also uses these;@@ modes for distinguishing the momory model for the base address.;@@ Currently the real equates are in VXROM.a. Those Equates should be moved.;NTSCRate	EQU		1			;Scan rate constants;PALRate	EQU		2;MacRate	EQU		3;VGARate	EQU		4;some constantsyLUTSize			EQU	16		;Number of bytes in DYUV LUTsuvLUTSize			EQU	16;some, somewhat useful data typesfalseState			EQU	0		;Type BitStatetrueState			EQU	1doNotKnowState			EQU	2oppositeState			EQU	3disableIt			EQU	falseState	;Type ControlItenableIt			EQU	trueStatedoNotChangeIt			EQU	doNotKnowStatechangeIt			EQU	oppositeState;HARDWARE IDENTIFICATION - JSSD1;Module type ID's:ComponentOutputModuleID		EQU	$01D1OutputModuleID		EQU	$21	;VIDEO MEMORYnoBank				EQU	0		;Type BankIDbankA				EQU	1bankB				EQU	2bankC				EQU	3bankD				EQU	4BankDisplayOffset		EQU	0		;Type AttributeIDBankDisplayZoom			EQU	1BankDisplayMosaic		EQU	2pairAB				EQU	0		;Type PairIDpairCD				EQU	1pairModeRGB555			EQU	0		;Type PairModepairModeYCc			EQU	1pairModeCCC4			EQU	2alphaBitNotUsed			EQU	0		;Type AlphaModealphaBitIsGreen			EQU	1alphaBitIsSavedThresholder	EQU	2alphaBitIsSourceEnable		EQU	3busMuxVB1			EQU	0		;Type BusMuxbusMuxVB2			EQU	1busCompABit			EQU	3busCompBBit			EQU	2busCompCBit			EQU	1busCompDBit			EQU	0busCompMaskA			EQU	$0008busCompMaskB			EQU	$0004busCompMaskC			EQU	$0002busCompMaskD			EQU	$0001busCompMaskNone			EQU	0busCompMaskAll			EQU	$FFFFbusCompNone			EQU	0		;Type BusCompbusCompAll			EQU	1busCompA			EQU	2		;BusComp A, B, C, and D must be sequentialbusCompB			EQU	3busCompC			EQU	4busCompD			EQU	5busCompAlpha			EQU	busCompAbusCompRed			EQU	busCompBbusCompGreen			EQU	busCompCbusCompBlue			EQU	busCompD;Below is a list of channels for various Video Explorer multiplexerssameChannel			EQU	0		;Type ChannelIDinputModuleChannel		EQU	1liveDigitalInChannel		EQU	2videoBus1Channel		EQU	3videoBus2Channel		EQU	4CLUT1Channel			EQU	5CLUT2Channel			EQU	6multiplierOutChannel		EQU	7defaultColor1Channel		EQU	8defaultColor2Channel		EQU	9liveDigitalInAlphaChannel	EQU	10videoBus2AlphaChannel		EQU	11zero_partialSum16Channel	EQU	12multiplierY_inputModuleChannel		EQU	13	;Pseudo channels for capture multiplexer;;liveDigitalInChannelpartialSumHigh8_multiplierOutChannel	EQU	14;;videoBus2ChanneldisplayMuxChannel			EQU	15defaultCaptureColorChannel		EQU	16partialSum16AR16GBChannel		EQU	17;;reservedmemBankChannel				EQU	18	;Pseudo channels for video bus 1 and 2DYUVdecoderChannel			EQU	19ABdecoderChannel			EQU	20CDdecoderChannel			EQU	21CCC2decoderChannel			EQU	22;;videoBus2Channel					;Pseudo channels for digital video ports;;displayMuxChannel;;inputModuleChannelDVPWriteDataChannel			EQU	23liveDigitalInAlpha_multiplierOutChannel	EQU	24videoBus2Alpha_multiplierOutChannel	EQU	25videoBus2AR_partialSum16Channel		EQU	26;;CLUT1Channel/CLUT1Channel;;inputModuleChannel					;Pseudo channels for MultiplierInputSource1/2/3;;liveDigitalInChannel;;videoBus1Channel;;videoBus2Channel;;CLUT1Channel;;CLUT2ChannelmultiplierDefaultColorChannel		EQU	27noiseGeneratorChannel			EQU	28;;inputModuleChannel					;Pseudo channel for Pixel0/1RangeThresholderInputSource;;liveDigitalInChannel;;videoBus1Channel;;videoBus2Channel;;CLUT1Channel;;CLUT2Channel;;multiplierOutChannelliveDigitalInAlpha_partialSum16Channel	EQU	29;Below psuedo channels are for sources which take single COMPONENTS only.;;videoBus2Channel (alpha)				;Pseudo channels for CLUT1/2 source;;videoBus2Channel (red);;videoBus2Channel (green);;videoBus2Channel (blue);;multiplierOutChannel (red);;reservedmatrixAddressGeneratorChannel		EQU	30;;reservedlineOrPixelConstantsChannel		EQU	31	;Pseudo channels for MultiplierConstantsSource;;NoiseGeneratorChannel;;videoBus2Channel (red);;liveDigitalInChannel (alpha);;reserved;;reserved;;reservedmultiplierConstantsChannel		EQU	32;;videoBus2Channel (alpha)				;Pseudo channels for FilterSourcemultipliersFirstInputChannel		EQU	33;;videoBus2Channel (alpha)				;Pseudo channels for MultiplierBWNoiseGenerator;;videoBus2Channel (red);;videoBus2Channel (green);;videoBus2Channel (blue);;liveDigitalInChannel (alpha);;reservedmonochrome8BitNoise			EQU	34color24BitNoise				EQU	35;;memBankChannel (alpha)				;Pseudo channels for PartialSumIn;;memBankChannel (red);;memBankChannel (green);;memBankChannel (blue)zeroComponentInputChannel		EQU	36;@@@	Below are from Ron. They are unknown. Removal is pending check with Ron.MultiplierPartialSumAlphaChannel	EQU	37;Constants for control of synchronous loadingevenFieldEndOfBlanking		EQU	0		;Type SyncLoadModeevenFieldEndOfSync		EQU	1oddFieldEndOfBlanking		EQU	2oddFieldEndOfSync		EQU	3noSyncLoad			EQU	4evenOddEndOfBlanking		EQU	5evenOddEndOfSync		EQU	6;EXTERNAL DIGITAL VIDEO PORTSdigitalVideoPort1		EQU	0		;Type DigitalVideoPortdigitalVideoPort2		EQU	1;PRIORITY RESOLVERdefaultControl			EQU	0		;Type ControlIDABRGB555Control			EQU	1CDRGB555Control			EQU	2CLUT1Control			EQU	3CLUT1BlackDetectControl		EQU	4CLUT2Control			EQU	5CLUT2BlackDetectControl		EQU	6rectangle1Control		EQU	7rectangle2Control		EQU	8rectangle3Control		EQU	9rectangle4Control		EQU	10thresholder1State0Control	EQU	11thresholder1State1Control	EQU	12thresholder1State2Control	EQU	13thresholder1State3Control	EQU	14thresholder1State4Control	EQU	15thresholder1State5Control	EQU	16thresholder1State6Control	EQU	17thresholder1State7Control	EQU	18thresholderTransitionControl	EQU	19lineControlControl		EQU	20pixelControlSelect0Control	EQU	21pixelControlSelect1Control	EQU	22color24				EQU	0		;Type ColorFormatcolor24fromAlpha		EQU	1color24fromRed			EQU	2color24fromGreen		EQU	3color24fromBlue			EQU	4;CLOCK CONTROLmasterClockFromVCO		EQU	0		;Type MasterClockSourcemasterClockFromInputModule	EQU	1masterClockFromReference	EQU	2masterClockFromDigitalVideoPort	EQU	3pixelClockDivider		EQU	0		;Type ClockDividerchromaClockDivider		EQU	1VCOClockDivider			EQU	2referenceClockDivider		EQU	3;ABSOLUTE TIMINGinterruptEveryFrame		EQU	0		;Type AbsoluteInterruptModeinterruptEveryField		EQU	1interruptEveryLine		EQU	2freezeHVStatus			EQU	0		;Type HVStatusModecontinuousHVStatus		EQU	1lightPenHVStatus		EQU	2syncFromSame			EQU	0		;Type SyncSourcesyncFromBlack			EQU	1syncFromGreen			EQU	2TTLSyncSame			EQU	0		;Type TTLSyncModeTTLSyncOff			EQU	1TTLSyncHsync			EQU	2TTLSyncHESsync			EQU	3TTLSyncComposite12PixelDelay	EQU	4TTLSyncComposite11PixelDelay	EQU	5TTLSyncComposite10PixelDelay	EQU	6TTLSyncComposite1PixelDelay	EQU	7TTLSyncCompositeNoPixelDelay	EQU	8;RELATIVE TIMINGconcatTheSame			EQU	0		;Type MemoryConcatenationconcatA_B_C_D			EQU	1concatABX_C_D			EQU	2concatABY_C_D			EQU	3concatA_B_CDX			EQU	4concatABX_CDX			EQU	5concatABY_CDX			EQU	6concatA_B_CDY			EQU	7concatABX_CDY			EQU	8concatABY_CDY			EQU	9concatACX_BDX			EQU	10concatACY_BDY			EQU	11concatABX_CDXX			EQU	12concatABY_CDYY			EQU	13concatABX_CDXY			EQU	14selectedAlphaChannelMode	EQU	0		;Type AlphaDisplayModeassociatedAlphaChannelMode	EQU	1;CAPTURE MULTIPLEXERcaptureBox1			EQU	0		;Type CaptureBoxIDcapture32Bits			EQU	0		;Type CaptureFormat ;Capture 32 bits to banks ABCDcaptureRGB555			EQU	1		;Capture 16 bits as RGB555 to banks AB, and banks CDcaptureYCcEvenPixelCc		EQU	2		;Capture as 16-bit YCc to banks AB, and banks CDcaptureYCcAveragePixelCc	EQU	3		;Capture as 16-bit YCc to banks AB, and banks CDcaptureAlphaToComponents	EQU	4		;Capture single component to banks ABCDcaptureRedToComponents		EQU	5captureGreenToComponents	EQU	6captureBlueToComponents		EQU	7startEven			EQU	0		;Type captureStartstartOdd			EQU	1startNext			EQU	2startNow			EQU	3captureField			EQU	1		;Type CaptureLengthcaptureFrame			EQU	2captureContinuous		EQU	-1;MULTIPLIERSmultiplier1			EQU	0		;Type MultiplierIDmultTransform			EQU	0		;Type MultiplierModemultBlend			EQU	1multTransformThenBlend		EQU	2multBlendThenTransform		EQU	3mult2D8BitFilter		EQU	4mult2D16BitFilter		EQU	5mult16BitFrameAccumulator	EQU	6multTransformThenTransform	EQU	7multDependent			EQU	0		;Type MultiplierMultiplexModemultIndependent			EQU	1blendInputSigns			EQU	0		;Type MultSignTypetransformInputSigns		EQU	1multiplierOutputSigns		EQU	2partialSumOutputSign		EQU	3evenIndex			EQU	0		;Type OddEvenoddIndex			EQU	1both				EQU	2isNotSigned			EQU	0		;Type SignisSigned			EQU	1nonSyncNoise			EQU	0		;Type NoiseSyncframeSyncNoise			EQU	1;INTERNAL COLOR LOOK UP TABLES REGISTERSCLUT1				EQU	0		;Type CLUTIDCLUT2				EQU	1;the following CLUT modes may be used by extended driver call;or by the SetLineCommand structure.  The line command mechanisim;cannot set Matrix modes or CLUT2's compressed state	normalNormalCLUT		EQU	0		;Type CLUTmodenormalCompressedCLUT		EQU	1normalMatrixCLUT		EQU	2mixedNormalCLUT			EQU	3mixedCompressedCLUT		EQU	4mixedMatrixCLUT			EQU	5pairedNormalCLUTs		EQU	6		;CLUT 1 and 2 colaborating on 384 colorspairedCompressedCLUT		EQU	7		;CLUT 1 and 2 colaborating on 512 colorsCCC2BitNormal			EQU	8		;second CCC color is one of 128 at 24 bitsCCC2BitCompressedCLUT		EQU	9		;second CCC color is one of 256 at 16 bitsmatrixNormalCLUT		EQU	10		;CLUT1 is Matrix, CLUT2 is NormalmatrixCompressedCLUT		EQU	11matrixMatrixCLUT		EQU	12;The following are used by the driver for the CLUTModes,;CLUT1Source, and CLUT2Source registersnormalCLUTs			EQU	%00mixedCLUT1			EQU	%01combinedCLUTs			EQU	%10CCCCLUTs			EQU	%11matrixMode			EQU	%110matrixSize16			EQU	0		;Type CLUTmatrixSizematrixSize32			EQU	1;RANGE THRESHOLDERthresholder1			EQU	0		;Type ThresholderIDtransitionInactive		EQU	0		;Type TransitionModetransitionInside		EQU	1transitionOutside		EQU	2transitionInsideAndOutside	EQU	3;RECTANGLE CONTROLSrectangle1			EQU	0		;Type RectangleIDrectangle2			EQU	1rectangle3			EQU	2rectangle4			EQU	3normalYNormalXInside		EQU	0		;Type RectangleControlnormalYNormalXOutside		EQU	1normalYInvertedXInside		EQU	2normalYInvertedXOutside		EQU	3invertedYNormalXInside		EQU	4invertedYNormalXOutside		EQU	5invertedYInvertedXInside	EQU	6invertedYInvertedXOutside	EQU	7;LINE CONTROLlineControlOff			EQU	0		;Type LineControlModeactiveLineControl		EQU	1preScanLineControl		EQU	2activeAndPreScanLineControl	EQU	3;PIXEL CONTROLpixelIs8BitICF			EQU	0		;Type PixelControlModepixelIs4BitDisplayChannel4BitPriority	EQU	1pixelIs7BitICF1BitChoiceControl	EQU	2pixelIs8BitChoiceControl	EQU	3pixelIsCaptureAndShiftControl	EQU	4ICFSourceFromPixelControl	EQU	0		;Type ICFSourceICFSourceFromNoise		EQU	1ICFscaleFactorFromRegister	EQU	0		;Type ICFScaleFactorSourceICFscaleFactorFromPixelControl	EQU	1ICFscaleFactorFromNoise		EQU	2pixel0Select			EQU	0		;Type PixelSelectChoicepixel1Select			EQU	1;@@Ron, how about a "bothPixelSelect" since often the caller may;@@want to affect the register pair;OUTPUT MODULE outputProgram			EQU	1		outputKey			EQU	0		;only available on D1 output module