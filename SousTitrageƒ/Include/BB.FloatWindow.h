/*	File:		WindowExtensions.h		Contains:	Prototypes and data structures for the floating window library		Written by:	Dean Yu		Copyright:	© 1993 Apple Computer, Inc.	*/#ifndef __FLOATWINDOW__#define __FLOATWINDOW__#ifndef __WINDOWS__#include <Windows.h>#endif#ifndef __DIALOGS__#include <Dialogs.h>#endif// Default to 68K calling conventions#ifndef USESROUTINEDESCRIPTORS#define USESROUTINEDESCRIPTORS 0#endif#ifndef __MIXEDMODE__#define kPascalStackBased								0#define STACK_ROUTINE_PARAMETER(paramCount, paramSize)	0#endif// Window Attributesenum WindowAttributes {	kHasCloseBoxMask = 				0x00000001,	kHasZoomBoxMask = 				0x00000002,	kHasGrowBoxMask = 				0x00000004,	kHasModalBorderMask = 			0x00000010,	kHasThickDropShadowMask = 		0x00000020,	kHasDocumentTitlebarMask = 		0x00001000,	kHasPaletteTitlebarMask = 		0x00002000,	kHasRoundedTitlebarMask = 		0x00004000,// Attribute groupings	kWindowGadgetsMask =			0x0000000F,	kWindowAdornmentsMask =			0x00000FF0,	kWindowTitlebarMask =			0x000FF000};typedef unsigned long WindowAttributes;typedef struct WindowRecordExtensions *WindowReference;// Activate event handler prototypetypedef pascal void (*ActivateHandlerProcPtr)(WindowReference theWindow, Boolean activateWindow);enum {	uppActivateHandlerProcInfo = kPascalStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(WindowReference)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Boolean)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		CallUniversalProc(userRoutine, uppActivateHandlerProcInfo, theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP) NewRoutineDescriptor(userRoutine, uppActivateHandlerProcInfo, GetCurrentISA())#elsetypedef ActivateHandlerProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		(*userRoutine)(theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP)(userRoutine)#endifenum {	kActivateWindow				= true,	kDeactivateWindow			= false};// Extensions to the WindowRecord#if powerc#pragma options align=mac68k#endifstruct WindowRecordExtensions {	WindowRecord 				theWindow;	Handle 						items;	TEHandle 					textH;	short 						editField;	short 						editOpen;	short						aDefItem;	ActivateHandlerUPP			activateHandlerProc;	Boolean						wasVisible;};#if powerc#pragma options align=reset#endiftypedef struct WindowRecordExtensions WindowRecordExtensions;// 'WDEF' resource IDs.enum {	rStandardDocumentWindowProc =	0,	rRoundedWindowProc =			1,	rFloatingWindowProc =129};// Window procIDs and windowKindsenum {	kStandardDocumentWindowProc = rStandardDocumentWindowProc * 16,	kRoundedWindowProc = rRoundedWindowProc * 16,	kFloatingWindowProc = rFloatingWindowProc * 16,		kApplicationFloaterKind = 7};// Error codesenum {	kUndefinedTitleBarTypeError = -1,	kWindowNotCreatedError = -2,	kInvalidWindowOrderingError = -3};#ifdef __cplusplusextern "C" {#endif/* Floating window routines */extern pascal OSErr GetNewWindowReference(DialogPtr *thedialog, short windResourceID, WindowReference behind, ActivateHandlerUPP activateHandlerProc);extern pascal void DisposeWindowReference(WindowReference WindowReferenceerence);extern pascal void SelectReferencedWindow(WindowReference windowToSelect);extern pascal void HideReferencedWindow(WindowReference windowToHide);extern pascal void ShowReferencedWindow(WindowReference windowToShow);extern pascal void DragReferencedWindow(WindowReference windowToDrag, Point startPoint, const Rect *draggingBounds);extern pascal WindowReference FrontNonFloatingWindow(void);extern pascal WindowReference LastFloatingWindow(void);extern pascal Boolean WindowIsModal(WindowReference WindowReferenceerence);extern pascal void DeactivateFloatersAndFirstDocumentWindow(void);extern pascal void ActivateFloatersAndFirstDocumentWindow(void);extern pascal void SuspendFloatingWindows(void);extern pascal void ResumeFloatingWindows(void);extern pascal void ValidateWindowList(void);// Getters and Settersextern pascal void GetWindowPortRect(WindowReference WindowReferenceerence, Rect *portRect);extern pascal short Get_WindowKind(WindowReference WindowReferenceerence);extern pascal void Set_WindowKind(WindowReference WindowReferenceerence, short windowKind);extern pascal Boolean GetWindowVisible(WindowReference WindowReferenceerence);extern pascal void SetWindowVisible(WindowReference WindowReferenceerence, Boolean windowVisible);extern pascal Boolean GetWindowHilite(WindowReference WindowReferenceerence);extern pascal void SetWindowHilite(WindowReference WindowReferenceerence, Boolean windowHilite);extern pascal WindowReference Get_NextWindow(WindowReference WindowReferenceerence);extern pascal void SetNextWindow(WindowReference WindowReferenceerence, WindowReference nextWindow);extern pascal RgnHandle GetContentRegion(WindowReference WindowReferenceerence);extern pascal RgnHandle GetStructureRegion(WindowReference WindowReferenceerence);extern pascal Handle GetWindowDefProc(WindowReference WindowReferenceerence);extern pascal ActivateHandlerUPP GetActivateHandlerProc(WindowReference WindowReferenceerence);extern pascal void SetActivateHandlerProc(WindowReference WindowReferenceerence, ActivateHandlerUPP activateHandlerProc);extern pascal Boolean GetWasVisible(WindowReference WindowReferenceerence);extern pascal void SetWasVisible(WindowReference WindowReferenceerence, Boolean wasVisible);#ifdef __cplusplus}#endif#endif