* ==============================================================* =                                                            =* =       sample.inc2.a     (partie spéciales de bonbougre     =* =                                                            =* ==============================================================; partie intelligente de Bon Bougre, càd les partie spécifiques pour;le fonctionnement du programme	PRINT	PUSH,OFF				INCLUDE	'ToolEqu.a'	INCLUDE	'Traps.a'	INCLUDE	'PackMacs.a'	INCLUDE	'QuickEqu.a'	INCLUDE	'SysEqu.a'	INCLUDE	'BB.Records.a'	INCLUDE	'StandardFile.a'		INCLUDE	'PackMacs.a'	INCLUDE	'intenv.a'		; so we can get our args, open files, etc.	INCLUDE	'signal.a'		; so we can handle 'Command-.'	INCLUDE	'Aliases.a'	PRINT	POP	IMPORT	G:AppGlobals	IMPORT	QD:MYQDGLOBALS	; cette routine permet de tester la validitée des import de reférence entre routine MPW_asm et Metrowerk_CTestAdresseGlobalesListe 	PROC	EXPORTStackFrame		RECORD	{A6Link},DECR		; build a stack frame recordParamBegin		EQU	*						; start parameters after this pointstructure		ds.l	1					; adresse du rectangle pour retourParamSize		EQU	ParamBegin-*			; size of all the passed parametersRetAddr 		DS.L	1					; place holder for return addressA6Link			DS.L	1					; place holder for A6 linkLocalSize		EQU 	*					; size of all the local variables				ENDR								WITH	StackFrame,Rect		; cover our local stack frame				LINK	A6,#LocalSize		; allocate our local stack frame				move.l	structure(a6),a0				lea		QD.dkGray,a1				move.l	a1,(a0)				lea		G.spareForFutur,a1				move.l	a1,4(a0)						UNLK	A6				MOVEA.L	(SP)+,A0		; save the caller's address				ADDA.L	#ParamSize,SP		; strip the caller's parameters				JMP	(A0)				DbgInfo.new	TestAdresseGlobalesListe			; this name will appear in the debugger		align 4			ENDP* ================================================* PROCEDURE ChangeStyle_FontDialog(); * ================================================** Cette routine demande à l'utilisateur son choix pour changement * de police sur style et police et effectue le changement*ChangeStyle_FontDialog	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkPopUpPoint		ds.l	1textBuff		ds.b	256rgb_color		ds.w	3TheDialogPtr	DS.l	1			; le pointeur local du dialogItemchoisi		DS.W	1			; Item choisi par l'utilisateuritemType		ds.w	1			; stockage du type de ItemitemHandle		ds.L	1			; stockage	du handle du itemitemRect		ds 		RectRectangle		ds		RectTexteStyle		ds.b	12mode			ds.w	1SelStyle		ds.w	1	StyleDialog_style	ds.W	1StyleDialog_Mode	ds.W	1PopUpItem	ds.w	1Kern_handle		ds.l	1ItemHit		ds.w	1LocalSize		EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				movem.l	d1-d7/a1-a4,-(sp)		clr.l	-(sp)		move.w	#169,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher			move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect; rectangle		move.w	#1,-(sp)		move.w	#1,-(sp)		_PenSize		; ---------------------------------------		;		move.l	TheDialogPtr(a6),-(sp)		move.w	#12,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct				move.l	TheDialogPtr(a6),-(sp)		move.w	#13,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct				move.l	TheDialogPtr(a6),-(sp)		move.w	#14,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct		move.l	TheDialogPtr(a6),-(sp)		move.w	#15,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct		; prépositionnement des valeurs						bsr		initValue			move.l	G.PopUp_Font,a4		move.w	PopUpItem(a6),d1		move.w	#5,d0		; item 5		bsr		DrawPopUpMenu					; ---------------------------------------------------		WaitEvent		move.l	TheDialogPtr(a6),-(sp)		_SetPort				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea	ItemHit(a6)		_ModalDialog		move.w	ItemHit(a6),d7				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		case#.w	(d7,if),\		(1,ok),\		(2,cancel),\		(5,Do_pop_upMenu),\		(6,Do_Style_normal),\		(7,Do_Style_Italic),\		(8,Do_Style_gras),\		(9,Do_Style_uniquement),\		(10,Do_policeUniquement),\		(11,Do_StyleEtPolice)		bra.s	WaitEvent		; --------------------------------------Do_Style_normalDo_Style_ItalicDo_Style_gras		sub.W	#6,d7		move.w	d7,d0		move.w	d7,StyleDialog_style(a6)		bsr		PrepositionneStyle		bra.s	WaitEvent		; --------------------------------------Do_Style_uniquementDo_policeUniquementDo_StyleEtPolice		sub.W	#9,d7		move.w	d7,StyleDialog_Mode(a6)		move.w	d7,d0		bsr		PrepositionneActionSur		bra.s	WaitEvent; ------  pop up menu -----------------------		Do_pop_upMenu				move.l	TheDialogPtr(a6),-(sp)		_SetPort		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.w	left+itemRect(a6),left+PopUpPoint(a6)		move.w	top+itemRect(a6),top+PopUpPoint(a6)		add.w	#1,left+PopUpPoint(a6)		add.w	#1,top+PopUpPoint(a6)		pea		PopUpPoint(a6)		_LocalToGlobal				move.l	TheDialogPtr(a6),-(sp)		move.w	#20,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_inverRect	; on check l'item		move.l	G.PopUp_Font,-(sp)		move.w	PopUpItem(a6),-(sp)		move.w	#True,-(sp)		_CheckItem		; on affiche le menu						move.l	G.PopUp_Font,a0		move.l	(a0),a0		clr.l	-(sp)		move.l	G.PopUp_Font,-(sp)		move.w	top+PopUpPoint(a6),-(sp)		move.w	left+PopUpPoint(a6),-(sp); on calcule la valeur de l'item		move.w	PopUpItem(a6),-(sp)		_PopUpMenuSelect		move.l	(sp)+,d6		; on récupère l'item dans d6				move.l	G.PopUp_Font,-(sp)		move.w	PopUpItem(a6),-(sp)		move.w	#false,-(sp)		_CheckItem				move.l	TheDialogPtr(a6),-(sp)		move.w	#20,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_inverRect		tst.w	d6		beq		WaitEvent;; on redessine le texte du rectangle				move.l	G.PopUp_Font,a4		move.w	d6,d1		move.w	#5,d0		bsr		DrawPopUpMenu				move.w	d6,PopUpItem(a6)		bra 	WaitEvent				; -------------------------------------------------------------------------				ok		;ChangeStyleDialog_Mode			ds.w	1;ChangeStyleDialog_style			ds.w	1;ChangeStyleDialog_font			ds.w	1;ChangeStyleDialog_debut		ds.l	1;ChangeStyleDialog_fin			ds.l	1		move.w	StyleDialog_Mode(a6),G.ChangeStyleDialog_Mode		move.w	StyleDialog_style(a6),G.ChangeStyleDialog_style		move.w	PopUpItem(a6),d0		bsr		Converti_FontMenuItem_FontNumber		move.w	d0,G.ChangeStyleDialog_font						; on récupère le sous titre de départ		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext				lea		textBuff(a6),a0				pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1; traitement erreur		@1		move.l	d1,G.ChangeStyleDialog_debut; on récupère le sous titre de fin		move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext		lea		textBuff(a6),a0		pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2; traitement erreur@2		move.l	d1,G.ChangeStyleDialog_fin	; on ferme le dialog		move.l	TheDialogPtr(a6),-(sp)		_DisposDialog; on appelle la routine qui effectue le changement 		import	DoChangeStyleFont_InList 		jsr		DoChangeStyleFont_InList		import	ForceUpdateWindow		jsr		ForceUpdateWindow		move.w	#true,G.ChangeSinceLastSave		bra  	ExitCancel					move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		Exit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		move.w	d0,-(sp)		JMP	(A0)DrawPopUpMenu						movem.l	d6-d7/a4,-(sp)		move.l	d1,d6		; item menu  		move.l	d0,d7		; n° item DItl				move.w	#2006,d5	; id du menu				move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem; on récupère la couleur de la chaîne en mémoire		_PenNormal		clr.l	-(sp)		move.w	d5,-(sp)		move.w	d6,-(sp)		_GetMCEntry		move.l	(sp)+,a0		cmp.l	#000000,a0		beq.s	NoColorMenu; on recopie la couleur du texte dans le rgb dans la pile			move.w	mctRGB2(a0),rgb_color(a6)		move.w	2+mctRGB2(a0),2+rgb_color(a6)		move.w	4+mctRGB2(a0),4+rgb_color(a6)	; et on affecte cette couleur au port actuel		pea		rgb_color(a6)		_RGBForecolor		NoColorMenu; on recupère la chaine de caractèred équivalente à la valeur stockée		move.l	a4,-(sp)		move.w	d6,-(sp)		pea		textBuff(a6)		_GetItem		; on dessine le texte		add.w	#14,left+itemRect(a6)				pea		itemRect(a6)		_eraseRect				move.w	#SrcOr,-(sp)		_TextMode; actif ou non		move.w	ItemType(a6),d0		btst	#7,d0		beq		Do_Normal 				pea		Qd.Gray		_penPat		bra.s	Do_Normal_1Do_Normal		_penNormalDo_Normal_1				move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),d0		add.w	#12,d0		; font ascent		move.w	d0,-(sp)		_moveTo				pea		textBuff(a6)		_DrawString			; on rend la couleur noire pour le dessin du reste du popUp		move.w	#0,rgb_color(a6)		move.w	#0,2+rgb_color(a6)		move.w	#0,4+rgb_color(a6)	; et on affecte cette couleur au port actuel		pea		rgb_color(a6)		_RGBForecolor				sub.w	#14,left+itemRect(a6); on dessine le triangle en fin de texte		move.l	itemRect(a6),rectangle(a6)		move.l	4+itemRect(a6),4+rectangle(a6)		move.w	bottom+rectangle(a6),d6		sub.w	top+rectangle(a6),d6	; d6 = hauteur pop up		subq.w	#8,d6					; hauteur triangle		move.w	right+rectangle(a6),d0		sub.w	#6,d0		move.w	d0,-(sp)				move.w	top+rectangle(a6),d0		add.w	#3,d0		move.w	d0,-(sp)		_MoveTo				move.w	#2,-(sp)		move.w	#2,-(sp)		_penSize				neg.w	d6		move.w	d6,-(sp)		neg.w	d6		move.w	d6,-(sp)		_Line				neg.w	d6		move.w	d6,-(sp)		move.w	d6,-(sp)		_Line				neg.w	d6		asl.w	#1,d6			;*2		move.w	d6,-(sp)		clr.w	-(sp)		_Line		; on dessine le rectangle autour du texte						move.w	#1,-(sp)		move.w	#1,-(sp)		_penSize				pea		itemRect(a6)		_FrameRect				move.w	left+itemRect(a6),d0		add.w	#1,d0		move.w	d0,-(sp)				move.w	bottom+itemRect(a6),d0		move.w	d0,-(sp)		_MoveTo				move.w	right+itemRect(a6),d0		sub.w	left+itemRect(a6),d0		sub.w	#1,d0		move.w	d0,-(sp)		clr.w	-(sp)		_line				move.w	top+itemRect(a6),d0		sub.w	bottom+itemRect(a6),d0		clr.w	-(sp)		add.w	#1,d0 		move.w	d0,-(sp)		_line				_PenNormal			Exit_DrawPopUp		movem.l	(sp)+,d6-d7/a4		rts		; ----------------ToggleControl		clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq		@1		move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		rts@1		move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		rts		; ------------------initValue; on récupère la police courante		move.w	G.ChangeStyleDialog_font,d0		beq.s	FontNoExist				bsr		Converti_FontNumber_FontMenuItem		move.w	d0,PopUpItem(a6)		bra.s	FontExist		FontNoExist		move.w	#1,PopUpItem(a6)FontExist; prépositionnement du style et du parramètre à changer;ChangeStyleDialog_Mode			ds.w	1;ChangeStyleDialog_style			ds.w	1;ChangeStyleDialog_font			ds.w	1;ChangeStyleDialog_debut		ds.l	1;ChangeStyleDialog_fin			ds.l	1		move.w	G.ChangeStyleDialog_Mode,d0		move.w	d0,StyleDialog_Mode(a6)		bsr		PrepositionneActionSur				move.w	G.ChangeStyleDialog_style,d0		move.w	d0,StyleDialog_style(a6)		bsr		PrepositionneStyle		; on récupère le sous-titre courant	=> sous titre début;									=> sous titre fin		move.w	G.General_SousTitreEncour,d0		ext.l	d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)				; sous titre début			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)				; sous titre fin		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				rts		; -----------------------------------------PrepositionneActionSur		case#.w	(d0,if),\		(0,uniquementstyle),\		(1,policeUniquement),\		(2,policeEtPolice)		uniquementstyle		move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#11,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				rts		; ---------				policeUniquement				move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#11,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue						rts; ---------		policeEtPolice		move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#11,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				rts		; ------------------------------------		PrepositionneStyle		case#.w	(d0,if),\		(0,NormalStyle),\		(1,italicStyle),\		(2,grasStyle)		NormalStyle				move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				rts		; ---------				ItalicStyle				move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue						rts; ---------		GrasStyle		move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				rts; ------------------------------------		findIconResourceDitl		move.l	TheDialogPtr(a6),a0		move.l	items(a0),a0		move.l	(a0),a0		; handle		;	on a le ditl 				add.l	#2,a0		moveq	#1,d6		move.w	d0,d7SearchLoop		move.l	(a0),a4				move.b	13(a0),d0	; longueur des data		add.l	#14,a0		cmp.w	d7,d6		beq		Zexit	; ça y est ;non on continue		and.l	#$ff,d0		move.l	d0,d1		divu	#2,d1		swap	d1		add.w	d1,d0		and.l	#$ffff,d0	; alignement sur dc.w		add.l	d0,a0		; item suivant		addq.w	#1,d6		bra.s	SearchLoop		Zexit	move.w	(a0),d0		rts; ----------------------------------------Converti_FontNumber_FontMenuItem		move.l	G.PopUp_FontNumberList,a0		move.l	(a0),a0			;handle => pointeur		; o recherche le n° de font demandé		move.w	(a0),d7		sub.w	#1,d7Loop_searchFontNumber				move.w	d7,d1		addq.W	#1,d1		lsl.w	#1,d1		;*2		cmp.w	(a0,d1.w),d0		beq		Found_itemNumber		dbra	d7,Loop_searchFontNumber		moveq	#1,d0	; pas trouvé		rts		Found_itemNumber		move.w	d7,d0		addq.W	#1,d0		rts		; ------------------------------------------Converti_FontMenuItem_FontNumber		move.l	G.PopUp_FontNumberList,a0		move.l	(a0),a0			;handle => pointeur; o recherche le n° d'item demander		lsl.w	#1,d0		;*2		move.w	(a0,d0.w),d0		rts						DbgInfo.new		ChangeStyle_FontDialog			; this name will appear in the debugger		align 4			ENDP			* ================================================* PROCEDURE DoChangeStyleFont_InList(); * ================================================** Cette routine effectue un changement de style et font dans un sous-titre* en fonction des parramétres Globaux G.………………;ChangeStyleDialog_Mode			ds.w	1;ChangeStyleDialog_style		ds.w	1;ChangeStyleDialog_font			ds.w	1;ChangeStyleDialog_debut		ds.l	1		; abs num du st de début;ChangeStyleDialog_fin			ds.l	1		; abs num du st de fin DoChangeStyleFont_InList	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkCurrentST	ds.l	1	; absnum du soustitre en cour de traitementbuffCommentaire	ds.b	256	; pour sauvegarder le commentaire	texteStyle			ds.b	12		; style pour texte testptr			ds.l	1	LocalSize		EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				movem.l	d1-d7/a1-a4,-(sp)				move.l	G.ChangeStyleDialog_debut,CurrentST(a6); on initialise un style par défaut			lea		texteStyle(a6),a0			move.w	#0,tsColor+red(a0)				move.w	#0,tsColor+blue(a0)				move.w	#0,tsColor+green(a0)	; on initialise la police par défaut			move.w	G.General_FontNumber,tsFont(a0); le style par défaut			move.w	#0,tsFace(a0)	; par défaut normal; la taille par défault			; note cette valeur est changée entre les deux fenêtres listing et saisie			move.w	#9,tsSize(a0)	; 9 pour la fenètre listing				; 	boucle pour effectuer le changement de style et de police			Loop_Changement			move.l	CurrentST(a6),d0		jsr		ConversionNumeroSTPointeur		move.l	a0,stPtr(a6)		clr.w	buffCommentaire(a6)	; on raz le buffer	; -----------------------------		;		routine de changement des styles et font; on commence par regarder s'il y a des styles dans le sous-titres		move.l	stPtr(a6),A0		tst.l	st_StylePtr(a0)		bne.s	IlyadesStyles; ---- il n'y a pas de styles on en créer un 						; on sauvegarde la chaîne de commentaire						move.l	st_CommentairePTR(a0),d1		beq.S	PasDeCommentaire				move.l	st_Commentairelenth(a0),d0		beq.S	PasDeCommentaire		move.l	d1,a0		move.b	d0,buffCommentaire(a6)		lea		buffCommentaire+1(a6),a1				_BlockMovePasDeCommentaire; il faut écarter le sous-titre de la largeur d'un style				; on calcule la place nécessaire pour caser un style					move.l	stPtr(a6),a0			move.l	st_TexteLenth(a0),d0		; taille du texte			import	AligneD0			jsr		AligneD0			add.l	#32,d0				; longueur d'un slylescrap (### normalement 24 il me semble)						move.b	buffCommentaire(a6),d1	; taille du commentaire			and.l	#$ff,d1			add.l	d1,d0; on rajoute 16 pour prévenir un débordement sur le sous titre suivant (pour les alignements etc..)			add.l	#16,d0				; en réserve pour l'instant 			; on calibre la longueur du sous-titre 					import	EcarteSousTitre			jsr		EcarteSousTitre							move.w	#doFace+doColor+doFont,-(sp)	; la fonction		pea		texteStyle(a6)	; le record		move.l	stPtr(a6),-(sp)		; le sous-titre		move.w	#0,-(sp)		; la position de départ du style (au début)		import	Add_style		jsr		Add_style		IlyadesStyles		; ---- modification de la font 		move.w	G.ChangeStyleDialog_Mode,d0		addq.w	#1,d0		and.w	#$2,d0		beq.s	PaslaFont						lea		texteStyle(a6),a0		move.w	G.ChangeStyleDialog_font,tsFont(a0)				move.w	#doFont,-(sp)	; la fonction		pea		texteStyle(a6)	; le record		move.l	stPtr(a6),-(sp)		; le sous-titre		move.w	#0,-(sp)		; la position de départ du style (au début)		import	Add_style		jsr		Add_style			; ----- modification du stylePaslaFont		move.w	G.ChangeStyleDialog_Mode,d0		addq.w	#1,d0		and.w	#$1,d0		beq.s	PaslesStyle		lea		texteStyle(a6),a0		move.w	G.ChangeStyleDialog_style,tsFace(a0)				move.w	#doFace,-(sp)	; la fonction		pea		texteStyle(a6)	; le record		move.l	stPtr(a6),-(sp)		; le sous-titre		move.w	#0,-(sp)		; la position de départ du style (au début)		import	Add_style		jsr		Add_style	PaslesStyle				; on regarde s'il faut rendre la chaîne de commentaire		moveq	#0,d0		move.b	buffCommentaire(a6),d0		beq.s	PasRendreChaineCommentaire_1	; pas de chaîne !; on calcule le pointeur du commentaire		move.l	stPtr(a6),a2		move.l	a2,d1				add.l	#st_SizeOf,d1			; taille du header		add.l	st_TexteLenth(a2),d1	; taille du texte			import	AligneD1		jsr		AligneD1				; premier alignement		add.l	st_StyleLenth(a2),d1	; longueur du style		add.l	#4,d1					; 4 octets de séparations		import	AligneD1		jsr		AligneD1				move.l	d1,st_CommentairePtr(a2)	; pointeur du commentaire		move.l	d1,a1				lea		buffCommentaire(a6),a0		; chaine de caractères sauvegardé		moveq	#0,d0		move.b	(a0)+,d0				; longueur du commentaire; et ptr chaine +1 (str 255 !)		move.l	d0,st_CommentaireLenth(a2)				_blockMove						; on recopie le commentaire`		PasRendreChaineCommentaire_1		; -----------------------------				addq.l	#1,CurrentST(a6)		move.l	CurrentST(a6),d0		move.l	G.ChangeStyleDialog_fin,d1		cmp.l	d1,d0 		ble		Loop_Changement		; -------------------------------------------------------------------		; les changements sont finis		;  il faut invalider le cache du conversion num pointeur		clr.l	G.General_DernierNumConvertiPtr		; on donne ordre de redessiné le sous-titre à l'écran		tst.l	G.Base_Adresse			; il y a t-il une carte d'affichage 		beq.s 	Pas_deCarteAffichage_1			; non on ne fait rien				move.w	#$8000,G.DrawState	; travail effectué par la VBL task@azert_1		move.w	G.DrawState,d0	; on attend que la vbltask est terminée		bmi.s	@azert_1; on raz la carte d'affichage		import	Clear_Buffer					jsr		Clear_Buffer					clr.l	G.Sous_titre_dessined	; on indique que la carte est vide		clr.l	G.Sous_titreInOffscreen	; on invalide le sous-titre dans le offscreen buffPas_deCarteAffichage_1						Exit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		move.w	d0,-(sp)		JMP	(A0)		DbgInfo.new		DoChangeStyleFont_InList			; this name will appear in the debugger		align 4			ENDP* ================================================* PROCEDURE Configuration_CacheSurZone(); * ================================================**	Cette routine demande à l'utilisateur son choix*	pour les types de caches pour une zone de sous-titresConfiguration_CacheSurZone	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkResult		ds.w	1		; le résultatStartValue	ds.w	1		; la valeur de départTheDialogPtr	DS.l	1			; le pointeur local du dialogItemchoisi		DS.W	1			; Item choisi par l'utilisateuritemType		ds.w	1			; stockage du type de ItemitemHandle		ds.L	1			; stockage	du handle du itemitemRect		ds 		RectpictHandle		ds.l	1ChangeStyleDialog_debut	ds.l	1ChangeStyleDialog_fin	ds.l	1CurrentST		ds.l	1			;textBuff		ds.b	256ItemHit		ds.w	1LocalSize		EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				move.w	#1,StartValue(a6)		move.w	#1,result(a6)				movem.l	d1-d7/a1-a4,-(sp)		clr.l	-(sp)		move.w	#178,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher			move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect; rectangle		move.w	#1,-(sp)		move.w	#1,-(sp)		_PenSize; ---		move.l	TheDialogPtr(a6),-(sp)		move.w	#12,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_frameRect		; on récupère le sous-titre courant	=> sous titre début;									=> sous titre fin		move.w	G.General_SousTitreEncour,d0		ext.l	d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)				; sous titre début			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		move.l	G.General_nombreST,d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String				move.l	TheDialogPtr(a6),-(sp)		move.w	#11,-(sp)				; sous titre fin		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		; ---------------------------------------		;		move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct		move.w	StartValue(a6),d0		cmp.w	#4,d0		blo		PasDeProbleme		moveq	#0,d0PasDeProbleme				bsr	configDialog; ---------------------------------------------------		WaitEvent		move.l	TheDialogPtr(a6),-(sp)		_SetPort				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea	ItemHit(a6)		_ModalDialog		move.w	ItemHit(a6),d7				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		case#.w	(d7,if),\		(1,ok),\		(2,cancel),\		(5,DOCache),\		(6,DOCache),\		(7,DOCache),\		(8,DOCache)		bra	WaitEvent	; on configure le dialog en fct de la valeur DOCache				move.w	d7,d0		subq.w	#5,d0		move.w	d0,result(a6)				bsr	configDialog				bra		WaitEvent; -------------------------------------------------------------------------				ok		; on récupère le sous titre de départ		move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext				lea		textBuff(a6),a0				pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1; traitement erreur		@1		move.l	d1,ChangeStyleDialog_debut(a6); on récupère le sous titre de fin		move.l	TheDialogPtr(a6),-(sp)		move.w	#11,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext		lea		textBuff(a6),a0		pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2; traitement erreur@2		move.l	d1,ChangeStyleDialog_fin(a6)	; on ferme le dialog		move.l	TheDialogPtr(a6),-(sp)		_DisposDialog; on effectue le rafraichissement de fenètres; on effectue le changement		move.l	ChangeStyleDialog_debut(a6),CurrentST(a6)Loop_Changement				move.l	CurrentST(a6),d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.w	result(a6),d0		move.b	d0,st_MasKType(a0)		add.l	#1,CurrentST(a6)		move.l	CurrentST(a6),d0		cmp.l	ChangeStyleDialog_fin(a6),d0		ble		Loop_Changement		; ----------------; les changements sont finis				import	ForceUpdateWindow		jsr		ForceUpdateWindow; on donne ordre de redessiné le sous-titre à l'écran		tst.l	G.Base_Adresse			; il y a t-il une carte d'affichage 		beq.s 	Pas_deCarteAffichage_1			; non on ne fait rien				move.w	#$8000,G.DrawState	; travail effectué par la VBL task@azert_1		move.w	G.DrawState,d0	; on attend que la vbltask est terminée		bmi.s	@azert_1; on raz la carte d'affichage		import	Clear_Buffer					jsr		Clear_Buffer					clr.l	G.Sous_titre_dessined	; on indique que la carte est vide		clr.l	G.Sous_titreInOffscreen	; on invalide le sous-titre dans le offscreen buffPas_deCarteAffichage_1		bra  	Exit		Cancel					move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		Exit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		move.w	d0,-(sp)		JMP	(A0); ------------- sub routine -----------------------------		configDialog		movem.w	d7,-(sp)		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue						move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				; on active le item sélectionné		move.w	d7,d0		addq.W	#5,d0				move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				; on affiche le pict		move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				add.w	#134,d7	; figure de base 		clr.l	-(sp)		move.w	d7,-(sp)		_GetPicture		move.l	(sp)+,pictHandle(a6)		; picture handle; on affiche le "picture"		move.l	pictHandle(a6),-(sp)		pea		itemRect(a6)		_drawPicture				move.l	pictHandle(a6),-(sp)		_ReleaseResource				movem.w	(sp)+,d7		rts						dbgInfo.new	Configuration_CacheSurZone		endp* ================================================* PROCEDURE Configuration_JustifSurZone(); * ================================================**	Cette routine demande à l'utilisateur son choix*	pour les types de justification pour une zone de sous-titresConfiguration_JustifSurZone	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkResult		ds.w	1		; le résultatStartValue	ds.w	1		; la valeur de départTheDialogPtr	DS.l	1			; le pointeur local du dialogItemchoisi		DS.W	1			; Item choisi par l'utilisateuritemType		ds.w	1			; stockage du type de ItemitemHandle		ds.L	1			; stockage	du handle du itemitemRect		ds 		RectpictHandle		ds.l	1ChangeStyleDialog_debut	ds.l	1ChangeStyleDialog_fin	ds.l	1CurrentST		ds.l	1			;textBuff		ds.b	256LocalSize		EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				move.w	#1,StartValue(a6)		move.w	#1,result(a6)				movem.l	d1-d7/a1-a4,-(sp)		clr.l	-(sp)		move.w	#180,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher			move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect; rectangle		move.w	#1,-(sp)		move.w	#1,-(sp)		_PenSize; ---		move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_frameRect		; on récupère le sous-titre courant	=> sous titre début;									=> sous titre fin		move.w	G.General_SousTitreEncour,d0		ext.l	d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)				; sous titre début			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		move.l	G.General_nombreST,d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)				; sous titre fin		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		; ---------------------------------------		;		move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameREct		moveq	#0,d0PasDeProbleme				bsr	configDialog; ---------------------------------------------------				move.l	TheDialogPtr(a6),-(sp)		_SetPortWaitEvent				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog				move.w	Itemchoisi(a6),d7		case#.w	(d7,if),\		(1,ok),\		(2,cancel),\		(5,DOCache),\		(6,DOCache),\		(7,DOCache)		bra	WaitEvent	; on configure le dialog en fct de la valeur DOCache				move.w	d7,d0		subq.w	#5,d0		move.w	d0,result(a6)				bsr	configDialog				bra		WaitEvent; -------------------------------------------------------------------------				ok		; on récupère le sous titre de départ		move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext				lea		textBuff(a6),a0				pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1; traitement erreur		@1		move.l	d1,ChangeStyleDialog_debut(a6); on récupère le sous titre de fin		move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_GetItext		lea		textBuff(a6),a0		pea		textBuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2; traitement erreur@2		move.l	d1,ChangeStyleDialog_fin(a6)	; on ferme le dialog		move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow; on effectue le rafraichissement de fenêtres; on effectue le changement		move.l	ChangeStyleDialog_debut(a6),CurrentST(a6)Loop_Changement				move.l	CurrentST(a6),d0		jsr		ConversionNumeroSTPointeur		move.w	result(a6),d0		move.b	d0,st_Justification(a0)		add.l	#1,CurrentST(a6)		move.l	CurrentST(a6),d0		cmp.l	ChangeStyleDialog_fin(a6),d0		ble		Loop_Changement		; ----------------; les changements sont finis				import	ForceUpdateWindow		jsr		ForceUpdateWindow		; on donne ordre de redessiné le sous-titre à l'écran		tst.l	G.Base_Adresse			; il y a t-il une carte d'affichage 		beq.s 	Pas_deCarteAffichage_1			; non on ne fait rien				move.w	#$8000,G.DrawState	; travail effectué par la VBL task@azert_1		move.w	G.DrawState,d0	; on attend que la vbltask est terminée		bmi.s	@azert_1; on raz la carte d'affichage		import	Clear_Buffer					jsr		Clear_Buffer					clr.l	G.Sous_titre_dessined	; on indique que la carte est vide		clr.l	G.Sous_titreInOffscreen	; on invalide le sous-titre dans le offscreen buffPas_deCarteAffichage_1		bra  	Exit		Cancel			move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		Exit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		move.w	d0,-(sp)		JMP	(A0); ------------- sub routine -----------------------------		configDialog		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue				; on active le item sélectionné		move.w	d7,d0		addq.W	#5,d0				move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue					rts						dbgInfo.new	Configuration_JustifSurZone		endp	* ======================================================================*	Fonction	DecalerTexteDialog();* ======================================================================**	Cette routine décale les textes de sous-titres,*   Elle ouvre un REQUESTER pour demander à l'utilisateur ses choixDecalerTexteDialog	PROC	EXPORTStackFrame		RECORD	{A6Link},DECR		; build a stack frame recordParamBegin		EQU	*			; start parameters after this pointParamSize		EQU	ParamBegin-*		; size of all the passed parametersRetAddr 		DS.L	1			; place holder for return addressA6Link			DS.L	1			; place holder for A6 linkTheDialogPtr	DS.l	1		; le pointeur local du dialogItemchoisi		DS.W	1		; Item choisi par l'utilisateuritemType		ds.w	1		; stockage du type de ItemitemRect		ds 		RectitemHandle		ds.L	1		; stockage	du handle du itemBUFFER			ds.b	256BUFFER2			ds.b	256DebutZone		ds.l	1		; numero 1er stFinZone			ds.l	1		; numero dernier stDestination		ds.l	1		; numero st de destinationDernierTexte	ds.l	1		; numero du dernier st possédant du texte qui sera recouvertnombre			ds.l	1		; nombre de sous-titre à insérer -1 ?total			ds.l	1		; nombre de sous-titre à décalernombreIteration			ds.l	1	; nombre d'itération maximum dépend de la routinepointeur				ds.l	1flag					ds.w	1		; si true décalage vers le hautTheConfirmDialogPtr		ds.l	1LargeurReglette			ds.w	1LastXpos				ds.w	1Rectangle				ds		Rectthe_RGB_Color			ds.w	6savestacks_1			ds.w	4LocalSize				EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc,Show_cursor,spincursor,Insert_before,insertST			WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame				LINK	A6,#LocalSize		; allocate our local stack frame				clr.l	-(sp)		move.w	#143,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect		; on dessine les carrés						move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem					move.l	#blackColor,-(sp)		_ForeColor		move.w	#1,-(sp)		move.w	#1,-(sp)	   	_PenSize			   	move.w	#SrcCopy,-(sp)	   	_TEXTMode			   	move.w	#SrcCopy,-(sp)	   	_PenMode				pea		itemRect(a6)		_FrameRect				; on propose le st courant comme st de début ?		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.w	G.General_SousTitreEnCour,d0		and.l	#$ffff,d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	buffer(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_SetIText		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_Decaler_DebutTEItem,-(sp)		move.w	#0,-(sp)		move.w	#3200,-(sp)		_SelItext; on propose dernier st comme sous-titre de début		move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	G.General_NombreST,d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	st_NumeroST(a0),d0		lea.l	buffer(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_SetIText; on active le gadget vers le haut		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue;   		; on désactive le gadget vers le bas		move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		; *************************************************************Modal_Loop:	; on dessine les carrés				move.l	TheDialogPtr(a6),-(sp)		_setPort			import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog		move.w	Itemchoisi(A6),d0					case#.w	(d0,IF), \		(1,Decaler),\		(2,Annuler),\			(5,VersleHaut),\		(6,Verslebas)		bra		Modal_Loop		;---------------------VersleHaut; on active le gadget vers le haut		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue;   		; on désactive le gadget vers le bas		move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		bra		Modal_Loop		; -------------------		Verslebas; on désactive le gadget vers le haut		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue;   		; on active le gadget vers le bas		move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue				bra		Modal_Loop		; -------------------						Decaler; on commence par vérifier le contenu des te items`						move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,flag(a6)		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_GetItext				pea		buffer(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1		; traitement erreur		@1		move.l	d1,DebutZone(a6)				move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp) 		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem					move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_GetItext							pea		buffer(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2		; traitement erreur		@2		move.l	d1,FinZone(a6); on calcule le nombre de sous-titre à décaler		move.l	finZone(a6),d0		sub.l	DebutZone(a6),d0		move.l	d0,total(a6)		tst.l	d0		bge.s	PasErrEurTotal; ---		; il n'y a pas de sous-titre à décaler				clr.w	-(sp)		move.w	#151,-(sp)		clr.l	-(sp)		_Alert		move.w	(sp)+,d0		bra		Modal_Loop; ---PasErrEurTotal; on vérifie si l'action ne vas pas effacer du texte ; on regarde en fct du sens si c'est le caspaslesmemes			tst.w	flag(a6)	; vers le bas ?		beq 	VerificationDernier		; oui		; verifPremier		move.l	DebutZone(a6),d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	a0,a3				move.l	st_NumeroST(a0),d0		lea.l	buffer(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String		; on regarde si c'est le premier sous-titre		move.l	G.General_PremierSTPTr,a2		cmp.l	a3,a2		bne		PasPremierST; on regarde s'il y a du texte au dernier sous-titres		tst.l	st_texteLenth(a3)		beq.s	PasPremierSt; oui, dans ce cas,; on insère un sous-titre au début de la liste			move.l	#48,d0		import  insert_Before		jsr		insert_Before		add.l	#1,finZone(a6)	; 1 de plus		bra		ChaineTexteVide; ------------------------------------------------------------		;on vérifie que le sous-titre précedant la liste est bien vide 				PasPremierSt						move.l	st_previousST(a3),d0		beq 	ChaineTexteVide				move.l	d0,a0		tst.l	st_texteLenth(a0)		beq 	ChaineTexteVide; on converti le n° du sous-titre qui va ètre effacer				move.l	st_NumeroST(a0),d0		lea.l	buffer2(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String				bra.s	TextePasVide; ---------------------------------------------		VerificationDernier		move.l	finZone(a6),d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	a0,a3; on regarde si c'est le dernier sous-titre		move.l	G.General_DernierSTPTr,a2		cmp.l	a3,a2		bne.s	PasDernierSt; on regarde s'il y a du texte au dernier sous-titres		tst.l	st_texteLenth(a3)		beq.s	PasDernierSt; oui, dans ce cas,; on insère un sous-titre à la fin de la liste					move.l	a2,a0		move.l	#48,d0		import  insertST		jsr		InsertSt		add.l	#1,finZone(a6)	; 1 de plus		bra		ChaineTexteVide; ---			PasDernierSt		   		move.l	st_nextST(A3),d0		beq		ChaineTexteVide		move.l	d0,A3				move.l	st_NumeroST(a3),d0		lea.l	buffer(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String				tst.l	st_texteLenth(a3)		beq 	ChaineTexteVide		TextePasVide		clr.l	-(sp)		move.w	#159,-(sp)		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheConfirmDialogPtr(a6)		_DrawDialog				move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheConfirmDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect				move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#3,-(sp)			; debut stat		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem; on regarde vers le haut ou vers le bas ?		tst.w	flag(a6)	; vers le bas ?		beq.S	@1			; oui		move.l	ItemHandle(a6),-(sp)		pea		buffer2(a6)		_SetIText				bra.s	@2@1				move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_SetIText@2	Modal_Loop1				import	SpecialModalDialogFilter		pea		SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog				move.w	Itemchoisi(A6),d0		cmp.w	#2,d0		bne 	Modal_Loop11				move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow				bra		ChaineTexteVide				Modal_Loop11		cmp.w	#1,d0		bne 	Modal_Loop1			move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog				import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		bra		Exit			; -----------------------------------------------	ChaineTexteVide		; on ouvre un dialog pour confirmer		clr.l	-(sp)		move.w	#147,-(sp)		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheConfirmDialogPtr(a6)		_drawDialog				move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_GetIText				move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#3,-(sp)			; debut stat		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_SetIText; ---				move.l	TheDialogPtr(a6),-(sp)		move.w	#4,-(sp)			pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_GetIText				move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#4,-(sp)			; debut stat		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		buffer(a6)		_SetIText		; 				move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)			; vers le haut ou vaers le bas		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem								clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		Move.w	(sp)+,d0		move.w	d0,flag(a6)		bne.s	VersLehautControlActif		VersLeBasControlActif				move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#5,-(sp)			; vers le haut ou vaers le bas		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		#'bas'		_SetIText		bra		NettoyageConfirm		VersLehautControlActif		move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#5,-(sp)			; vers le haut ou vaers le bas		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		#'haut'		_SetIText				NettoyageConfirm		move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheConfirmDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect		; -------------		WaitConfirm					import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog		move.w	Itemchoisi(A6),d0		cmp.w	#2,d0		beq	PasConfirm		cmp.w	#1,d0		beq	Confirm		bra	WaitConfirm				PasConfirm				move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow				bra		Modal_Loop		Confirm				move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow; en ce moment les ptr sont valides on détermine le sens du décalage		move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		; on regarde pour les updates events				import	UpdateWindowBehind		jsr		UpdateWindowBehind										; on regarde dans quel sens il faut décaler		tst.w	flag(a6)		beq 	DecalerLesTextesVersLebas		; -------------------------------------------------					DecalerLesTextesVersLehaut		; ok on peut bosser; on ouvre un dialog		clr.l	-(sp)		move.w	#154,-(sp)		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)		_DrawDialog				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_EraseRect		move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),d0		add.w	#12,d0		move.w	d0,-(sp)		_moveTo			pea	#'Décalage des textes vers le haut '		_drawString			; on dessine la réglette		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem				_PenNormal			   	move.w	#SrcCopy,-(sp)	   	_TEXTMode			   	move.w	#SrcCopy,-(sp)	   	_PenMode	;on entoure la reglette		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem						_PenNormal				pea		itemRect(a6)		_FrameRect				move.w	right+itemRect(a6),d0		sub.w	left+itemRect(a6),d0		sub.w	#6,d0		move.w	d0,LargeurReglette(a6)		clr.w	LastXpos(a6)				move.w	bottom+itemRect(a6),bottom+rectangle(a6)		subq.w	#2,bottom+rectangle(a6)		move.w	top+itemRect(a6),top+rectangle(a6)		addq.w	#2,top+rectangle(a6)				move.w	left+itemRect(a6),left+Rectangle(a6)		add.w	#2,left+rectangle(a6)								; on nettoie les anciennes marques s'il y en a		move.l	G.General_PremierSTPTr,a0loopClearMark1			move.w	st_Flags(a0),d0		; on active les marques déplacée		bclr.l	#14,d0		move.w	d0,st_flags(a0)		move.l	(a0),d0		beq		FinClearMark1		move.l	d0,a0		bra.s	loopClearMark1		FinClearMark1				; on modifie le st de départ; on determine combien de texte il faut décaler				move.l	finzone(a6),d7		sub.l	debutZone(a6),d7		subq.w	#1,d7				; nombre de st à décaler		move.l	debutzone(a6),d0		subq.w	#1,d0				; nombre de st à décaler		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	a0,a4		; a4= pointeur en courDecalerTexteVersLeHautLoop			; on sauvegarde la chaine de commentaire du sous-titre		clr.w	Buffer(a6)		move.l	st_CommentaireLenth(a4),d0		beq.s	PasCommentaire_1				move.l	st_CommentairePtr(a4),a0		lea.l	Buffer(a6),a1		move.b	d0,(a1)+		_BlockMove				PasCommentaire_1; on ajuste la taille du sous-titre en cour en fct  du ST suivant		move.l	st_nextST(a4),d0		beq		EcarteSt_1			; pas de sous-titre à la suite				move.l	d0,a0		moveq.l	#0,d0				add.l	st_textelenth(a0),d0				add.l	st_Stylelenth(a0),d0		add.l	st_Commentairelenth(a4),d0		add.l	#8,d0EcarteSt_1		move.l	a4,a0		import	EcarteSousTitre			jsr		EcarteSousTitre				; on recopie le texte du sous-titre suivant dans celui-ci ; nb: le next st a été modifier par EcarteSousTitre			move.l	st_NextSt(a4),d0		beq		texte_Vide_1		move.l	d0,a0		move.l	st_TexteLenth(a0),d0		move.l	d0,st_TexteLenth(a4)		bne.s	texte_1; le texte est vide donc les styles aussitexte_Vide_1		clr.l	st_StylePtr(a4)		clr.l	st_Stylelenth(a4)		bra		RecopieCommentaire_1				texte_1		move.l	a4,a1		move.l	#st_SizeOf,d1		add.l	d1,a0		add.l	d1,a1			_BlockMove		; on recopie les styles si ils existent				move.l	st_NextSt(a4),d0		beq.s	RecopieCommentaire_1	; il n'y a pas de style				move.l	d0,a0		move.l	st_styleLenth(a0),d0		move.l	d0,st_styleLenth(a4)		beq.s	RecopieCommentaire_1	; il n'y a pas de style						move.l	st_stylePtr(a0),a0		; pointeur style st suivant; on calcule le ptr du style dans le sous-titre		move.l	st_TexteLenth(a4),d1		import	AligneD1		jsr		AligneD1	; pointeur des styles aligné dc.l		add.l	#st_sizeOf,d1		move.l	a4,a1		add.l	d1,a1								move.l	a1,st_StylePtr(a4)				_BlockMove		RecopieCommentaire_1						clr.l	st_CommentairePtr(a4)		clr.l	st_Commentairelenth(a4)		lea 	Buffer(a6),a0		moveq	#0,d0		move.b	(a0)+,d0		beq.s	PasDeCommentaire_1		move.l	d0,st_Commentairelenth(a4); on calcule le pointeur du commentaire		move.l	a4,a1		move.l	st_TexteLenth(a4),d1		import	AligneD1		jsr		AligneD1			move.l	d1,d2		; sauvegarde d1				move.l	st_styleLenth(a4),d1		import	AligneD1		jsr		AligneD1		add.l	d2,d1		add.l	#st_sizeOf,d1		move.l	a4,a1		add.l	d1,a1					; pointeur du commentaire aligné dc.l			move.l	a1,st_CommentairePtr(a4)				_BlockMove		PasDeCommentaire_1		movem.l	d0-d7/a0-a4,-(sp)		move.w	#32,-(sp) 		import	C_SpinCursor	; spin the ball 		JSR	C_SpinCursor	; spin the ball		movem.l	(sp)+,d0-d7/a0-a4			move.l	st_nextST(a4),d0			beq 	OutDrawTousleMonde		; c'est le dernier sous-titre. 			move.l	d0,a4; on rafraichie la reglette, et le curseur		move.l	st_AbsNumSt(a4),d0		sub.l	debutZone(a6),d0		move.w	LargeurReglette(a6),d1		and.l	#$fff,d1			mulu.w	d1,d0; resultat sur 32 bits dans d0		move.l	finzone(a6),d1		sub.l	debutZone(a6),d1		divu	d1,d0; resultat dans d0		cmp.w	LastXpos(a6),d0		beq.s	onnedessinepas_2		move.w	d0,LastXpos(a6) 		bsr		Draw_Reglette				movem.l	d0-d7/a0-a4,-(sp)		move.w	#32,-(sp) 		import	C_SpinCursor	; spin the ball 		JSR	C_SpinCursor	; spin the ball		movem.l	(sp)+,d0-d7/a0-a4			_PenNormal		onnedessinepas_2				dbra.w	d7,DecalerTexteVersLeHautLoop		; on raz le texte					cmpa.l	#0,a4			beq		OutDrawTousleMonde			clr.l	st_texteLenth(a4)			clr.l	st_StylePtr(a4)			clr.l	st_Stylelenth(a4)								bra		OutDrawTousleMonde		; -------------------------------------------------		DecalerLesTextesVersLebas	; ok on peut bosser; on ouvre un dialog		clr.l	-(sp)		move.w	#154,-(sp)		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)		_DrawDialog				move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_EraseRect		move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),d0		add.w	#12,d0		move.w	d0,-(sp)		_moveTo			pea	#'Décalage des textes vers le bas '		_drawString			; on dessine la réglette		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem				_PenNormal			   	move.w	#SrcCopy,-(sp)	   	_TEXTMode			   	move.w	#SrcCopy,-(sp)	   	_PenMode	;on entoure la reglette		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)	; item 1		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		; coordonnées de la reglette		_GetDItem						_PenNormal				pea		itemRect(a6)		_FrameRect				move.w	right+itemRect(a6),d0		sub.w	left+itemRect(a6),d0		sub.w	#6,d0		move.w	d0,LargeurReglette(a6)		clr.w	LastXpos(a6)				move.w	bottom+itemRect(a6),bottom+rectangle(a6)		subq.w	#2,bottom+rectangle(a6)		move.w	top+itemRect(a6),top+rectangle(a6)		addq.w	#2,top+rectangle(a6)				move.w	left+itemRect(a6),left+Rectangle(a6)		add.w	#2,left+rectangle(a6)								; on nettoie les anciennes marques s'il y en a		move.l	G.General_PremierSTPTr,a0loopClearMark2				move.w	st_Flags(a0),d0		; on active les marques déplacée		bclr.l	#14,d0		move.w	d0,st_flags(a0)				move.l	(a0),d0		beq		FinClearMark2		move.l	d0,a0		bra.s	loopClearMark2		FinClearMark2		; on determine combien de texte il faut décaler				add.l	#1,finzone(a6)		move.l	finzone(a6),d7		sub.l	debutZone(a6),d7		subq.w	#1,d7				; nombre de st à décaler		move.l	finzone(a6),d0		import	ConversionNumeroSTPointeur		jsr		ConversionNumeroSTPointeur		move.l	a0,a4DecalerTexteVersLebasLoop	; on sauvegarde la chaine de commentaire du sous-titre 		clr.w	Buffer(a6)		move.l	st_CommentaireLenth(a4),d0		beq.s	PasCommentaire_2				move.l	st_Commentaireptr(a4),a0		lea.l	Buffer(a6),a1		move.b	d0,(a1)+		_BlockMovePasCommentaire_2		; on ajuste la taille du sous-titre en cour en fct  du ST précédant				move.l	st_previousST(a4),d0		beq.s	PasSt_Previous_2		move.l	d0,a0				moveq.l	#0,d0		add.l	st_textelenth(a0),d0			add.l	st_stylelenth(a0),d0			add.l	st_Commentairelenth(a4),d0	PasSt_Previous_2		add.l	#8,d0		move.l	a4,a0		import	EcarteSousTitre			jsr		EcarteSousTitre			; on recopie le texte du sous-titre suivant dans celui-ci 		move.l	st_PreviousSt(a4),d0		beq.s	RecopieCommentaire_2				move.l	d0,a0		move.l	st_TexteLenth(a0),d0		move.l	d0,st_TexteLenth(a4)		bne.s	texte_2; le texte est vide donc les styles aussi		clr.l	st_StylePtr(a4)		clr.l	st_Stylelenth(a4)		bra		RecopieCommentaire_2				texte_2		move.l	a4,a1		move.l	#st_SizeOf,d1		add.l	d1,a0		add.l	d1,a1			_BlockMove		; on recopie les styles si ils existent				move.l	st_PreviousSt(a4),a0		move.l	st_styleLenth(a0),d0		move.l	d0,st_styleLenth(a4)		beq.s	RecopieCommentaire_2	; il n'y a pas de style				move.l	st_stylePtr(a0),a0		; pointeur style st précédent; on calcule le ptr du style dans le sous-titre		move.l	st_TexteLenth(a4),d1		import	AligneD1		jsr		AligneD1		add.l	#st_sizeOf,d1		move.l	a4,a1		add.l	d1,a1					; pointeur des styles aligné dc.l			move.l	a1,st_StylePtr(a4)				_BlockMove		RecopieCommentaire_2						clr.l	st_CommentairePtr(a4)		clr.l	st_Commentairelenth(a4)		lea 	Buffer(a6),a0		moveq	#0,d0		move.b	(a0)+,d0		beq 	PasDeCommentaire_2		move.l	d0,st_Commentairelenth(a4); on calcule le pointeur du commentaire		move.l	a4,a1		move.l	st_TexteLenth(a4),d1		import	AligneD1		jsr		AligneD1		move.l	d1,d2		move.l	st_styleLenth(a4),d1		import	AligneD1		jsr		AligneD1		add.l	d2,d1		add.l	#st_sizeOf,d1		move.l	a4,a1		add.l	d1,a1					; pointeur du commentaire aligné dc.l			move.l	a1,st_CommentairePtr(a4)				_BlockMove		PasDeCommentaire_2		move.l	st_PreviousST(a4),d0		beq		OutDrawTousleMonde		; c'était le premier				move.l	d0,a4; ; on rafraichie la reglette, et le curseur		move.l	finZone(a6),d0		sub.l	st_AbsNumSt(a4),d0		move.w	LargeurReglette(a6),d1		and.l	#$fff,d1			mulu.w	d1,d0; resultat sur 32 bits dans d0		move.l	finzone(a6),d1		sub.l	debutZone(a6),d1		divu	d1,d0; resultat dans d0		cmp.w	LastXpos(a6),d0		beq.s	onnedessinepas_1		move.w	d0,LastXpos(a6) 		bsr		Draw_Reglette				movem.l	d0-d7/a0-a4,-(sp)		move.w	#32,-(sp) 		import	C_SpinCursor	; spin the ball 		JSR	C_SpinCursor	; spin the ball		movem.l	(sp)+,d0-d7/a0-a4				_PenNormal		onnedessinepas_1						dbra.w	d7,DecalerTexteVersLebasLoop; ------------------------------------------; on raz le texte				cmpa.l	#0,a4		beq		OutDrawTousleMonde		clr.l	st_texteLenth(a4)		clr.l	st_StylePtr(a4)		clr.l	st_Stylelenth(a4)								; -------------------------------------------------OutDrawTousleMonde				move.l	TheDialogPtr(a6),-(sp)		_DisposDialog				import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow; on place la fenètre listing à l'endroit destination -1							import	ForceUpdateWindow		jsr		ForceUpdateWindow						move.w	#true,G.ChangeSinceLastSave		bra		ExitAnnuler			move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow				bra		Exit				EXIT	move.w	#$0505,-(sp)	; on place le bon curseur		jsr		Show_cursor				movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6			; destroy the link		MOVEA.L	(SP)+,A0		; pull off the return address		ADDA.L	#ParamSize,SP		; strip all of the caller's parameters		JMP	(A0)			; return to the callerDraw_Reglette; cette routine rafraichie la reglette				movem.l	d0-d7/a0-a4,-(sp)				move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		move.w	#2,-(sp)		move.w	#2,-(sp)		_insetRect				sub.w	#1,bottom+itemRect(a6)				move.w	LastXpos(a6),d0		cmp.w	left+itemRect(a6),d0		bhi.s	@123		move.w	left+itemRect(a6),d0@123				move.w	d0,right+itemRect(a6)						move.w	right+itemRect(a6),d0		sub.w	left+itemRect(a6),d0		cmp.w	#2,d0		bhi.s	Do_Reflet				move.w	#10000,the_RGB_Color(a6)		move.w	#50000,2+the_RGB_Color(a6)		move.w	#10000,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor						pea		itemRect(a6)		_PaintRect		move.w	#0,the_RGB_Color(a6)		move.w	#0,2+the_RGB_Color(a6)		move.w	#0,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor				movem.l	(sp)+,d0-d7/a0-a4		rtsDo_Reflet		move.w	#0,the_RGB_Color(a6)		move.w	#20000,2+the_RGB_Color(a6)		move.w	#0,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor		move.w	left+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_LineTo				move.w	right+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_LineTo		move.w	#15535,the_RGB_Color(a6)		move.w	#55535,2+the_RGB_Color(a6)		move.w	#15535,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor				move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_LineTo				move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_MoveTo		move.w	left+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_LineTo		pea		itemRect(a6)		move.w	#1,-(sp)		move.w	#1,-(sp)		_insetRect						move.w	#5535,the_RGB_Color(a6)		move.w	#20535,2+the_RGB_Color(a6)		move.w	#5535,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor		move.w	left+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_LineTo				move.w	right+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_LineTo		move.w	#15535,the_RGB_Color(a6)		move.w	#55535,2+the_RGB_Color(a6)		move.w	#15535,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor				move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_MoveTo		move.w	right+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_LineTo				move.w	left+itemRect(a6),-(sp)		move.w	top+itemRect(a6),-(sp)		_MoveTo		move.w	left+itemRect(a6),-(sp)		move.w	bottom+itemRect(a6),-(sp)		_LineTo; on dessine l'intérieur du rectangle		pea		itemRect(a6)		move.w	#1,-(sp)		move.w	#1,-(sp)		_insetRect				add.W	#1,right+itemRect(a6)		add.W	#1,bottom+itemRect(a6)		move.w	#10000,the_RGB_Color(a6)		move.w	#45000,2+the_RGB_Color(a6)		move.w	#10000,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor				pea		itemRect(a6)		_PaintRect				move.w	#0,the_RGB_Color(a6)		move.w	#0,2+the_RGB_Color(a6)		move.w	#0,4+the_RGB_Color(a6)		pea		the_RGB_Color(a6)		_RGBForecolor				_PenNormal				movem.l	(sp)+,d0-d7/a0-a4		rts		DbgInfo.New	Decatxt 					endp* ================================================* PROCEDURE DialogConfigurationTimeCode(); * ================================================**	Configuration de la fenètre time code *  des items à afficher ou nonDialogConfigurationTimeCode		PROC	EXPORTStackFrame				RECORD	{A6Link},DECR		; build a stack frame recordParamBegin				EQU	*						; start parameters after this pointParamSize				EQU	ParamBegin-*			; size of all the passed parametersRetAddr 				DS.L	1					; place holder for return addressA6Link					DS.L	1					; place holder for A6 linkItemchoisi				DS.W	1		; Item choisi par l'utilisateuritemType				ds.w	1		; stockage du type de ItemitemHandle				ds.L	1		; stockage	du handle du itemitemRect				DS		RecttextBuff				ds.b	256TheDialogPtr			ds.l	1LocalSize				EQU 	*					; size of all the local variables						ENDR									IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize						movem.l	d1-d7/a1-a4,-(sp)						clr.l	-(sp)		move.w	#131,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_Rectangle,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		pea		itemRect(a6)		_FrameRect; affectation des valeurs aux gadgets			move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_STenCour,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.w	G.Preference_DisplayTimeCode,d0		and.w	#tc_STcourant,d0		beq.s	tc_STcourant_false		move.w	#True,d0tc_STcourant_false					move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue; --		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_STSuivant,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.w	G.Preference_DisplayTimeCode,d0		and.w	#tc_STsuivant,d0		beq.s	tc_STsuivant_false		move.w	#True,d0tc_STsuivant_false					move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_BarGraph,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.w	G.Preference_DisplayTimeCode,d0		and.w	#tc_BarGraph,d0		beq.s	tc_BarGraph_false		move.w	#True,d0tc_BarGraph_false					move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_Bandeau,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.w	G.Preference_DisplayTimeCode,d0		and.w	#tc_Bandeau,d0		beq.s	tc_Bandeau_false		move.w	#True,d0tc_Bandeau_false					move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_Decompte,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.w	G.Preference_DisplayTimeCode,d0		and.w	#tc_Decompte,d0		beq.s	tc_Decompte_false		move.w	#True,d0tc_Decompte_false					move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue		; --		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_TEechelle,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				moveq	#0,d0		move.w	G.Echelle_Bandeau,d0		lea		TextBuff(a6),a0		clr.w	-(sp)		_pack7				move.l	ItemHandle(a6),-(sp)		pea		TextBuff(a6)		_SetIText		; ----------------------------------------------------------------------------		Modal_dialog		import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog		move.w	Itemchoisi(A6),d0					case#.w	(d0,IF), \		(Dial_TCWindow_OK,OK_0),\		(Dial_TCWindow_Cancel,Cancel),\		(Dial_TCWindow_STenCour,inverse),\		(Dial_TCWindow_STsuivant,inverse),\		(Dial_TCWindow_BarGraph,inverse),\		(Dial_TCWindow_Decompte,inverse),\		(Dial_TCWindow_Bandeau,inverse)				bra		Modal_dialog		inverse		move.l	TheDialogPtr(a6),-(sp)		move.w	Itemchoisi(A6),-(sp)			; l'item		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	False_was				clr.w	d0		bra.s	change		False_was	move.w	#true,d0change	move.l	ItemHandle(a6),-(sp)		move.w	d0,-(sp)		_SetCtlValue		bra		Modal_dialog; ---OK_0			moveq.l	#0,d7				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_STenCour,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	Ok_1		or.w	#tc_STcourant,d7Ok_1; --		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_STSuivant,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	Ok_2		or.w	#tc_STsuivant,d7Ok_2; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_BarGraph,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	Ok_3		or.w	#tc_BarGraph,d7Ok_3; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_Bandeau,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	Ok_4		or.w	#tc_Bandeau,d7Ok_4			; --				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_Decompte,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq.s	Ok_5		or.w	#tc_Decompte,d7Ok_5		or.w	#tc_TimeCode,d7		move.w	d7,G.Preference_DisplayTimeCode		; -		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_TCWindow_TEechelle,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		TextBuff(a6)		_GetIText				lea.l	textbuff(a6),a0		move.w	#1,-(SP)			; selector for StringToNum		_Pack7				cmp.l	#0,d0		bne.s	PasNul		moveq	#1,d0		bra.s	finEchellePasNul						cmp.l	#50,d0		blo.s	finEchelle		move.w	#50,d0		finEchelle			move.w	d0,G.Echelle_Bandeau; ---Cancel		move.l	TheDialogPtr(a6),-(sp)		_DisposDialog				import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow 				movem.l	(sp)+,d1-d7/a1-a4			UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		DbgInfo.New		DialogConfigurationTimeCode			; this name will appear in the debugger		align 4			ENDP* ====================================* PROCEDURE 	OffsetTcListe()* ====================================**   Cette procédure ouvre un dialog pour déterminer une zone d'action*  	dans laquelle on effectue un offset sur les times codes**OffsetTcListe 		PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkWindowPtr	DS.L	1			; local Window pointer variableWichControl	DS.L	1			; control en cour de traitementTheDialogSel ds.l	1			; le dialog en questionTheItemHit	ds.w	1			; le item frappéTheItemHitalert	ds.w	1			; le item frappéTheDialogPtr		DS.l	1		; le pointeur local du dialogTheConfirmDialogPtr	DS.l	1		; le pointeur local du dialogItemchoisi		DS.W	1		; Item choisi par l'utilisateuritemType		ds.w	1		; stockage du type de ItemitemHandle		ds.L	1		; stockage	du handle du itemitemRect		DS	RecttextBuff		ds.b	256textSecondaire	ds.b	256STPtr			ds.l	1		;	adresse du sous-titre trouvé par tcStart			ds.l	1End				ds.l	1Offset			ds.l	1offsetsurblocNote	ds.w	1SaveRgb			ds.w	3backRgb			ds.w	3LocalSize	EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				movem.l	d1-d7/a1-a4,-(sp)		clr.l	-(sp)		move.w	#145,-(sp)	; id number		clr.l	-(sp)			move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect				_PenNormal		; on affecte le nouveau état des bouton; toute la liste		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		; en partie		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		clr.w	-(sp)		_SetCtlValue			; on désactive les te	from et to		move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		HydeDItem		move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		HydeDItem		; on affecte le numéro du premier st au début						move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_FromTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	G.General_PremierSTPtr,a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText			;; on affecte le numéro du dernier st à fin						move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_ToTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	G.General_DernierSTPtr,a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_OffsetTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		; on place dans la case le dernier offset effectué		move.l	G.offsetTC,d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_OffsetTEItem,-(sp)		move.w	#0,-(sp)		move.w	#-1,-(sp)		_SelItext														move.l	TheDialogPtr(a6),-(sp)		move.w	#15,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue											move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_FrameRect				move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_FrameRect		; *************************************************************Rechercher_Oncontinu:				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog		move.w	Itemchoisi(A6),d0					case#.w	(d0,IF), \		(Dial_OffsetTcListe_OkItem,ok),\		(Dial_OffsetTcListe_AnnulerItem	,Annuler),\		(Dial_OffsetTcListe_TouteLaListeItem,TouteLaListe ),\		(15,offsetsur_BlocNote),\		(Dial_OffsetTcListe_PartieDeListeItem,PartieDeLaListe)		bra		Rechercher_Oncontinuoffsetsur_BlocNote		move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				bsr	ToggleControl		bra		Rechercher_OncontinuTouteLaListe				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		clr.w	-(sp)		_SetCtlValue									move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		HydeDItem		move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		HydeDItem				bra		Rechercher_Oncontinu		PartieDeLaListe				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue						move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		ChaudDItem				move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		ChaudDItem				move.l	TheDialogPtr(a6),-(sp)		_DrawDialog												bra		Rechercher_Oncontinu; -------------------------------------ok; on Recupère la chaine offset		move.w	#true,G.ChangeSinceLastSave		; on indique qu'il y a eu modif				move.l	TheDialogPtr(a6),-(sp)		move.w	#15,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,offsetsurblocNote(a6)						move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_OffsetTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext				lea		textbuff(a6),a0		jsr 	ConversionchaineASCIITc 	; on effectue la conversion ou bien la soustraction		cmp.l	#-1,d0		bne.s	@0		; traitement erreur@0				move.l	d0,offset(a6)		move.l	d0,G.offsetTC; on recupère le start item		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_FromTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext		pea		textbuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1		; traitement erreur		@1		move.l	d0,start(a6); on recupère le end item		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_ToTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext		pea		textbuff(a6)		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2		; traitement erreur@2		move.l	d0,end(a6)		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0				beq.s		PasTouteLaListe				move.l	G.General_PremierStPtr,start(a6)		move.l	G.General_DernierStPtr,end(a6)		PasTouteLaListe		; --------------------------------------------; on ouvre un dialog pour confirmer la demande				clr.l	-(sp)		move.w	#146,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheConfirmDialogPtr(a6)   ;		_DrawDialog		move.l	TheConfirmDialogPtr(a6),-(sp)			_SetPort		; on trace le contour du bouton rechercher				move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect		; on affiche les paramètres		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#3,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	Start(a6),a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText;; on affecte le numéro du dernier st à fin		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#4,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	end(a6),a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		; offset		move.l	offset(a6),d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII		move.l	TheConfirmDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		loop_Confirmoffset				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog				move.w	Itemchoisi(A6),d0		cmp.w	#1,d0		beq.s	OnneffectueLoffset		cmp.w	#2,d0		bne.s	loop_Confirmoffset		move.l	TheConfirmDialogPtr(a6),-(sp)			_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		bra		Rechercher_Oncontinu		OnneffectueLoffset		move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow; ça y est on effectue l'offset sur la liste				move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow				move.l	start(a6),-(sp)		move.l	end(a6),-(sp)		move.l	offset(a6),-(sp)			;pascal void C_FaitOffset(SousTitreRecordPtr start, SousTitreRecordPtr end	, long offset);			import	C_FaitOffset		jsr		C_FaitOffset				finOffsetSurLaListeLoop						tst.w	offsetsurblocNote(a6)		beq.s	PasModifBlocNote			lea	 	G.BlockNote_tc,a4				; pointeur sur la zone de time-code		move.w	#15,d7		machine	MC68030		ChangeBlockNote_loop				move.l	(a4,d7.w*4),d0		move.l	offset(a6),d1		import	AdditionTimeCode		jsr		AdditionTimeCode		move.l	d0,(a4,d7.w*4)		dbra	d7,ChangeBlockNote_loop		PasModifBlocNote		import	Show_cursor		move.w	#$0505,-(sp)	; on place le bon curseur		jsr		Show_cursor				import	ForceUpdateWindow		jsr		ForceUpdateWindow		import	UpdateGeneralValue		jsr		UpdateGeneralValue		; on actualise le premier et le  dernier tc						bra.s	ExitAnnuler				move.l	TheDialogPtr(a6),-(sp)		_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindowExit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6			; destroy the link		MOVEA.L	(SP)+,A0		; pull off the return address		ADDA.L	#ParamSize,SP		; strip all of the caller's parameters		JMP	(A0)			; return to the caller		align 4		ToggleControl		clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq		@1		move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		rts@1		move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		rts		HydeDItem		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		move.w	#$88,-(sp)		move.l	ItemHandle(a6),-(sp)		pea		itemRect(a6)		_SetDItem		pea		itemRect(a6)		move.w	#-3,-(sp)		move.w	#-3,-(sp)		_Insetrect				pea		itemRect(a6)		_FrameRect				pea		SaveRgb(a6)		_GetForeColor							pea		backRgb(a6)		_GetbackColor					pea		backRgb(a6)		_RGBForeColor			pea		qd.Gray		_PenPat				move.w	#srcBic,-(sp)		_PenMode				pea		itemRect(a6)		_PaintRect		_PenNormal				pea		SaveRgb(a6)		_RGBForeColor		rts				ChaudDItem		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		move.w	#$10,-(sp)		move.l	ItemHandle(a6),-(sp)		pea		itemRect(a6)		_SetDItem		rts				DbgInfo.New	OffsetTcListe		; this name will appear in the debugger		ENDP* ================================================* PROCEDURE  DoFonctionKey(the event: eventPtr)* ================================================**	Cette routine effectue le traitement des touches de fonctions*   et appelle Les routines nécessaires genre Domenu, etc…DoFonctionKey 		FUNC	EXPORTStackFrame		RECORD	{A6Link},DECR		; build a stack frame recordresult			DS.W	1ParamBegin		EQU	*					; start parameters after this pointTheEvent		ds.l	1				; the eventParamSize		EQU	ParamBegin-*		; size of all the passed parametersRetAddr 		DS.L	1				; place holder for return addressA6Link			DS.L	1				; place holder for A6 linkSTScrp			ds.l	1				; handle du Style scraptexteStyle		ds.b	12				; st style elementtcCourant		ds.l	1				; tc courant pour enchainéItemType		ds.w	1ItemHandle		ds.l	1itemRect		ds		rectstPtr			ds.l	1oldport			ds.l	1textbuff		ds.b	256LocalSize		EQU 	*				; size of all the local variables		ENDR			import	TransfertSaisieMemoire,CALCULDUREE,TransfertMemoireSaisie,insertST,\					ConversionNumeroSTPointeur			with	SOUSTITRERECORD,StackFrame			link	a6,#LocalSize			movem.l	d0-d7/a0-a4,-(sp)		pea		oldport(a6)		_GetPort	; on regarde si l'évennement est un événement clavier		clr.w		result(a6)		MOVE.L		theEvent(a6),a0			move.W		evtNum(a0),d0		cmp.w		#KeyDwnEvt,d0		bne 		ExitEvenementClavier		move.w	G.General_SousTitreEncour,d0		and.l	#$ffff,d0		jsr		ConversionNumeroSTPointeur		move.l	a0,stPtr(a6)		; on regarde si l'utilisateur à utiliser alt+shift num => si oui on simule touches de fonctions; 1=> f1 … 0=> f10 		move.l	theEvent(a6),a4				move.w	evtMeta(a4),d0		btst 	#optionKey,d0		beq.s	PasPseudoFcnt			; pas pseudo fonction		btst 	#ShiftKey,d0		beq.s	PasPseudoFcnt			; pas pseudo fonction; on convertie le pseudo fct en fct key		move.l	evtMessage(a4),d0		and.l	#$ff,d0;				sub.w	#$12,d0		bmi 	Exit			; pas pseudo fonction on ne fait rien		cmp.w	#$1d,d0		bhi 	Exit			; pas pseudo fonction on ne fait rien		lea		converttable1(pc),a0		move.b	(a0,d0),d0		asl.l	#8,d0		and.l	#$ff00,d0		bra.s	PasPseudoFcnt			; on a converti; --------------		PasPseudoFcnt		move.l	evtMessage(a4),d0		lsr.l	#8,d0		and.l	#$ff,d0		case#.w	(d0,if),\		($7a,Fonction1),\		($78,Fonction2),\		($63,Fonction3),\		($76,Fonction4),\		($60,Fonction5),\		($61,Fonction6),\		($62,Fonction7),\		($64,Fonction8),\		($65,Fonction9),\		($6d,Fonction10),\		($67,Fonction11),\		($6f,Fonction12),\		($69,Fonction13),\		($6b,Fonction14),\		($71,Fonction15)		bra		Exit		Fonction1		move.l	#1,d0		bra.s	GetFonctionNumeroFonction2		move.l	#2,d0		bra.s	GetFonctionNumeroFonction3		move.l	#3,d0		bra.s	GetFonctionNumeroFonction4		move.l	#4,d0		bra.s	GetFonctionNumeroFonction5		move.l	#5,d0		bra.s	GetFonctionNumeroFonction6		move.l	#6,d0		bra.s	GetFonctionNumeroFonction7		move.l	#7,d0		bra.s	GetFonctionNumeroFonction8		move.l	#8,d0		bra.s	GetFonctionNumeroFonction9		move.l	#9,d0		bra.s	GetFonctionNumeroFonction10		move.l	#10,d0		bra.s	GetFonctionNumeroFonction11		move.l	#11,d0		bra.s	GetFonctionNumeroFonction12		move.l	#12,d0		bra.s	GetFonctionNumeroFonction13		move.l	#13,d0		bra.s	GetFonctionNumeroFonction14		move.l	#14,d0		bra.s	GetFonctionNumeroFonction15		move.l	#15,d0; on regarde qu'elle est la fonction dans la table GetFonctionNumero		move.w	#true,result(a6)		lea		G.TableFonctionKeys,a0		move.b	(a0,d0.w),d0			; code de la focntion à effectuer		and.l	#$ff,d0		Case#	(D0,Exit),	\	; if not an event we support, then exit			,		\	;  0 Null (not used)			Annuler,\	 			Refaire,\	 			Couper,\			Copier,\			Coller,\			MarkIn,\			MarkOut,\			Enchaine,\			ChgPlEntree,\			ChgPlSortie,\			ChgPlEntSort,\			CommVide,\			TcDebPlusUn,\			TcDebmoinUn,\			TcfinPlusUn,\			TcfinMoinUn,\			,\			Inserer,\			Supprime,\			,\			fenetreSaisie,\			fenetreListing,\			fenetreTelecomm,\			FenetreTC,\			,\			SauvegardeFichier,\			,\			ModeSaisieTC,\			ModeSaisieTexte,\			ModeAucun,\			,\			Play,\			Stop,\			Playrev,\			FFwd,\			Frew,\			GotoIn,\			GotoOut,\			Eject,\			Still			bra		Exit; ----------------------------Play		move.w	#6,d0			bra		SimulClickInTelecommandeStop		move.w	#5,d0			bra		SimulClickInTelecommandePlayrev		move.w	#4,d0			bra		SimulClickInTelecommandeFFwd		move.w	#3,d0			bra		SimulClickInTelecommandeFrew		move.w	#2,d0			bra		SimulClickInTelecommandeGotoIn		move.w	#12,d0			bra		SimulClickInTelecommandeGotoOut		move.w	#13,d0			bra		SimulClickInTelecommandeStill		move.w	#1,d0			bra		SimulClickInTelecommandeEject		move.w	#7,d0; on simule un click dans la palette télécommande		SimulClickInTelecommande		move.l	G.TELECOMMANDEWindow,-(sp)		_SetPort				move.l	G.TELECOMMANDEWindow,-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem							move.l	G.TELECOMMANDEWindow,-(sp)		import	SelectReferencedWindow		jsr		SelectReferencedWindow		; on place les coordonnées du bouton 		move.l	TheEvent(a6),a0				move.w	Top+itemRect(a6),d0		add.w	#5,d0		move.w	d0,top+evtMouse(a0)				move.w	left+itemRect(a6),d0		add.w	#5,d0		move.w	d0,left+evtMouse(a0)				pea		evtMouse(a0)		_LocalToGlobal; on appelle la routine DoMouseDownPaletteTelecommande		move.l	TheEvent(a6),-(sp)		import	DoMouseDownPaletteTelecommande		jsr		DoMouseDownPaletteTelecommande				bra		Exit		; ---------------------------Annuler 		move.w	#1,d0		move.w	#EditMenu,d1		bra		CallMenuRefaire 		move.w	#2,d0		move.w	#EditMenu,d1		bra		CallMenuCouper 		move.w	#4,d0		move.w	#EditMenu,d1		bra		CallMenuCopier 		move.w	#5,d0		move.w	#EditMenu,d1		bra		CallMenuColler 		move.w	#6,d0		move.w	#EditMenu,d1		bra		CallMenu; ----------------------------MarkIn		move.w	#DialSaisie_MarKInItem,d0		bra.s	SimulClickInSaisie		MarkOut		move.w	#DialSaisie_MarkOutItem,d0		bra.s	SimulClickInSaisieTcDebPlusUn		move.w	#DialSaisie_TCInControlplus,d0		bra.s	SimulClickInSaisieTcDebmoinUn		move.w	#DialSaisie_TCInControlmoin,d0		bra.s	SimulClickInSaisieTcfinPlusUn			move.w	#DialSaisie_TCOutControlplus,d0		bra.s	SimulClickInSaisieTcfinMoinUn			move.w	#DialSaisie_TCOutControlmoin,d0; on simule un click dans le dialog saisie		SimulClickInSaisie		pea		G.DialogSaisie 		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem							pea		G.DialogSaisie 		_setPort				pea		G.DialogSaisie 		import	SelectReferencedWindow		jsr		SelectReferencedWindow; on place les coordonnées du bouton 		move.l	TheEvent(a6),a0				move.w	Top+itemRect(a6),d0		add.w	#5,d0		move.w	d0,top+evtMouse(a0)				move.w	left+itemRect(a6),d0		add.w	#5,d0		move.w	d0,left+evtMouse(a0)				pea		evtMouse(a0)		_LocalToGlobal; on appelle la routine MouseDownSaisie		move.l	TheEvent(a6),-(sp)		import	DoDialogSaisieEvent		jsr		DoDialogSaisieEvent				bra		Exit		; -------------------		Enchaine		move.l	stPtr(a6),-(sp)		move.l	G.General_TCCourant,-(sp)		import	Do_Enchaine		jsr		Do_Enchaine		bra		Exit		; ------------------------------------------------------ChgPlEntree		move.w	#1,d7		bra 	DoCommentaireChgPlSortie		move.w	#2,d7		bra 	DoCommentaireChgPlEntSort		move.w	#3,d7		bra 	DoCommentaire		CommVide				move.w	#5,d7DoCommentaire		move.l	G.listingTE,d0		beq.s	NOnPas_TECommentaire_listing		pea		G.listingWindow		_SetPort		move.l	G.listingTE,-(sp)		move.l	G.ListingTEstNum,-(sp)		move.w	G.ListingTEstItem,-(sp)		import	TransfertTE_Memoire		jsr		TransfertTE_Memoire				move.l	G.listingTE,-(sp)		_TeDispose		clr.l	G.listingTENOnPas_TECommentaire_listing		move.l	G.SaisieTE,d0		beq.s	NOnPas_TECommentaire		; il y a un te ouvert; on le ferme		jsr		TransfertSaisieMemoire		cmp.l	#-1,d0			beq		Exit	; il y a erreurNOnPas_TECommentaire					import	GetIndString		pea		TextBuff(a6)		move.w	#128,-(sp)		; "string affichage" resource		move.w	d7,-(sp)		; id du menu		jsr		GetIndString	; on calcule maintenant l'espace nécessaire dans le sous-titre pour stocker la chaîne de commentaire					move.l	stPtr(a6),a0			move.l	st_TexteLenth(a0),d0			import	AligneD0			jsr		AligneD0	; longueur texte aligné dc.l; 								move.l	st_StyleLenth(a0),d1			import	AligneD1			jsr		AligneD1	; longueur styles dc.l			add.l	d1,d0			 			move.l	d0,d4			move.l	a0,a1					; on sauvegarde ce calcul			add.l	#st_SizeOf,d4			adda.l	d4,a1			move.l	a1,a4			move.l	a1,st_CommentairePtr(a0)	; pointeur de la chaine de commentaire			move.b	TextBuff(a6),d1			and.l	#$ff,d1			move.l	d1,st_CommentaireLenth(a0)			add.l	d1,d0					; longueur total st; on calibre la longueur du sous-titre 		; a0 ptr st, d0 longueur demandée (sera alignée ds.l par ecarteSoustitre)					import	EcarteSousTitre			jsr		EcarteSousTitre	;			lea		TextBuff(a6),a0		; chaine de caractères sauvegardé			moveq	#0,d0			move.b	(a0)+,d0			move.l	stPtr(a6),a1			move.l	a4,st_CommentairePtr(a1)	; pointeur de la chaine de commentaire			move.l	d0,st_Commentairelenth(a1)	; pointeur de la chaine de commentaire			move.l	a4,a1			_blockMove; 								jsr		TransfertMemoireSaisie;  on regarde si le st en cour est dans saisie		pea		G.ListingWindow		_SetPort				lea		G.ListingWindow,a0		move.l	clipRgn(a0),-(sp)		pea		PortRect(a0)		_RectRgn				; initialisation de quick-draw de la police et tout et tout		MOVE.W		#SrcCopy,-(SP)					; source mode		_TextMode		MOVE.W		#Monaco,-(SP)					; Monaco		_TextFont		MOVE.W		#9,-(SP)						; 9 point		_TextSize		MOVE.W		#0,-(SP)						; plain		_TextFace		move.w	#1,-(sp)	   	move.w	#1,-(sp)	   	_PenSize	   	move.w	#SrcCopy,-(sp)	   	_PenMode				clr.w	-(sp)		move.l	G.ListingVScroll,-(sp)		_GetCtlValue		move.w	(sp)+,d1		move.w	G.General_SoustitreEnCour,d0		cmp.w	d1,d0		blo		PasSaisieActif		; pas dans la fenètre		add.w	G.ListingMaxDisplay,d1		cmp.w	d1,d0		bhi.s	PasSaisieActif		; pas dans la fenètre; le sous-titre est bien dans la fenètre listing				clr.w	-(sp)		move.l	G.ListingVScroll,-(sp)		_GetCtlValue		move.w	G.General_SoustitreEnCour,d0		sub.w	(sp)+,d0			move.l	stPtr(a6),-(sp)		mulu	#ListingHauteurCarreST,d0			clr.w	-(sp)		move.w	d0,-(sp)						lea		G.ListingWindow,a0		move.l	4+PortRect(a0),-(sp)		move.l	PortRect(a0),-(sp)				import	DrawOneSousTitre			;(le sous-titre: ptr; h,v :point; windowRect: rect)			jsr		DrawOneSousTitrePasSaisieActif			pea		G.DialogSaisie		_SetPort		move.w	#True,G.ChangeSinceLastSave			; on indique qu'il y a eu du changement		bra		Exit; -------------------Inserer			move.w	#InsererSTItem,d0		move.w	#EditMenu,d1		bra		CallMenuSupprime		move.w	#OterSTItem,d0		move.w	#EditMenu,d1		bra		CallMenufenetreSaisie		move.w	#3,d0		move.w	#132,d1		bra		CallMenufenetreListing		move.w	#4,d0		move.w	#132,d1		bra		CallMenufenetreTelecomm		move.w	#7,d0		move.w	#132,d1		bra		CallMenuFenetreTC			move.w	#8,d0		move.w	#132,d1		bra		CallMenu		SauvegardeFichier			move.w	#SaveItem,d0		move.w	#FileMenu,d1		bra		CallMenuModeSaisieTC		move.w	#SaisieMode_TimecodeItem,d0		move.w	#ModeTravailMenu,d1		bra		CallMenuModeSaisieTexte		move.w	#SaisieMode_TexteItem,d0		move.w	#ModeTravailMenu,d1		bra		CallMenuModeAucun					move.w	#SaisieMode_AucunItem,d0		move.w	#ModeTravailMenu,d1		bra		CallMenu		; on simule une commande par les menuCallMenu		move.w	d0,-(sp)		;MenuItem			move.w	d1,-(sp)		;MenuID			import	DoMenuCommand		jsr		DoMenuCommand		exit	move.l	oldport(a6),-(sp)		_SetPort		movem.l	(sp)+,d0-d7/a0-a4		UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)converttable1:		dc.b	$7a,$78,$63,$76,$61,$60,$6f,$65,$62,$67,$64,$6d										DbgInfo.New	DoFonctionKey		align 4			ENDP* ======================================================================*	Fonction	Do_Enchaine();* ======================================================================** Cette routine effectue un enchaîné* Les enchaînés sont des sous-titres ooù l'interval est égals à l'interval minimum* on peut peut donc en appuyant sur une touche effectuer la saisie du tc out du tc en cour* insérer un sous-titre (sauf condition ou il y a un st à la suite et que le tc out est vide)* et marquer le tc in * il y a deux mode: on ajoute l'interval sur le tc in du ST suivant ou on soustrait l'interval* sur le tc out du st courant.*Do_Enchaine	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordSTPtr		ds.l	1		; le soustitretcCourant	ds.l	1		; le timecodeParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linktextbuff	ds.b	256ItemType		ds.w	1ItemHandle		ds.l	1itemRect		ds		rectLocalSize	EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand,\				AdjustMenus,ConversionNumeroSTPointeur,TransfertSaisieMemoire,\				insertST,CalculDuree		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame				link	a6,#LocalSize				; on sauvegarde la valeur du time-code (car cela peut changer en cours de manipulation)		move.l	G.General_TCCourant,d0		and.l	#$3fffffff,d0			; on masque le field 2		move.l	d0,tcCourant(a6)				clr.w	-(sp)		move.w	#TimecodeOut_SousTitrebcd,-(sp)		move.l	#0,-(sp)		move.l	STPtr(a6),a0		move.l	st_AbsNUMST(a0),-(sp)		move.l	st_timecodeOut(a0),-(sp)		import	DoMakeUndo		jsr		DoMakeUndo		move.w	(sp)+,d0				;DoMakeUndo(TimecodeIn_SousTitrebcd,0,		;					ST_Ptr->st_AbsNUMST,ST_Ptr->st_TimeCodeIn);; on ferme un te s'il y en a un ouvert 		jsr		TransfertSaisieMemoire		pea		G.DialogSaisie 		move.w	#DialSaisie_TcOutTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				; le mode addition au tc fin est actif		move.l	tcCourant(a6),d0				tst.w	G.Preference_Enchaine			bne.s	PasSubToOut; nous sommes dans le mode soustraction au point de sortie		move.w	G.Preference_Interval,d1		and.l	#$ffff,d1		import	ConversionTrames_TimeCode		jsr		ConversionTrames_TimeCode		move.l	tcCourant(a6),d0		and.l	#$3fffffff,d0			; on masque le field 2		import	SoustractionTimeCode		jsr		SoustractionTimeCode		PasSubToOut		move.l	stPtr(a6),a0		and.l	#$3f7f7f3f,d0			; on masque le field 2		move.l	d0,st_timecodeOut(a0)		lea		textbuff(a6),a0		import	ConversionTCstASCII		jsr		ConversionTCstASCII		; on affiche le time code out					lea.l	G.DialogSaisie,a0		MOVE.L	ClipRgn(a0),-(SP)		pea 	portRect(a0)				; rectangle	on masque le reste		_RectRgn				move.w	#Monaco,-(sp)		_TextFont		move.w	#14,-(sp)		_TextSize				lea		textbuff(a6),a0		move.b	(a0)+,d0		move.l	a0,-(sp)		and.l	#$ff,d0		move.l	d0,-(sp)		pea		itemRect(a6)		move.w	#0,-(sp)		_textBox					move.w	#9,-(sp)		_TextSize		; on insère un nouveau sous-titre dans la liste; on sauvegarde la valeur en cour		jsr		CalculDuree			; on vérifie que les temps ne sont pas trop cours;		move.l	soustitrePtr,-(sp);		move.l	#parramètres,-(sp);		jsr		VerifieST;		cmp.l	#-1,d0;		beq		Exit	    ; attention il y a erreur; on regarde s'il faut inserer un sous-titre		move.w	G.General_SousTitreEncour,d0		and.l	#$FFFF,d0		jsr		ConversionNumeroSTPointeur		clr.l	d0; y a t-il un sous-titre suivant ?		tst.l	(a0)		beq.s	Insere_Soustitre	; non il faut insérer un sous-titre		move.l	(a0),a1				add.w	#1,G.General_SousTitreEncour	; on passe au sous-titre suivant; oui il y a un st derrière faut-il insérer un st quand même; on ne le fait pas si le st suivant a un tc out; le sous titre suivant a t-il un timecode de sortie ?		cmp.l	#-1,st_TimeCodeOut(a1)			beq		PasInsere_SoustitreInsere_Soustitre				jsr		insertST	PasInsere_Soustitre			; on recupère l'adresse du nouveau sous-titre en cours 		move.w	G.General_SousTitreEncour,d0		and.l	#$FFFF,d0		jsr		ConversionNumeroSTPointeur		move.l	a0,StPtr(a6)		; on est au sous-titre suivant; on affecte le time code au point d'entrée		clr.w	-(sp)		move.w	#TimecodeIn_SousTitrebcd,-(sp)		move.l	#0,-(sp)		move.l	STPtr(a6),a0		move.l	st_AbsNUMST(a0),-(sp)		move.l	st_TimeCodeIn(a0),-(sp)		import	DoMakeUndo		jsr		DoMakeUndo		move.w	(sp)+,d0				;DoMakeUndo(TimecodeIn_SousTitrebcd,0,		;					ST_Ptr->st_AbsNUMST,ST_Ptr->st_TimeCodeIn);		move.l	tcCourant(a6),d0		tst.w	G.Preference_Enchaine			beq		PasaddToin		; Nous Sommes dans le mode addtition au tc in suivant				move.w	G.Preference_Interval,d1		and.l	#$ffff,d1		import	ConversionTrames_TimeCode		jsr		ConversionTrames_TimeCode		move.l	tcCourant(a6),d0		import	AdditionTimeCode		jsr		AdditionTimeCodePasaddToin				move.l	stPtr(a6),a0		move.l	d0,st_timeCodeIN(a0)		lea		textbuff(a6),a0		import	ConversionTCstASCII		jsr		ConversionTCstASCII				pea		G.DialogSaisie 		move.w	#DialSaisie_TcInTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem						lea.l	G.DialogSaisie,a0		MOVE.L	ClipRgn(a0),-(SP)		pea 	portRect(a0)				; rectangle	on masque le reste		_RectRgn		move.w	#Monaco,-(sp)		_TextFont		move.w	#14,-(sp)		_TextSize				lea		textbuff(a6),a0		move.b	(a0)+,d0		move.l	a0,-(sp)		and.l	#$ff,d0		move.l	d0,-(sp)		pea		itemRect(a6)		move.w	#0,-(sp)		_textBox					move.w	#9,-(sp)		_TextSize		; on rafraichie la fenètre listing				import	CentreListingWindow		jsr		CentreListingWindow; on redessine la fenètre saisie		pea		G.DialogSaisie 		_SetPort				pea		G.DialogSaisie 		import	SelectReferencedWindow		jsr		SelectReferencedWindow		lea		G.DialogSaisie,a0		pea		PortREct(a0)		_InvalRect		move.w	#True,G.ChangeSinceLastSave			; on indique qu'il y a eu du changementexit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)		dbgInfo.New	Do_Enchaine* ==================================*	fonction CalculeStylePtr(st ptr)* ==================================; entrée a0=ptr du soustitre; sortie d0= nouveau ptr style;CalculeStylePtr proc export		with SousTitreRecord		movem.l	d1,-(sp)				move.l	st_TexteLenth(a0),d0 ; longueur du texte; on l'aligne  sur un mot long		import	AligneD0		jsr		AligneD0			add.w	#st_SizeOf,d1		and.l	#$ffff,d0		add.l	a0,d0		; pointeur des styles		exit	movem.l	(sp)+,d1		Rts				dbgInfo.new	CalculeStylePtr				endP* ==================================*	fonction CalculeCommentairePtr(st ptr)* ==================================; entrée a0=ptr du soustitre; sortie d0= nouveau ptr style;CalculeCommentairePtr proc export		with SousTitreRecord		movem.l	d1,-(sp)				move.l	st_StyleLenth(a0),d0 ; longueur des styles; on l'aligne  sur un mot long		import	AligneD0		jsr		AligneD0		; aligner sur modulo 4		add.w	#st_SizeOf,d1		and.l	#$ffff,d0		add.l	st_StylePtr(a0),d0		; pointeur du commentaire		exit	movem.l	(sp)+,d1		Rts				dbgInfo.new	CalculeCommentairePtr		endP******************************************************************* 	fonction d'alignement des registres d0 ou d1 sur un modulo 4******************************************************************AligneD0	proc 	Export		movem.l	d1,-(sp)		movem.l	d0,-(sp)		move.l	d0,d1		and.l	#$3,d1		beq.s	@1		neg.w	d1		add.w	#4,d1@1		add.l	d1,d0	; longueur ajustée sur ds.l			movem.l	(sp)+,d1		movem.l	(sp)+,d1		rts		dbgInfo.new		AligneD0		endpAligneD1	proc 	Export		movem.l	d0,-(sp)		movem.l	d1,-(sp)		move.l	d1,d0		and.l	#$3,d0		beq.s	@1		; reste nul donc aligné		neg.w	d0		add.w	#4,d0@1		add.l	d0,d1	; longueur ajustée sur ds.l			movem.l	(sp)+,d0		movem.l	(sp)+,d0		rts		dbgInfo.new		AligneD0		endp			get_STJustification		proc 	Export; routine récupérant la justification du sous-titre; et convertissant cette valeur au protocole Text Edit; 	Entrée: a0;	Sortie: d0			machine MC68020		with	SoustitreRecord		moveq	#0,d0		move.b	st_Justification(a0),d0		bmi.s	PasCorrect		cmp.b	#3,d0		blo.s	CorrectPasCorrect				move.b	#0,D0	; par défaut centréeCorrect				movem.l	a0,-(sp)		lea		tableConversionJust,a0		move.w	(a0,d0.w*2),d0		movem.l	(sp)+,a0		rts		dbgInfo.new		get_STJustificationtableConversionJust		dc.w	teJustCenter	;centrée		dc.w	teJustLeft		; à gauche		dc.w	teJustright		; à droite		dc.w	teJustCenter	;centrée		dc.w	teJustCenter	;centrée		dc.w	teJustCenter	;centrée		endP				* =========================================* PROCEDURE   	ForceUpdateWindow()* =========================================; Cette routine affiche le contenu du block noteForceUpdateWindow	PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkSavePort	ds.l	1LocalSize	EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame				link	a6,#LocalSize		pea		SavePort(a6)		_GetPort		pea		G.DialogSaisie		_SetPort				lea		G.DialogSaisie,a0		pea		PortREct(a0)		_InvalRect					pea		G.listingWindow		_SetPort						lea		G.listingWindow,a0		pea		PortREct(a0)		_InvalRect						pea		G.BlockNoteWindow		_SetPort						lea		G.BlockNoteWindow,a0		pea		PortREct(a0)		_InvalRect						move.l	SavePort(a6),-(sp)		_SetPort		Exit	UNLK	A6		MOVEA.L	(SP)+,A0		; save the caller's address		ADDA.L	#ParamSize,SP		; strip the caller's parameters		JMP	(A0)				DbgInfo.New	ForceUpdateWindow		align 4			ENDP					* ====================================* PROCEDURE 	AugmenteDureeTcListe()* ====================================**   Cette procédure ouvre un dialog pour déterminer une zone d'action*  	dans laquelle on effectue un offset sur les times codes**AugmenteDureeTcListe 		PROC	EXPORTStackFrame	RECORD	{A6Link},DECR		; build a stack frame recordParamBegin	EQU	*			; start parameters after this pointParamSize	EQU	ParamBegin-*		; size of all the passed parametersRetAddr 	DS.L	1			; place holder for return addressA6Link		DS.L	1			; place holder for A6 linkWindowPtr	DS.L	1			; local Window pointer variableWichControl	DS.L	1			; control en cour de traitementTheDialogSel ds.l	1			; le dialog en questionTheItemHit	ds.w	1			; le item frappéTheItemHitalert	ds.w	1			; le item frappéTheDialogPtr		DS.l	1		; le pointeur local du dialogTheConfirmDialogPtr	DS.l	1		; le pointeur local du dialogItemchoisi		DS.W	1		; Item choisi par l'utilisateuritemType		ds.w	1		; stockage du type de ItemitemHandle		ds.L	1		; stockage	du handle du itemitemRect		DS	RecttextBuff		ds.b	256textSecondaire	ds.b	256STPtr			ds.l	1		;	adresse du sous-titre trouvé par tcStart			ds.l	1End				ds.l	1Offset			ds.l	1offsetsurblocNote	ds.w	1SaveRgb			ds.w	3backRgb			ds.w	3offsetTCin		ds.l	1offsetTCOut		ds.l	1LocalSize	EQU 	*			; size of all the local variables		ENDR		IMPORT	CentreListingWindow,DrawListingWindow,WaitTicks,DoMenuCommand, \				AdjustMenus,ConversionNumeroSTPointeur,ConversionTimeCodePointeur,\				ConversionchaineASCIITc		WITH	StackFrame,SOUSTITRERECORD		; cover our local stack frame		link	a6,#LocalSize				movem.l	d1-d7/a1-a4,-(sp)		clr.l	-(sp)		move.w	#187,-(sp)	; id number		clr.l	-(sp)			move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheDialogPtr(a6)  		_DrawDialog; on trace le contour du bouton rechercher				move.l	TheDialogPtr(a6),-(sp)		move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect				_PenNormal		; on affecte le nouveau état des bouton; toute la liste		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		; en partie		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		clr.w	-(sp)		_SetCtlValue			; on désactive les te	from et to		move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		HydeDItem		move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		HydeDItem		; on affecte le numéro du premier st au début						move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_FromTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	G.General_PremierSTPtr,a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText			;; on affecte le numéro du dernier st à fin						move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_ToTEItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	G.General_DernierSTPtr,a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		; on place dans la case le dernier offset effectué		move.l	G.offsetTCIn,d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		move.w	#0,-(sp)		move.w	#-1,-(sp)		_SelItext										move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		; on place dans la case le dernier offset effectué		move.l	G.offsetTCOut,d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		move.w	#0,-(sp)		move.w	#-1,-(sp)		_SelItext										move.l	TheDialogPtr(a6),-(sp)		move.w	#9,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_FrameRect				move.l	TheDialogPtr(a6),-(sp)		move.w	#10,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				pea		itemRect(a6)		_FrameRect		; *************************************************************Rechercher_Oncontinu:				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog		move.w	Itemchoisi(A6),d0					case#.w	(d0,IF), \		(Dial_OffsetTcListe_OkItem,ok),\		(Dial_OffsetTcListe_AnnulerItem	,Annuler),\		(Dial_OffsetTcListe_TouteLaListeItem,TouteLaListe ),\		(Dial_OffsetTcListe_PartieDeListeItem,PartieDeLaListe)		bra		Rechercher_OncontinuTouteLaListe				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		clr.w	-(sp)		_SetCtlValue									move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		HydeDItem		move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		HydeDItem				bra		Rechercher_Oncontinu		PartieDeLaListe				move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_TouteLaListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		move.l	TheDialogPtr(a6),-(sp)		move.w	#Dial_OffsetTcListe_PartieDeListeItem,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue						move.w	#Dial_OffsetTcListe_FromTEItem,d0		bsr		ChaudDItem				move.w	#Dial_OffsetTcListe_ToTEItem,d0		bsr		ChaudDItem				move.l	TheDialogPtr(a6),-(sp)		_DrawDialog												bra		Rechercher_Oncontinu; -------------------------------------ok; on Recupère la chaine offset		move.w	#true,G.ChangeSinceLastSave		; on indique qu'il y a eu modif				move.l	TheDialogPtr(a6),-(sp)		move.w	#7,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext				lea		textbuff(a6),a0		jsr 	ConversionchaineASCIITc 	; on effectue la conversion ou bien la soustraction		cmp.l	#-1,d0		bne.s	@0; traitement erreur@0		move.l	d0,offsetTCin(a6)		move.l	d0,G.offsetTCin				move.l	TheDialogPtr(a6),-(sp)		move.w	#8,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext				lea		textbuff(a6),a0		jsr 	ConversionchaineASCIITc 	; on effectue la conversion ou bien la soustraction		cmp.l	#-1,d0		bne.s	@10		; traitement erreur@10				move.l	d0,offsetTCOut(a6)				move.l	d0,G.offsetTCOut		; on recupère le start item		move.l	TheDialogPtr(a6),-(sp)		move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext		pea		textbuff(a6)		import	CHERCHESTPARNUMERO		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@1		; traitement erreur		@1		move.l	d0,start(a6); on recupère le end item		move.l	TheDialogPtr(a6),-(sp)		move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textbuff(a6)		_GetItext		pea		textbuff(a6)		jsr		CHERCHESTPARNUMERO		tst.l	d1		bne		@2		; traitement erreur@2		move.l	d0,end(a6)		move.l	TheDialogPtr(a6),-(sp)		move.w	#3,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0				beq.s		PasTouteLaListe				move.l	G.General_PremierStPtr,start(a6)		move.l	G.General_DernierStPtr,end(a6)		PasTouteLaListe		; --------------------------------------------; on ouvre un dialog pour confirmer la demande		clr.l	-(sp)		move.w	#188,-(sp)	; id number		clr.l	-(sp)		move.l	#-1,-(sp)		_GetNewDialog		move.l	(sp),TheConfirmDialogPtr(a6)  		_DrawDialog		; on trace le contour du bouton rechercher				move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#1,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheConfirmDialogPtr(a6),-(sp)			_SetPort				move.w	#3,-(sp)		move.w	#3,-(sp)		_PenSize				pea		itemRect(a6)		move.w	#-4,-(sp)		move.w	#-4,-(sp)		_InsetRect				pea		itemRect(a6)		move.w	#16,-(sp)		move.w	#16,-(sp)		_FrameRoundRect		; on affiche les paramètres		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#3,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	Start(a6),a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText;; on affecte le numéro du dernier st à fin		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#4,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	end(a6),a0		move.l	st_NumeroST(a0),d0		lea		textBuff(a6),a0		import	ConvertiNumST_String		jsr		ConvertiNumST_String						move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		; offset tc in		move.l	offsetTCIn(a6),d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#5,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText		; offset tc out		move.l	offsetTCOut(a6),d0		lea		textBuff(a6),a0			import	ConversionTCstASCII		jsr		ConversionTCstASCII		move.l	TheConfirmDialogPtr(a6),-(sp)			move.w	#6,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem				move.l	ItemHandle(a6),-(sp)		pea		textBuff(a6)		_SetIText				ModalLoop_1				import	SpecialModalDialogFilter		pea	SpecialModalDialogFilter		pea		Itemchoisi(a6)		_ModalDialog				move.w	Itemchoisi(A6),d0		cmp.w	#1,d0		beq.s	OnneffectueLoffset		cmp.w	#2,d0		bne.s	ModalLoop_1				move.l	TheConfirmDialogPtr(a6),-(sp)			_DisposDialog		import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		bra		Rechercher_Oncontinu		OnneffectueLoffset		move.l	TheConfirmDialogPtr(a6),-(sp)		_DisposDialog; ça y est on effectue l'offset sur la liste				move.l	TheDialogPtr(a6),-(sp)		_DisposDialog				import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow				move.l	start(a6),a0OffsetSurLaListeLoop:		move.l	a0,start(a6)		movem.l	d0-d7/a0-a4,-(sp)		move.w	#32,-(sp) 		import	C_SpinCursor	; spin the ball 		JSR	C_SpinCursor	; spin the ball		movem.l	(sp)+,d0-d7/a0-a4		move.l	start(a6),a0		move.l	st_TimeCodeIn(a0),d0		cmp.l	#-1,d0		beq.s	PasToucherTcIn		move.l	offsetTCIn(a6),d1		import	AdditionTimeCode		jsr		AdditionTimeCode		move.l	start(a6),a0		move.l	d0,st_TimeCodeIn(a0)PasToucherTcIn		movem.l	d0-d7/a0-a4,-(sp)		move.w	#32,-(sp) 		import	C_SpinCursor	; spin the ball 		JSR	C_SpinCursor	; spin the ball		movem.l	(sp)+,d0-d7/a0-a4		move.l	start(a6),a0		move.l	st_TimeCodeOut(a0),d0		cmp.l	#-1,d0		beq.s	PasToucherTcOut		move.l	offsetTCOut(a6),d1		import	AdditionTimeCode		jsr		AdditionTimeCode		move.l	start(a6),a0		move.l	d0,st_TimeCodeOut(a0)		PasToucherTcOut				move.l	st_NextST(a0),a0		cmp.l	#0,a0		beq.s	finOffsetSurLaListeLoop	; aie aie aie déja à la fin		cmp.l	end(a6),a0		bgt.s	finOffsetSurLaListeLoop		bra.s	OffsetSurLaListeLoopfinOffsetSurLaListeLoop						import	Show_cursor		move.w	#$0505,-(sp)	; on place le bon curseur		jsr		Show_cursor				import	ForceUpdateWindow		jsr		ForceUpdateWindow		import	UpdateGeneralValue		jsr		UpdateGeneralValue		; on actualise le premier et le  dernier tc						bra.s	ExitAnnuler				move.l	TheDialogPtr(a6),-(sp)		_DisposDialog			import ActivateFloatersAndFirstDocumentWindow		jsr ActivateFloatersAndFirstDocumentWindow		Exit	movem.l	(sp)+,d1-d7/a1-a4		UNLK	A6			; destroy the link		MOVEA.L	(SP)+,A0		; pull off the return address		ADDA.L	#ParamSize,SP		; strip all of the caller's parameters		JMP	(A0)			; return to the caller		align 4		ToggleControl		clr.w	-(sp)		move.l	ItemHandle(a6),-(sp)		_GetCtlValue		move.w	(sp)+,d0		beq		@1		move.l	ItemHandle(a6),-(sp)		move.w	#false,-(sp)		_SetCtlValue		rts@1		move.l	ItemHandle(a6),-(sp)		move.w	#true,-(sp)		_SetCtlValue		rts		HydeDItem		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		move.w	#$88,-(sp)		move.l	ItemHandle(a6),-(sp)		pea		itemRect(a6)		_SetDItem		pea		itemRect(a6)		move.w	#-3,-(sp)		move.w	#-3,-(sp)		_Insetrect				pea		itemRect(a6)		_FrameRect				pea		SaveRgb(a6)		_GetForeColor							pea		backRgb(a6)		_GetbackColor					pea		backRgb(a6)		_RGBForeColor			pea		qd.Gray		_PenPat				move.w	#srcBic,-(sp)		_PenMode				pea		itemRect(a6)		_PaintRect		_PenNormal				pea		SaveRgb(a6)		_RGBForeColor		rts				ChaudDItem		move.w	d0,d7		move.l	TheDialogPtr(a6),-(sp)		move.w	d0,-(sp)		pea		ItemType(a6)		pea		ItemHandle(a6)		pea		itemRect(a6)		_GetDItem		move.l	TheDialogPtr(a6),-(sp)		move.w	d7,-(sp)		move.w	#$10,-(sp)		move.l	ItemHandle(a6),-(sp)		pea		itemRect(a6)		_SetDItem		rts				DbgInfo.New	AugmenteDureeTcListe		; this name will appear in the debugger		ENDP						end						